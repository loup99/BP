######################################################
################### EVENT WINDOW #####################
######################################################

window = {
	name = "event_window"
	parentanchor = center
	size = { 1120 580 }
	position = { 220 0 }
	layer = middle
	alpha = 0

	widget = {
		visible = "[Not(GameHasMultiplePlayers)]"
		size = { 100% 100% }

		icon = {
			visible = "[Not(GetVariableSystem.Exists( 'event_window_mouse_leave'))]"
			parentanchor = center
			size = { 200% 200% }
			alwaystransparent = yes
			texture = "gfx/interface/component_masks/mask_fade_circle.dds"
			color = { 0.1 0.1 0.1 1 }
			alpha = 0

			state = {
				name = appear
				trigger_on_create = yes
				delay = 0.2
				using = Animation_Curve_Default
				alpha = 0.6
				duration = 0.8
			}

			state = {
				name = _hide
				using = Animation_Curve_Default
				duration = 3
				alpha = 0
			}
		}
	}

	widget = {
		size = { 100% 100% }
		using = Window_Background
		using = Window_Decoration_Frontend_Flat
	}

	state = {
		name = show
		trigger_on_create = yes
		using = Animation_FadeIn_Standard
		duration = 0.7

		on_start = "[GetVariableSystem.Clear( 'event_window_mouse_leave')]"

		start_sound = {
			soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"

			soundparam = {
				name = StateChange
				value = 1
			}
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard

		start_sound = {
			soundeffect = "event:/MUSIC/Cues/Events/kill_mx_cue"
		}
	}

	state = {
		name = _mouse_hierarchy_leave
		on_start = "[GetVariableSystem.Set( 'event_window_mouse_leave', 'true' )]"
	}

	vbox = {
		background = {
			name = "event_picture"
			texture = "[EventWindow.GetEventBackground]"

			margin = { -30 -15 }

			modify_texture = {
				name = "event_picture_fade"
				texture = "gfx/interface/window_event/mask_event_image.dds"
				blend_mode = alphamultiply
			}
		}

		widget = {
			layoutpolicy_horizontal = expanding
			size = { 0 70 }

			icon = {
				name = "theme_header"
				position = { 20 5 }
				size = { 1057 70 }
				texture = "gfx/interface/window_event/header_neutral.dds"

				modify_texture = {
					name = overlay
					texture = "gfx/interface/component_effects/effect_header_blue_shine.dds"
					blend_mode = colordodge
					translate_uv = { 0.6 0 }
				}

				state = {
					name = right
					next = left

					duration = 8
					bezier = { 0.8 0.18 0.96 .05 }

					modify_texture = {
						name = overlay
						translate_uv = { -0.6 0 }
					}
				}

				state = {
					name = left
					next = right

					duration = 0.0
					delay = 5

					modify_texture = {
						name = overlay
						translate_uv = { 0.6 0 }
					}
				}

				state = {
					trigger_on_create = yes
					name = start
					next = right

					duration = 0.0

					modify_texture = {
						name = overlay
						translate_uv = { 0.6 0 }
					}
				}
			}

			text_single = {
				name = "title"
				parentanchor = vcenter
				position = { 100 0 }
				fontsize = 29
				fontsize_min = 16
				text = "[EventWindow.GetTitle]"
				default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
				using = Font_Type_Flavor
				max_width = 950

				alpha = 0

				state = {
					name = start
					trigger_on_create = yes
					delay = 0.2
					using = Animation_Curve_Default
					alpha = 1
					duration = 0.5
				}
			}

			icon = {
				name = "theme_icon"
				parentanchor = vcenter
				position = { 20 0 }
				size = { 74 74 }
				texture = "[EventWindow.GetThemeIcon]"

				modify_texture = {
					name = overlay
					texture = "gfx/interface/component_effects/effect_blue_shine.dds"
					blend_mode = colordodge
					translate_uv = {0.6 0}
				}

				state = {
					name = right
					next = left

					duration = 2
					bezier = { .8 .18 .96 .05}

					modify_texture = {
						name = overlay
						translate_uv = {-0.6 0}
					}
				}

				state = {
					name = left
					next = right

					duration = 0.0
					delay = 5


					modify_texture = {
						name = overlay
						translate_uv = {0.6 0}
					}
				}

				state = {
					trigger_on_create = yes
					name = start
					next = right

					duration = 0.0

					modify_texture = {
						name = overlay
						translate_uv = {0.6 0}
					}
				}
			}
		}

		widget = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_left = 35
				margin_right = 35
				margin_bottom = 15

				widget = {
					name = "text_spacer"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					layoutstretchfactor_horizontal = 45
				}

				###CHARACTERS
				widget = {
					name = "characters"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					layoutstretchfactor_horizontal = 55
					alpha = 0

					state = {
						name = appear
						trigger_on_create = yes
						delay = 0.5
						using = Animation_Curve_Default
						alpha = 1
						duration = 0.5
					}

					### LEFT CHARACTER ###
					hbox = {
						widget = {
							name = "portrait_left"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							portrait_event = {
								name = "portrait_left"
								datacontext = "[EventWindow.GetPortraitCharacter('left_portrait')]"
								visible = "[And(EventWindow.HasPortraitCharacter('left_portrait'), EventWindow.HasPortraitCharacter('right_portrait'))]"
								parentanchor = bottom|left
								position = { -70 0 }
								size = { 500 558 }

								blockoverride "portrait_button"
								{
									portrait_texture = "[EventWindow.GetAnimatedEventPortraitTexture('left_portrait', 'camera_event_left', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
									alwaystransparent = "[Not(EventWindow.ShouldShowPortraitInfo('left_portrait'))]"
									tooltip_enabled = "[EventWindow.ShouldShowPortraitInfo('left_portrait')]"
								}

								blockoverride "highlight_visible"
								{
									visible = "[Or(Character.IsHovered, EventWindow.IsCharacterHighlighted( EventWindow.GetPortraitCharacter('left_portrait') ))]"
									position = { -40 0 }
								}

								blockoverride "grayscale" {}

								highlight_icon = {
									name = "prison_bars"
									visible = "[Character.IsImprisoned]"
									size = { 280 500 }
									parentanchor = bottom|left
									effectname = "NoHighlight"
									spriteType = corneredTiled
									texture_density = 1.5
									texture = "gfx/portraits/portrait_prison_body.dds"

									modify_texture = {
										name = "mask"
										texture =  "gfx/portraits/portrait_mask_event.dds"
										spriteType = Corneredstretched
										blend_mode = alphamultiply
									}
								}
							}
						}

						### RIGHT CHARACTER ###
						widget = {
							name = "portrait_right"
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding

							### RIGHT CHARACTER ###
							portrait_event = {
								name = "portrait_right"
								datacontext = "[EventWindow.GetPortraitCharacter('right_portrait')]"
								visible = "[EventWindow.HasPortraitCharacter('right_portrait')]"
								parentanchor = bottom|right
								position = { 8 0 }
								size = { 500 558 }

								blockoverride "portrait_button"
								{
									portrait_texture = "[EventWindow.GetAnimatedEventPortraitTexture('right_portrait', 'camera_event_right', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
									alwaystransparent = "[Not(EventWindow.ShouldShowPortraitInfo('right_portrait'))]"
									tooltip_enabled = "[EventWindow.ShouldShowPortraitInfo('right_portrait')]"
								}

								blockoverride "highlight_visible"
								{
									visible = "[Or(Character.IsHovered, EventWindow.IsCharacterHighlighted( EventWindow.GetPortraitCharacter('right_portrait') ))]"
									position = { 70 0 }
								}

								blockoverride "grayscale" {}

								highlight_icon = {
									name = "prison_bars"
									visible = "[Character.IsImprisoned]"
									size = { 285 500 }
									parentanchor = bottom|right
									effectname = "NoHighlight"
									spriteType = corneredTiled
									texture_density = 1.5
									texture = "gfx/portraits/portrait_prison_body.dds"

									modify_texture = {
										name = "mask"
										texture =  "gfx/portraits/portrait_mask_event.dds"
										spriteType = Corneredstretched
										blend_mode = alphamultiply
									}
								}
							}
						}
					}

					### Use this for single character
					portrait_event = {
						name = "portrait_center"
						datacontext = "[EventWindow.GetPortraitCharacter('left_portrait')]"
						visible = "[And(EventWindow.HasPortraitCharacter('left_portrait'), Not(EventWindow.HasPortraitCharacter('right_portrait')))]"
						size = { 100% 112% }
						position = { -60 0 }
						parentanchor = bottom|left

						blockoverride "portrait_button"
						{
							portrait_texture = "[EventWindow.GetAnimatedEventPortraitTexture('left_portrait', 'camera_event_center', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
							alwaystransparent = "[Not(EventWindow.ShouldShowPortraitInfo('left_portrait'))]"
							tooltip_enabled = "[EventWindow.ShouldShowPortraitInfo('left_portrait')]"
							using = tooltip_below
							tooltip_offset = { 550 -580 }
						}

						blockoverride "highlight_visible"
						{
							visible = "[Or(Character.IsHovered, EventWindow.IsCharacterHighlighted( EventWindow.GetPortraitCharacter('left_portrait') ))]"
						}

						blockoverride "grayscale" {}

						highlight_icon = {
							name = "prison_bars"
							visible = "[Character.IsImprisoned]"
							size = { 300 500 }
							parentanchor = bottom|hcenter
							effectname = "NoHighlight"
							spriteType = corneredTiled
							texture_density = 1.5
							texture = "gfx/portraits/portrait_prison_body.dds"

							modify_texture = {
								name = "mask"
								texture =  "gfx/portraits/portrait_mask_event.dds"
								spriteType = Corneredstretched
								blend_mode = alphamultiply
							}
						}
					}

					margin_widget = {
						name = "bottom_characters"
						size = { 100% 170 }
						parentanchor = bottom|hcenter
						margin_bottom = 10
						allow_outside = yes

						icon = {
							name = "bottom_characters_bg"
							visible = "[Or(EventWindow.HasPortraitCharacter('lower_left_portrait'), Or(EventWindow.HasPortraitCharacter('lower_center_portrait'), EventWindow.HasPortraitCharacter('lower_right_portrait')))]"
							position = { -55 7 }
							size = { 624 100% }
							texture = "gfx/interface/window_event/event_bottom_char_bg.dds"
						}

						flowcontainer = {
							spacing = 20
							parentanchor = bottom|hcenter

							flowcontainer = {
								parentanchor = bottom
								direction = vertical
								ignoreinvisible = yes

								event_portrait_status_icons_left = {
									datacontext = "[EventWindow.GetPortraitCharacter('left_portrait')]"
									visible = "[EventWindow.ShouldShowPortraitInfo('left_portrait')]"

									background = {
										texture = "gfx/interface/window_event/event_character_status_icons_bg.dds"
										spriteType = Corneredtiled
										spriteborder = { 20 20 }
										shaderfile = "gfx/FX/pdxgui_default.shader"
										alpha = 0.5
										margin = { 5 5 }

										modify_texture = {
											texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
											spriteType = Corneredstretched
											spriteborder = { 0 0 }
											blend_mode = overlay
											alpha = 0.5
										}
									}
								}

								spacer = {
									size = { 140 0 }
								}

								widget = {
									datacontext = "[EventWindow.GetPortraitCharacter('lower_left_portrait')]"
									visible = "[EventWindow.HasPortraitCharacter('lower_left_portrait')]"
									size = { 140 150 }

									portrait_event_small = {
										name = "portrait_left_small_1"
										parentanchor = center
										position = { 0 -4 }

										blockoverride "portrait_button"
										{
											portrait_texture = "[EventWindow.GetStaticEventPortraitTexture('lower_left_portrait', 'camera_body', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
											alwaystransparent = "[Not(EventWindow.ShouldShowPortraitInfo('lower_left_portrait'))]"
											tooltip_enabled = "[EventWindow.ShouldShowPortraitInfo('lower_left_portrait')]"
										}

										blockoverride "highlight_visible"
										{
											visible = "[Or(Character.IsHovered, EventWindow.IsCharacterHighlighted( EventWindow.GetPortraitCharacter('lower_left_portrait') ))]"
										}

										blockoverride "status_icons" {}
										blockoverride "opinion_box" {}
										blockoverride "grayscale" {}

										blockoverride "coa"
										{
											event_portrait_status_icons_left = {
												visible = "[EventWindow.ShouldShowPortraitInfo('lower_right_portrait')]"
												parentanchor = bottom|left
												position = { -15 -5 }
												scale = 0.8

												background = {
													using = Background_Bottom_Fade
													margin = { 5 15 }
													using = Color_Black
													using = Mask_Rough_Edges
													alpha =  0.5

													modify_texture = {
														texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
														spriteType = Corneredstretched
														spriteborder = { 0 0 }
														blend_mode = overlay
													}
												}
											}
										}

										text_label_center = {
											parentanchor = bottom|hcenter
											position = { 20 -5 }
											alwaystransparent = yes
											text = "[Character.GetShortUINameNoTooltip]"
											max_width = 115
											align = center
											fontsize_min = 12
										}
									}
								}
							}

							flowcontainer = {
								parentanchor = bottom
								direction = vertical
								ignoreinvisible = yes

								spacer = {
									size = { 140 0 }
								}

								widget = {
									datacontext = "[EventWindow.GetPortraitCharacter('lower_center_portrait')]"
									visible = "[EventWindow.HasPortraitCharacter('lower_center_portrait')]"
									size = { 140 150 }

									portrait_event_small = {
										name = "portrait_left_small_2"
										parentanchor = center
										position = { 0 -4 }

										blockoverride "portrait_button"
										{
											portrait_texture = "[EventWindow.GetStaticEventPortraitTexture('lower_center_portrait', 'camera_body', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
											alwaystransparent = "[Not(EventWindow.ShouldShowPortraitInfo('lower_center_portrait'))]"
											tooltip_enabled = "[EventWindow.ShouldShowPortraitInfo('lower_center_portrait')]"
										}

										blockoverride "highlight_visible"
										{
											visible = "[Or(Character.IsHovered, EventWindow.IsCharacterHighlighted( EventWindow.GetPortraitCharacter('lower_center_portrait') ))]"
										}

										blockoverride "status_icons" {}
										blockoverride "opinion_box"{}
										blockoverride "grayscale" {}

										blockoverride "coa"
										{
											event_portrait_status_icons_left = {
												visible = "[EventWindow.ShouldShowPortraitInfo('lower_center_portrait')]"
												parentanchor = bottom|left
												position = { -15 -5 }
												scale = 0.8

												background = {
													using = Background_Bottom_Fade
													margin = { 5 15 }
													color = { 0.1 0.1 0.1 0.8 }

													modify_texture = {
														texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
														spriteType = Corneredstretched
														spriteborder = { 0 0 }
														blend_mode = overlay
													}
												}
											}
										}


										text_label_center = {
											parentanchor = bottom|hcenter
											position = { 20 -5 }
											alwaystransparent = yes
											text = "[Character.GetShortUINameNoTooltip]"
											max_width = 115
											align = center
											fontsize_min = 12
										}
									}
								}
							}

							flowcontainer = {
								parentanchor = bottom
								direction = vertical
								ignoreinvisible = yes

								event_portrait_status_icons_right = {
									datacontext = "[EventWindow.GetPortraitCharacter('right_portrait')]"
									visible = "[EventWindow.ShouldShowPortraitInfo('right_portrait')]"
									parentanchor = right

									background = {
										texture = "gfx/interface/window_event/event_character_status_icons_bg.dds"
										spriteType = Corneredtiled
										spriteborder = { 20 20 }
										shaderfile = "gfx/FX/pdxgui_default.shader"
										alpha = 0.5
										margin = { 5 5 }

										modify_texture = {
											texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
											spriteType = Corneredstretched
											spriteborder = { 0 0 }
											blend_mode = overlay
											alpha = 0.5
										}
									}
								}

								spacer = {
									size = { 140 0 }
								}

								widget = {
									datacontext = "[EventWindow.GetPortraitCharacter('lower_right_portrait')]"
									visible = "[EventWindow.HasPortraitCharacter('lower_right_portrait')]"
									size = { 140 150 }

									portrait_event_small = {
										name = "portrait_right_small_1"
										parentanchor = center
										position = { 0 -4 }

										blockoverride "portrait_button"
										{
											portrait_texture = "[EventWindow.GetStaticEventPortraitTexture('lower_right_portrait', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
											alwaystransparent = "[Not(EventWindow.ShouldShowPortraitInfo('lower_right_portrait'))]"
											tooltip_enabled = "[EventWindow.ShouldShowPortraitInfo('lower_right_portrait')]"
										}

										blockoverride "portrait_transformation"
										{
											portrait_scale = { -1 1 }
											portrait_offset = { 1 0 }
										}

										blockoverride "highlight_visible"
										{
											visible = "[Or(Character.IsHovered, EventWindow.IsCharacterHighlighted( EventWindow.GetPortraitCharacter('lower_right_portrait') ))]"
										}

										blockoverride "status_icons"{}
										blockoverride "opinion_box"{}
										blockoverride "grayscale" {}

										blockoverride "coa"
										{
											event_portrait_status_icons_left = {
												visible = "[EventWindow.ShouldShowPortraitInfo('lower_right_portrait')]"
												parentanchor = bottom|left
												position = { -15 -5 }
												scale = 0.8

												background = {
													using = Background_Bottom_Fade
													margin = { 5 15 }
													using = Color_Black
													using = Mask_Rough_Edges
													alpha =  0.5

													modify_texture = {
														texture = "gfx/interface/window_event/event_character_status_icons_bg_overlay.dds"
														spriteType = Corneredstretched
														spriteborder = { 0 0 }
														blend_mode = overlay
													}
												}
											}
										}

										text_label_center = {
											parentanchor = bottom|hcenter
											position = { 20 -5 }
											alwaystransparent = yes
											text = "[Character.GetShortUINameNoTooltip]"
											max_width = 115
											align = center
											fontsize_min = 12
										}
									}
								}
							}
						}
					}

				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin_left = 35
				margin_right = 35
				margin_bottom = 15

				widget = {
					name = "text"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					layoutstretchfactor_horizontal = 45

					vbox = {
						name = "description_and_options"
						alpha = 0
						layoutpolicy_horizontal = expanding

						state = {
							name = appear
							trigger_on_create = yes
							delay = 0.2
							using = Animation_Curve_Default
							alpha = 1
							duration = 1.5
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							margin_bottom = 10
							margin_top = 5

							scrollarea = {
								name = "description_scrollarea"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								minimumsize = { 410 -1 }
								maximumsize = { 410 -1 }

								scrollbarpolicy_horizontal = always_off

								scrollbar_vertical = {
									using = Scrollbar_Vertical

									blockoverride "alpha"{
										alpha = 0.6
									}
								}

								scrollwidget = {
									text_multi = {
										name = "description"
										minimumsize = { 410 -1 }
										maximumsize = { 410 -1 }
										autoresize = yes
										margin = { 20 4 }
										text = "[EventWindow.GetDescription]"
										fontsize = 16
									}
								}
							}

							expand = {}
						}

						vbox = {
							allow_outside = yes
							layoutpolicy_horizontal = expanding
							ignoreinvisible = yes
							spacing = 5
							margin_bottom = 5

							hbox = {
								spacing = 5

								hbox = {
									name = "dynamic_birth_name"
									margin = { 5 0 }
								}
							}


							vbox = {
								name = "custom_widgets_container"
								layoutpolicy_horizontal = expanding

								state = {
									trigger_on_create = yes
									name = appear_test
									delay = 0.8
									using = Animation_Curve_Default
									alpha = 1
									duration = 0.6
								}
							}

							fixedgridbox = {
								name = "option_grid"
								addcolumn = 500
								addrow = 42
								datamodel = "[EventWindow.GetOptions]"

								item = {
									button_eventoption = {}
								}
							}
						}
					}
				}

				widget = {
					name = "characters_spacer"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					layoutstretchfactor_horizontal = 55
				}
			}
		}
	}

	button = {
		name = "debug_icon"
		visible = "[InDebugMode]"
		parentanchor = top|right
		position = { -40 20 }
		size = { 40 40 }

		button = {
			size = { 100% 100% }
			tooltip = "[EventWindow.GetDebugInfo]"
			onclick = "[EventWindow.CopyToClipboard]"
			onrightclick = "[EventWindow.DebugOpen]"
			button_ignore = none
			text = "?"
			fontsize = 24
		}
	}
}

######################################################
################### LETTER EVENT #####################
######################################################
window = {
	gfxtype = windowgfx
	name = "letter_event_window"
	parentanchor = center
	layer = middle
	movable = yes
	allow_outside = yes
	size = { 675 530 }           ############ SIZES NEED TO MATCH

	state = {
		name = _show
		trigger_on_create = yes

		on_start = "[GetVariableSystem.Clear( 'event_window_mouse_leave')]"

		on_start = "[PdxGuiWidget.AccessChild('letter_paper').TriggerAnimation('show')]"
		on_start = "[PdxGuiWidget.AccessChild('letter_content').TriggerAnimation('show')]"
		on_start = "[PdxGuiWidget.AccessChild('letter_pattern').TriggerAnimation('show')]"

		start_sound = {
			soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_letter"
		}
	}

	state = {
		name = _hide
		duration = 1
		on_start = "[PdxGuiWidget.AccessChild('letter_paper').TriggerAnimation('hide')]"
		on_start = "[PdxGuiWidget.AccessChild('letter_content').TriggerAnimation('hide')]"
		on_start = "[PdxGuiWidget.AccessChild('letter_pattern').TriggerAnimation('hide')]"
	}

	state = {
		name = _mouse_hierarchy_leave
		on_start = "[GetVariableSystem.Set( 'event_window_mouse_leave', 'true' )]"
	}

	### PAPER ###
	widget = {
		name = "letter_paper"
		size = { 675 45 }
		widgetanchor = center
		parentanchor = center
		alpha = 0

		using = Background_Letter

		state = {
			name = show
			next = a
			delay = 0.3

			using = Animation_FadeIn_Standard

			animation = {
				alpha = 1
				bezier = { 0.7 0 0.7 1 }
			}
		}

		state = {
			name = a
			duration = 0.25
			bezier = { 0.3 0 0.7 1 }

			animation = {
				size = { 675 530 }           ############ SIZES NEED TO MATCH
				bezier = { 0.8 0.3 0 1 }
			}

			animation = {
				alpha = 1
				bezier = { 0.7 0 0.7 1 }
			}
		}

		state = {
			name = hide
			using = Animation_FadeOut_Quick
			size = { 585 -1 }
		}

		widget = {
			size = { 700 40 }
			widgetanchor = center
			parentanchor = top|hcenter
			position = { 0 10 }

			background = {
				texture = "gfx/interface/window_event/letter_event_edge_top.dds"
				spriteType = Corneredstretched
				spriteborder = { 35 5 }
			}
		}

		widget = {
			size = { 700 40 }
			widgetanchor = center
			parentanchor = bottom|hcenter
			position = { 0 -10 }

			background = {
				texture = "gfx/interface/window_event/letter_event_edge_bottom.dds"
				spriteType = Corneredstretched
				spriteborder = { 35 5 }
			}
		}
	}

	### CONTENT ###
	widget = {
		name = "letter_content"
		widgetanchor = center
		parentanchor = center
		size = { 675 530 }           ############ SIZES NEED TO MATCH
		alpha = 0

		state = {
			name = show
			delay = 0.8

			using = Animation_FadeIn_Standard

			animation = {
				size = { 675 530 }           ############ SIZES NEED TO MATCH

				bezier = { 0.8 0.3 0 1 }
			}

			animation = {
				alpha = 1
				bezier = { 0.7 0 0.7 1 }
			}
		}

		state = {
			name = hide
			using = Animation_FadeOut_Quick
			duration = 0.08
		}

		button = {
			name = "debug_icon"
			size = { 40 40 }
			position = { 20 400 }
			texture = "gfx/interface/icons/traits/_default.dds"
			tooltip = "[EventWindow.GetDebugInfo]"
			onclick = "[EventWindow.CopyToClipboard]"
			visible = "[InDebugMode]"
		}

		widget = {
			size = { 322 544 }
			position = { 10 15 }
			scale = 0.8
			alpha = 0.8

			background = {
				texture = "gfx/interface/window_event/letter_event_pattern_big.dds"
			}
		}

		widget = {
			parentanchor = bottom|right
			size = { 264 264 }
			position = { -10 -20 }
			scale = 0.6
			alpha = 0.8

			background = {
				texture = "gfx/interface/window_event/letter_event_pattern_small.dds"
			}
		}

		widget = {
			parentanchor = top|right
			size = { 264 264 }
			position = { -10 15 }
			scale = 0.6
			alpha = 0.8

			background = {
				texture = "gfx/interface/window_event/letter_event_pattern_small.dds"
				mirror = vertical
			}
		}

		widget = {
			parentanchor = bottom|left
			size = { 264 264 }
			position = { 10 -20 }
			scale = 0.6
			alpha = 0.8

			background = {
				texture = "gfx/interface/window_event/letter_event_pattern_small.dds"
				mirror = horizontal
			}
		}

		vbox = {
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding
			margin = { 10 25 }
			margin_right = 0
			margin_bottom = 40

			expand = {}

			hbox = {
				name = "content"
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_vertical = expanding
					minimumsize = { 180 0 }
					allow_outside = yes

					widget = {
						size = { 180 300 }
						allow_outside = yes

						portrait_body = {
							name = "portrait"
							parentanchor = center
							datacontext = "[EventWindow.GetPortraitCharacter('sender')]"

							blockoverride "portrait_button" {
								alwaystransparent = "[Not(EventWindow.ShouldShowPortraitInfo('sender'))]"
								tooltip_enabled = "[EventWindow.ShouldShowPortraitInfo('sender')]"
							}

							blockoverride "mask" {
								mask = "gfx/portraits/portrait_mask_event_letter.dds"
							}

							blockoverride "prison" {}
							blockoverride "grayscale" {}
							blockoverride "status_icons" {}
							blockoverride "opinon_box" {}
							blockoverride "coa" {}
						}
					}
				}

				### text
				vbox = {
					name = "text"
					layoutpolicy_vertical = expanding

					text_multi = {
						name = "opening"
						visible = "[EventWindow.HasOpening]"
						layoutpolicy_horizontal = expanding
						maximumsize = { 430 -1 }
						autoresize = yes
						margin_top = 10
						text = "[EventWindow.GetOpening]"
						default_format = "#light_background"
						using = Font_Type_Flavor
						using = Font_Size_Big
						format_override = { high light_background }
					}

					#### 1 option ####
					scrollarea = {
						visible = "[LessThanOrEqualTo_int32( GetDataModelSize(EventWindow.GetOptions), '(int32)1')]"
						maximumsize = { -1 280 }
						minimumsize = { 430 0 }
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						autoresizescrollarea = yes
						scrollbarpolicy_horizontal = always_off

						scrollbar_vertical = {
							using = Scrollbar_Vertical
						}

						scrollwidget = {
							text_multi = {
								name = "description"
								maximumsize = { 430 -1 }
								autoresize = yes
								margin = { 0 10 }
								margin_right = 20
								alwaystransparent = yes
								text = "[EventWindow.GetDescription]"
								default_format = "#light_background"
								using = Font_Size_Medium
								format_override = { high light_background }
							}
						}
					}

					#### 2 options ####
					scrollarea = {
						visible = "[EqualTo_int32( GetDataModelSize(EventWindow.GetOptions), '(int32)2')]"
						maximumsize = { -1 240 }
						minimumsize = { 430 0 }
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						autoresizescrollarea = yes
						scrollbarpolicy_horizontal = always_off

						scrollbar_vertical = {
							using = Scrollbar_Vertical
						}

						scrollwidget = {
							text_multi = {
								name = "description"
								maximumsize = { 430 -1 }
								autoresize = yes
								margin = { 0 10 }
								margin_right = 20
								alwaystransparent = yes
								text = "[EventWindow.GetDescription]"
								default_format = "#light_background"
								using = Font_Size_Medium
								format_override = { high light_background }
							}
						}
					}

					#### 3 options ####
					scrollarea = {
						visible = "[EqualTo_int32( GetDataModelSize(EventWindow.GetOptions), '(int32)3')]"
						maximumsize = { -1 190 }
						minimumsize = { 430 0 }
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						autoresizescrollarea = yes
						scrollbarpolicy_horizontal = always_off

						scrollbar_vertical = {
							using = Scrollbar_Vertical
						}

						scrollwidget = {
							text_multi = {
								name = "description"
								maximumsize = { 430 -1 }
								autoresize = yes
								margin = { 0 10 }
								margin_right = 20
								alwaystransparent = yes
								text = "[EventWindow.GetDescription]"
								default_format = "#light_background"
								using = Font_Size_Medium
								format_override = { high light_background }
							}
						}
					}

					#### 4 options ####
					scrollarea = {
						visible = "[GreaterThanOrEqualTo_int32( GetDataModelSize(EventWindow.GetOptions), '(int32)4')]"
						minimumsize = { 430 0 }
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						scrollbarpolicy_horizontal = always_off

						scrollbar_vertical = {
							using = Scrollbar_Vertical
						}

						scrollwidget = {
							text_multi = {
								name = "description"
								maximumsize = { 430 -1 }
								autoresize = yes
								margin = { 0 10 }
								margin_right = 20
								alwaystransparent = yes
								text = "[EventWindow.GetDescription]"
								default_format = "#light_background"
								using = Font_Size_Medium
								format_override = { high light_background }
							}
						}
					}

					hbox = {
						name = "signed_text"
						layoutpolicy_horizontal = expanding
						spacing = 10
						margin_right = 15

						expand = {}

						vbox = {
							text_single = {
								name = "signed_text"
								align = right
								layoutpolicy_horizontal = expanding

								text = "[EventWindow.GetSigned]"
								default_format = "#light_background"
								using = Font_Size_Medium
							}

							text_multi = {
								name = "signature"
								align = left
								layoutpolicy_horizontal = expanding

								text = "[EventWindow.GetSignature]"
								default_format = "#light_background"
								using = Font_Type_Flavor
								using = Font_Size_Medium
								format_override = { high light_background }
								autoresize = yes
								max_width = 350
								fontsize_min = 14
							}
						}

						widget = {
							datacontext = "[EventWindow.GetPortraitCharacter('sender')]"
							size = { 80 80 }

							icon = {
								name = "sigil_bg"
								size = { 80 80 }
								texture = "gfx/interface/window_event/sigil_bg.dds"
								alwaystransparent = yes
								parentanchor = center
							}

							icon = {
								name = "sigil"
								visible = "[And(EventWindow.ShouldShowPortraitInfo('sender'), Character.HasSealCoA)]"
								size = { 56 56 }
								gfxtype = coatofarmsgfx
								shaderfile = "gfx/FX/gui_coatofarms.shader"
								effectname = PdxGuiSeal
								alwaystransparent = yes
								datacontext = "[Character.GetSealCoA]"
								coat_of_arms_slot = "[CoatOfArms.GetSlot('(int32)88','(int32)88')]"
								coat_of_arms = "[CoatOfArms.GetTexture('(int32)88','(int32)88')]"
								coat_of_arms_mask = "gfx/interface/window_event/sigil_center.dds"
								parentanchor = center
							}

							icon = {
								name = "sigil_lowborn"
								visible = "[Not(And(EventWindow.ShouldShowPortraitInfo('sender'), Character.HasSealCoA))]"
								size = { 56 56 }
								texture = "gfx/interface/window_event/sigil_center_lowborn.dds"
								alwaystransparent = yes
								parentanchor = center
							}
						}
					}
				}
			}

			expand = {}

			### Options
			fixedgridbox = {
				name = "option_grid"
				addcolumn = 654
				addrow = 46
				datamodel = "[EventWindow.GetOptions]"

				item = {
					button_event_letter = {
						name = "event_option_button"
						parentanchor = hcenter
						size = { 592 42 }

						tooltip = "[EventOption.GetTooltip]"
						tooltip_enabled = "[Not( StringIsEmpty( EventOption.GetTooltip ) )]"

						onclick = "[EventOption.Select]"
						onmousehierarchyenter = "[EventOption.OnEnter]"
						onmousehierarchyleave = "[EventOption.OnLeave]"
						enabled = "[EventOption.IsValid]"

						tooltipwidget = {
							using = DefaultTooltipWidget
						}
						using = tooltip_es

						animation_glow_event = {
							name = "special_option"
							visible = "[And(EventOption.HasFlag('special'), Not(EventOption.HasFlag('dangerous')))]"
						}

						animation_glow_event = {
							name = "dangerous_option"
							visible = "[EventOption.HasFlag('dangerous')]"
							using = Color_Red
						}

						### BUTTON CONTENT ####
						widget = {
							size = { 102 34 }
							parentanchor = left|vcenter

							hbox = {
								hbox = {
									name = "traits_grid"
									datamodel = "[EventOption.Reasons]"

									item = {
										icon = {
											name = "trait_icon"
											datacontext = "[ReasonItem.GetTrait]"
											visible = "[ReasonItem.IsTrait]"
											size = { 34 34 }
											alwaystransparent = yes
											texture = "[Trait.GetIcon(GetPlayer)]"
											tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_TRAIT"
											using = tooltip_ws
										}
									}
								}

								icon = {
									name = "timeout_icon"
									size = { 34 34 }
									texture = "gfx/interface/icons/symbols/icon_warning.dds"
									visible = "[And( EventOption.IsTimeoutOption, And( GameHasMultiplePlayers, LessThanOrEqualTo_int32( EventWindow.GetDaysRemaining, '(int32)30' ) ) )]"
									tooltip = EVENT_WINDOW_DAYS_REMAINING
								}

								hbox = {
									name = "skill_grid"
									datamodel = "[EventOption.Reasons]"

									item = {
										icon = {
											name = "skill_icon"
											datacontext = "[ReasonItem.GetSkillItem]"
											visible = "[ReasonItem.IsSkill]"
											texture = "gfx/interface/icons/icon_skills.dds"
											size = { 34 34 }
											framesize = { 60 60 }
											alwaystransparent = yes
											frame = "[SkillItem.GetFrame]"
											tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_SKILL"
											using = tooltip_ws
										}
									}
								}
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								text = "[EventOption.GetText]"

								default_format = "#light_background"
								using = Font_Size_Medium
								align = center
								layoutpolicy_horizontal = expanding
								max_width = 420
								fontsize_min = 12
							}
						}

						widget = {
							size = { 102 34 }
							parentanchor = right|vcenter

							hbox = {
								name = "effects_grid"
								datamodel = "[EventOption.Effects]"
								layoutpolicy_horizontal = expanding

								expand = {}

								item = {
									container = {
										container = {
											alwaystransparent = yes
											visible = "[OptionEffectItem.IsTrait]"

											highlight_icon = {
												datacontext = "[OptionEffectItem.GetTrait]"
												name = "trait_icon"
												size = { 34 34 }
												texture = "[Trait.GetIcon(GetPlayer)]"
											}

											highlight_icon = {
												visible = "[OptionEffectItem.IsGain]"
												texture = "gfx/interface/icons/symbols/icon_plus_small.dds"
												name = "gain"
												size = { 20 20 }
											}

											highlight_icon = {
												visible = "[OptionEffectItem.IsLoss]"
												texture = "gfx/interface/icons/symbols/icon_minus_small.dds"
												name = "loss"
												size = { 20 20 }
											}
										}

										container = {
											alwaystransparent = yes
											visible = "[OptionEffectItem.IsStress]"

											highlight_icon = {
												visible = "[And(OptionEffectItem.IsGain,Not(OptionEffectItem.IsCritical))]"
												texture = "gfx/interface/icons/stress/icon_stress_gain.dds"
												name = "stress_gain"
												size = { 34 34 }
											}

											highlight_icon = {
												visible = "[OptionEffectItem.IsLoss]"
												texture = "gfx/interface/icons/stress/icon_stress_loss.dds"
												name = "stress_loss"
												size = { 34 34 }
											}

											highlight_icon = {
												visible = "[OptionEffectItem.IsCritical]"
												texture = "gfx/interface/icons/stress/icon_stress_gain_critical.dds"
												name = "stress_critical"
												size = { 34 34 }
											}
										}

										highlight_icon = {
											name = "death"
											visible = "[OptionEffectItem.IsDeath]"
											size = { 34 34 }
											texture = "gfx/interface/icons/icon_dead.dds"
										}

										highlight_icon = {
											name = "scheme"
											visible = "[OptionEffectItem.IsScheme]"
											size = { 34 34 }
											texture = "gfx/interface/icons/icon_scheme.dds"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types Events
{
	type event_portrait_status_icons_left = container {
		flowcontainer = {
			ignoreinvisible = yes
			direction = horizontal

			coa_realm_small_crown = {
				visible = "[Character.HasLandedTitles]"
				parentanchor = bottom
			}

			portrait_status_icons = {}
		}
	}

	type event_portrait_status_icons_right = container {
		flowcontainer = {
			ignoreinvisible = yes
			direction = horizontal

			portrait_status_icons = {}

			coa_realm_small_crown = {
				visible = "[Character.HasLandedTitles]"
			}
		}
	}

	type button_eventoption = button_event_standard
	{
		name = "event_option_button"
		size = { 500 36 }

		onclick = "[EventOption.Select]"
		onmousehierarchyenter = "[EventOption.OnEnter]"
		onmousehierarchyleave = "[EventOption.OnLeave]"
		enabled = "[EventOption.IsValid]"

		icon = {
			texture = "gfx/interface/buttons/button_event.dds"
			alpha = 1
			spriteType = Corneredtiled
			spriteborder = { 3 3 }
			framesize = { 249 78 }
			size = { 100% 100% }

			modify_texture = {
				name = "mask"
				texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
				spriteType = Corneredtiled
				spriteborder_left = 40
				spriteborder_right = 40
				blend_mode = alphamultiply
			}
		}

		# Trick to not have the option text steal tooltips from the trait/skill grid
		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			tooltip = "[EventOption.GetTooltip]"
			tooltip_enabled = "[Not( StringIsEmpty( EventOption.GetTooltip ) )]"
			using = tooltip_ws

			# Wider tooltips for the effects
			tooltipwidget = {
				using = DefaultTooltipWidget
			}
		}

		modify_texture = {
			name = "mask"
			texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
			spriteType = Corneredtiled
			spriteborder_left = 40
			spriteborder_right = 40
			blend_mode = alphamultiply
		}

		animation_glow_event = {
			name = "special_option"
			visible = "[And(EventOption.HasFlag('special'), Not(EventOption.HasFlag('dangerous')))]"
		}

		animation_glow_event = {
			name = "dangerous_option"
			visible = "[EventOption.HasFlag('dangerous')]"
			using = Color_Red
		}

		### BUTTON CONTENT ####
		hbox = {
			margin = { 5 0 }

			hbox = {

				hbox = {
					name = "traits_grid"
					datamodel = "[EventOption.Reasons]"

					item = {
						icon = {
							name = "trait_icon"
							datacontext = "[ReasonItem.GetTrait]"
							visible = "[ReasonItem.IsTrait]"
							size = { 34 34 }
							alwaystransparent = yes
							texture = "[Trait.GetIcon(GetPlayer)]"
							tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_TRAIT"
							using = tooltip_ws
						}
					}
				}

				icon = {
					visible = "[And( EventOption.IsTimeoutOption, And( GameHasMultiplePlayers, LessThanOrEqualTo_int32( EventWindow.GetDaysRemaining, '(int32)30' ) ) )]"
					name = "timeout_icon"
					size = { 34 34 }
					texture = "gfx/interface/icons/symbols/icon_warning.dds"
					tooltip = EVENT_WINDOW_DAYS_REMAINING
				}

				hbox = {
					name = "skill_grid"
					datamodel = "[EventOption.Reasons]"

					item = {
						icon = {
							name = "skill_icon"
							datacontext = "[ReasonItem.GetSkillItem]"
							visible = "[ReasonItem.IsSkill]"
							texture = "gfx/interface/icons/icon_skills.dds"
							size = { 34 34 }
							framesize = { 60 60 }
							alwaystransparent = yes
							frame = "[SkillItem.GetFrame]"
							tooltip = "EVENT_WINDOW_OPTION_AVAILABLE_SKILL"
							using = tooltip_ws
						}
					}
				}
			}

			###### SPACER ######
			hbox = {
				name = "spacer_effects"
				datamodel = "[EventOption.Effects]"

				item = {
					container = {
						container = {
							visible = "[OptionEffectItem.IsTrait]"
							alwaystransparent = yes

							spacer = {
								datacontext = "[OptionEffectItem.GetTrait]"
								size = { 34 34 }
							}
						}

						spacer = {
							visible = "[OptionEffectItem.IsStress]"
							size = { 34 34 }
						}

						spacer = {
							visible = "[OptionEffectItem.IsScheme]"
							size = { 34 34 }
						}

						spacer = {
							visible = "[OptionEffectItem.IsDeath]"
							size = { 34 34 }
						}
					}
				}
			}

			text_single = {
				layoutpolicy_horizontal = expanding
				margin = { 5 0 }
				text = "[EventOption.GetText]"
				autoresize = no
				default_format = "#high"
				align = center|nobaseline
				fontsize_min = 12
			}

			##### SPACER #####
			hbox = {
				hbox = {
					name = "spacer_trait"
					datamodel = "[EventOption.Reasons]"
					item = {
						spacer = {
							datacontext = "[ReasonItem.GetTrait]"
							visible = "[ReasonItem.IsTrait]"
							size = { 34 34 }
						}
					}
				}

				hbox = {
					name = "spacer_skill"
					datamodel = "[EventOption.Reasons]"

					item = {
						spacer = {
							datacontext = "[ReasonItem.GetSkillItem]"
							visible = "[ReasonItem.IsSkill]"
							size = { 34 34 }
						}
					}
				}

				hbox = {
					visible = "[And( EventOption.IsTimeoutOption, And( GameHasMultiplePlayers, LessThanOrEqualTo_int32( EventWindow.GetDaysRemaining, '(int32)30' ) ) )]"
					spacer = {
						size = { 34 34 }
					}
				}
			}

			hbox = {
				name = "effects_grid"
				datamodel = "[EventOption.Effects]"

				item = {
					container = {
						container = {
							visible = "[OptionEffectItem.IsTrait]"
							alwaystransparent = yes

							highlight_icon = {
								datacontext = "[OptionEffectItem.GetTrait]"
								name = "trait_icon"
								size = { 34 34 }
								texture = "[Trait.GetIcon(GetPlayer)]"
							}

							highlight_icon = {
								visible = "[OptionEffectItem.IsGain]"
								texture = "gfx/interface/icons/symbols/icon_plus_small.dds"
								name = "gain"
								size = { 20 20 }
							}

							highlight_icon = {
								visible = "[OptionEffectItem.IsLoss]"
								texture = "gfx/interface/icons/symbols/icon_minus_small.dds"
								name = "loss"
								size = { 20 20 }
							}
						}

						container = {
							visible = "[OptionEffectItem.IsStress]"
							alwaystransparent = yes

							highlight_icon = {
								visible = "[And(OptionEffectItem.IsGain,Not(OptionEffectItem.IsCritical))]"
								texture = "gfx/interface/icons/stress/icon_stress_gain.dds"
								name = "stress_gain"
								size = { 34 34 }
							}

							highlight_icon = {
								visible = "[OptionEffectItem.IsLoss]"
								texture = "gfx/interface/icons/stress/icon_stress_loss.dds"
								name = "stress_loss"
								size = { 34 34 }
							}

							highlight_icon = {
								visible = "[OptionEffectItem.IsCritical]"
								texture = "gfx/interface/icons/stress/icon_stress_gain_critical.dds"
								name = "stress_critical"
								size = { 34 34 }
							}
						}

						highlight_icon = {
							name = "death"
							visible = "[OptionEffectItem.IsDeath]"
							size = { 34 34 }
							texture = "gfx/interface/icons/icon_dead.dds"
						}

						highlight_icon = {
							name = "scheme"
							visible = "[OptionEffectItem.IsScheme]"
							size = { 34 34 }
							texture = "gfx/interface/icons/icon_scheme.dds"
						}
					}
				}
			}
		}
	}
}
