namespace = bp_faction_demand

### Tax Revolts
# Cribbed from "Peasant Faction Demand by Sean Hughes" in Vanilla faction_demands.txt

#Bloody peasants start protesting their taxes
bp_faction_demand.0001 = {
	type = letter_event
	sender = scope:peasant_leader
	opening = "BP_FACTION_DEMAND_PEASANT"
	desc = BP_FACTION_DEMAND_PEASANT_DESC

	trigger = {
		exists = scope:faction
		exists = scope:peasant_leader
		scope:peasant_leader.joined_faction = scope:faction
	}

	on_trigger_fail = {
		debug_log = "Tax Revolt Faction tried to press claim (probably) without existing peasant_leader"
		debug_log_scopes = yes
		debug_log = "Tax Revolt Faction error reporting complete"
	}

	option = {
		name = "BP_FACTION_DEMAND_TAX_REVOLT_ACCEPT"
		bp_tax_revolt_faction_demands_enforced_effect = {
			FACTION = scope:faction
			TOP_LEVEL_LIEGE = root
		}

		ai_chance = {
			base = 0
			ai_value_modifier = { ai_boldness = -4 }
			modifier = {
				add = 50
				scope:faction = { faction_power >= 100 }
			}
			modifier = {
				add = 50
				scope:faction = { faction_power >= 110 }
			}
			modifier = {
				add = 50
				scope:faction = { faction_power >= 120 }
			}
			modifier = {
				add = 50
				scope:faction = { faction_power >= 130 }
			}
			modifier = {
				add = 50
				scope:faction = { faction_power >= 140 }
			}
			modifier = {
				add = 50
				scope:faction = { faction_power >= 150 }
			}
			modifier = {
				add = -50
				scope:faction.faction_target = {
					is_at_war = no
					primary_title.tier >= tier_kingdom
				}
			}
			modifier = {
				add = -150
				scope:faction.faction_target = {
					is_at_war = no
					primary_title.tier >= tier_empire
				}
			}
		}
	}

	option = {
		name = "BP_FACTION_DEMAND_TAX_REVOLT_REFUSE"

		scope:faction = {
			faction_start_war = {}

			# This needs to run after 'faction_start_war' or the troops won't spawn correctly.
			faction_spawn_member_county_armies_effect = {
				FACTION = scope:faction
				ARMY_OWNER = scope:peasant_leader
				PEASANT_ARMY_NAME = claimant_faction_event_troops
			}
		}

		ai_chance = {
			base = 100
			ai_value_modifier = { ai_boldness = 4 }
			modifier = {
				add = 50
				scope:faction = { faction_power < 90 }
			}
			modifier = {
				add = 50
				scope:faction = { faction_power < 80 }
			}
		}
	}
}
#The peasant leader vanishes!
bp_faction_demand.0002 = {
	hidden = yes
	trigger = { is_imprisoned = no }
	immediate = { death = { death_reason = death_vanished } }
}
#Rebels reinforce on successful seige
bp_faction_demand.0003 = {
	hidden = yes

	trigger = {
		has_variable = rebel_leader_peasants
		joined_faction = var:rebel_leader_peasants
		exists = scope:war
		scope:war = { primary_defender = scope:previous_controller }
	}

	immediate = {
		# Determine how many rebel reinforcements we need to spawn, based on the total number of provinces captured.
		set_variable = {
			name = number_rebel_reinforcements
			value = {
				add = {
					every_in_list = {
						list = occupied_baronies
						add = building_levies
					}
				}
				multiply = { # Spawns between 50% and 100% of the total county's levies
					add = 0.5
					add = {
						scope:county = {
							add = development_level
							multiply = 0.005
						}
					}
				}
			}
		}

		# Spawn the army on the captured province.
		spawn_army = {
			name = event_troop_default_name
			levies = var:number_rebel_reinforcements
			location = scope:barony.title_province
			war = scope:war
		}

		# Additional loss of county control, can be up to -70 for large counties.
		every_in_list = {
			list = occupied_baronies
			scope:county = { change_county_control = -10 }
		}
		# Lose an extra -10 county control.
		scope:county = { change_county_control = -10 }
	}

	after = { remove_variable = number_rebel_reinforcements }
}