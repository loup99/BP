##### Changed from Vanilla: Expanded from Crown Authority Scope to all new governments
successful_popular_revolt_outcome_effect = {
	# Save scopes for later usage.
	$FACTION_LEADER$ = {
		joined_faction = {
			save_scope_as = popular_faction
			every_faction_member = {
				add_to_list = faction_members
			}
			faction_target = {
				save_scope_as = faction_target
			}
		}
	}

	# Compile a list of all counties belonging to the faction.
	scope:popular_faction = {
		every_faction_county_member = {
			add_to_list = siezed_counties
		}
	}
	# Additionally, if we're at war (and not just pressing demands), add all occupied counties and connected counties of the correct culture/faith.
	if = {
		limit = {
			$FACTION_LEADER$ = {
				is_at_war_with = scope:faction_target
			}
		}
		scope:faction_target = {
			every_sub_realm_county = {
				limit = {
					county_controller = $FACTION_LEADER$
				}
				add_to_list = siezed_counties
			}
		}

		every_in_list = {
			list = siezed_counties
			add_adjacent_valid_counties_to_list = {
				FAITH = $FACTION_LEADER$.faith
				TOP_LIEGE = scope:faction_target
				LIST = siezed_counties
			}
		}
	}

	# Select a 'capital' county for the faction leader, this will be removed from the siezed county list as we will handle it separately.
	scope:popular_faction = {
		ordered_faction_county_member = {
			order_by = {
				value = total_county_levies

				multiply = {
					value = 1

					# Up to 50% bonus points for counties of the correct culture/faith.
					if = {
						limit = { culture = $FACTION_LEADER$.culture }
						add = 0.25
					}
					if = {
						limit = { faith = $FACTION_LEADER$.faith }
						add = 0.25
					}

					# Additional 50% bonus points for counties located in the de jure area of the liege title we want to sieze.
					if = {
						limit = {
							target_is_de_jure_liege_or_above = $TARGET_TITLE$
						}
						add = 0.50
					}
				}
			}

			#remove_from_list = siezed_counties
			save_scope_as = capital_county
		}
	}

	# CHANGE ZERO: Give the leader a county to stop landless characters from screwing up the hierarchy.
	hidden_effect = {
		create_title_and_vassal_change = {
			type = conquest_populist
			save_scope_as = change_zero
			add_claim_on_loss = yes
		}
		scope:capital_county = {
			change_title_holder = {
				holder = $FACTION_LEADER$
				change = scope:change_zero
				take_baronies = no
			}
		}
		resolve_title_and_vassal_change = scope:change_zero
	}


	# CHANGE ONE: Give the leader an appropriately-ranked title.
	create_title_and_vassal_change = {
		type = conquest_populist
		save_scope_as = change_one
		add_claim_on_loss = yes
	}
	if = {
		# If 11+ counties were taken, give them a Kingdom.
		limit = {
			any_in_list = {
				list = siezed_counties
				count >= 11
			}
		}

		# Check if we can create or usurp a De Jure Kingdom from the map
		every_in_list = {
			list = siezed_counties
			kingdom = {
				if = {
					limit = {
						OR = {
							NOT = { exists = holder}
							trigger_if = {
								limit = { exists = holder}
								holder.top_liege = scope:faction_target 

								# Don't usurp the primary title from independent rulers if they don't have an equal-tier title to replace it with.
								trigger_if = {
									limit = {
										this = holder.primary_title
										holder = holder.top_liege
									}
									holder = {
										any_held_title = {
											tier = tier_kingdom
											count >= 2
										}
									}
								}

								# Don't usurp the primary title from vassal players if they don't have an equal-tier title to replace it with
								trigger_if = {
									limit = {
										holder = { is_ai = no }
									}
									holder = {
										any_held_title = {
											tier = tier_kingdom
											count >= 2
										}
									}
								}
							}
						}
						# Special block to stop populist factions from creating Germany if the HRE is still alive and kicking.
						NAND = {
							this = title:k_east_francia
							exists = title:e_hre.holder
						}
					}
					add_to_list = potential_kingdoms
				}
			}
		}

		# If we found one or more valid De Jure Kingdoms, pick the best one for us to take.
		if = {
			limit = {
				any_in_list = {
					list = potential_kingdoms
					count >= 1
					NAND = {
						this = title:k_east_francia
						exists = title:e_hre.holder
					}
				}
			}
			ordered_in_list = {
				list = potential_kingdoms
				limit = {
					NAND = {
						this = title:k_east_francia
						exists = title:e_hre.holder
					}
				}

				order_by = {
					value = 1
					every_in_list = {
						list = siezed_counties
						limit = { kingdom = prev }
						add = 1
					}
				}

				change_title_holder = {
					holder = $FACTION_LEADER$
					change = scope:change_one
				}
			}
		}
		# Otherwise, create a new titular Kingdom title.
		else = {
			create_popular_revolt_title_effect = {
				FACTION = scope:popular_faction
				FACTION_LEADER = $FACTION_LEADER$
				TIER = kingdom
			}
			scope:new_title = {
				change_title_holder = {
					holder = $FACTION_LEADER$
					change = scope:change_one
				}
			}
		}
	}

	else_if = {
		# If 5+ counties were taken, give them a Duchy.
		limit = {
			any_in_list = {
				list = siezed_counties
				count >= 5
			}
		}

		# Check if we can create or usurp a De Jure Duchy from the map
		every_in_list = {
			list = siezed_counties
			duchy = {
				if = {
					limit = {
						OR = {
							NOT = { exists = holder}
							trigger_if = {
								limit = { exists = holder}
								holder.top_liege = scope:faction_target

								# Don't usurp the primary title from independent rulers if they don't have an equal-tier title to replace it with.
								trigger_if = {
									limit = {
										this = holder.primary_title
										holder = holder.top_liege
									}
									holder = {
										any_held_title = {
											tier = tier_duchy
											count >= 2
										}
									}
								}

								# Don't usurp the primary title from vassal players if they don't have an equal-tier title to replace it with
								trigger_if = {
									limit = {
										holder = { is_ai = no }
									}
									holder = {
										any_held_title = {
											tier = tier_duchy
											count >= 2
										}
									}
								}
							}
						}
					}
					add_to_list = potential_duchies
				}
			}
		}

		# If we found one or more valid De Jure Duchies, pick the best one for us to take.
		if = {
			limit = {
				any_in_list = {
					list = potential_duchies
					count >= 1
				}
			}
			ordered_in_list = {
				list = potential_duchies

				order_by = {
					value = 1
					every_in_list = {
						list = siezed_counties
						limit = { duchy = prev }
						add = 1
					}
				}

				change_title_holder = {
					holder = $FACTION_LEADER$
					change = scope:change_one
				}
			}
		}
		# Otherwise, create a new titular Duchy title.
		else = {
			create_popular_revolt_title_effect = {
				FACTION = scope:popular_faction
				FACTION_LEADER = $FACTION_LEADER$
				TIER = duchy
			}
			scope:new_title = {
				change_title_holder = {
					holder = $FACTION_LEADER$
					change = scope:change_one
				}
			}
		}
	}

	# If 4 or fewer counties were taken, leader only gets the county titles themselves.
	resolve_title_and_vassal_change = scope:change_one

	# If the title we gave our leader is a new dynamic title, generate a CoA for it.
	if = {
		limit = {
			exists = scope:new_title
		}
		scope:new_title = {
			set_capital_county = scope:capital_county
			generate_coa = yes
		}
	}

	# CHANGE TWO: Transfer the siezed counties to the leader.
	create_title_and_vassal_change = {
		type = conquest_populist
		save_scope_as = change_two
		add_claim_on_loss = yes
	}
	every_in_list = {
		list = siezed_counties

		change_title_holder = {
			holder = $FACTION_LEADER$
			change = scope:change_two
			take_baronies = no
		}
	}
	resolve_title_and_vassal_change = scope:change_two

	# CHANGE THREE: Split the leader off into an independent realm. Then convert all faction members to vassals of the populist leader.
	create_title_and_vassal_change = {
		type = conquest_populist
		save_scope_as = change_three
		add_claim_on_loss = yes
	}
	every_in_list = {
		list = faction_members

		# Lower-ranked vassals switch lieges to the faction leader.
		if = {
			limit = {
				this.primary_title.tier < $FACTION_LEADER$.primary_title.tier
				this.primary_title.tier >= tier_county
				NOT = { this = $FACTION_LEADER$ }
			}
			change_liege = {
				liege = $FACTION_LEADER$
				change = scope:change_three
			}
		} # give them independence
		else = {
			create_title_and_vassal_change = {
				type = independency
				save_scope_as = local_change
			}
			change_liege_or_become_independent = {
				CHANGE = scope:local_change
				VASSAL = this
			}
			resolve_title_and_vassal_change = scope:change
		}
	}

	resolve_title_and_vassal_change = scope:change_three

	# Sub-change: if any counties have been offended by HumSac'ing, since they're revolting, and tempers have hit fever pitch, remove their county opinion malus.
	$FACTION_LEADER$ = { fp1_remove_humsac_offended_counties_effect = yes }

	# CHANGE FOUR: If there are any disconnected counties, split them off via exclave independence rules.
	scope:capital_county = {
		split_noncontiguous_counties_from_revolt_effect = {
			FACTION_LEADER = $FACTION_LEADER$
		}
	}

	# If the faction still exists, dissolve it (it's no longer relevant).
	hidden_effect = {
		if = {
			limit = {
				exists = scope:popular_faction
			}
			scope:popular_faction = {
				destroy_faction = yes
			}
		}
	}

	##### Changed from Vanilla vvvvv

	#Set up government type.
	hidden_effect = {
		$FACTION_LEADER$ = {
			#If sourced from tribal, make tribal.
			if = {
				limit = { $SOURCE_GOVERNMENT$ = { has_government = tribal_government } }
				change_government = tribal_government
			}
			#If sourced from clan, make clan.
			else_if = {
				limit = { $SOURCE_GOVERNMENT$ = { has_government = clan_government } }
				change_government = clan_government
			}
			#If sourced from feudal, make feudal.
			else_if = {
				limit = { $SOURCE_GOVERNMENT$ = { has_government = feudal_government } }
				change_government = feudal_government
			}
			#If sourced from prefeudal, make prefeudal.
			else_if = {
				limit = { $SOURCE_GOVERNMENT$ = { has_government = prefeudal_government } }
				change_government = prefeudal_government
			}
			#If sourced from gupta, make gupta
			else_if = {
				limit = { $SOURCE_GOVERNMENT$ = { has_government = gupta_government } }
				change_government = gupta_government
			}
			#If sourced from nomad, make nomad
			else_if = {
				limit = { $SOURCE_GOVERNMENT$ = { has_government = nomad_government } }
				change_government = nomad_government
			}
			#More Complicated Cases
			
			#If sourced from eranshar, make eranshar iff zoroastrian
			else_if = {
				limit = { $SOURCE_GOVERNMENT$ = { has_government = eranshar_government } }
				if = {
					limit = { $FACTION_LEADER$ = { has_religion = religion:zoroastrianism_religion } }
					change_government = eranshar_government
				}
				else = { change_government = feudal_government } ##### TODO (Beta): Change feudal fallback condition
			}
			#If sourced from bureaucratic types, make subroman
			else_if = {
				limit = { $SOURCE_GOVERNMENT$ = { has_bureaucratic_or_gubernatorial_government_trigger =yes } }
				change_government = subroman_government
				inherit_correct_subroman_taxation_law_effect = {
					TITLE_BEQUEATHER = $TARGET_TITLE$.holder
					TARGET = this
				}
			}
			#If sourced from subroman, make subroman
			else_if = {
				limit = { $SOURCE_GOVERNMENT$ = { has_government = subroman_government } }
				change_government = subroman_government
			}
			
			# Fail-safes
			
			#If sourced elsewhere, and Islamic, make clan.
			else_if = {
				limit = {
					$SOURCE_GOVERNMENT$ = {
						NOR = {
							has_government = tribal_government
							has_government = clan_government
							has_government = feudal_government
						}
					}
					has_religion = religion:islam_religion
				}
				change_government = clan_government
			}
			#If sourced elsewhere, and not Islamic, make feudal.
			else_if = {
				limit = {
					$SOURCE_GOVERNMENT$ = {
						NOR = {
							has_government = tribal_government
							has_government = clan_government
							has_government = feudal_government
						}
					}
					NOT = { has_religion = religion:islam_religion }
				}
				change_government = feudal_government
			}
		}
	}
	##### Changed from Vanilla ^^^^^
}