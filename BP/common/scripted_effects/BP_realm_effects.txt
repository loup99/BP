#Applies both bureaucratic and gubernatorial taxation based on grantor realm law
apply_taxation_law = {
	if = {
		limit = { scope:previous_holder = { has_realm_law = $GOVERNMENT$_taxation_0 } }
		add_realm_law_skip_effects = gubernatorial_taxation_0
	}
	else_if = {
		limit = { scope:previous_holder = { has_realm_law = $GOVERNMENT$_taxation_1 } }
		add_realm_law_skip_effects = gubernatorial_taxation_1
	}
	else_if = {
		limit = { scope:previous_holder = { has_realm_law = $GOVERNMENT$_taxation_2 } }
		add_realm_law_skip_effects = gubernatorial_taxation_2
	}
	else_if = {
		limit = { scope:previous_holder = { has_realm_law = $GOVERNMENT$_taxation_3 } }
		add_realm_law_skip_effects = gubernatorial_taxation_3
	}
	else_if = {
		limit = { scope:previous_holder = { has_realm_law = $GOVERNMENT$_taxation_4 } }
		add_realm_law_skip_effects = gubernatorial_taxation_4
	}
}
change_government_to_gubernatorial = {
	#In the case of bureaucratic_government, there's no vassal contracts, so we 
	#need an intermediate switch to support the bureaucratic_vassal_governance
	#contract
	change_government = gubernatorial_government
	vassal_contract_set_obligation_level = {
		type = bureaucratic_vassal_governance
		level = 1
	}
	change_government = gubernatorial_government
	add_character_flag = gubernatorial_ruler
	
	#Inherit appropriate taxation information
	if = {
		limit = { scope:previous_holder = { has_government = bureaucratic_government } }
		apply_taxation_law = { GOVERNMENT = bureaucratic }
	}
	else_if = {
		limit = { scope:previous_holder = { has_government = gubernatorial_government } }
		apply_taxation_law = { GOVERNMENT = gubernatorial }
	}
	else = { debug_log = "INVALID_GUBERNATORIAL_LIEGE" }
	
	#Apply appropriate title succession laws
	if = {
		limit = { $TITLE$.tier >= tier_duchy }
		add_title_law = gubernatorial_elective_succession_law
	}
}
#E.g., independency or invalid liege govt
revert_gubernatorial_government = {
	vassal_contract_set_obligation_level = {
		type = bureaucratic_vassal_governance
		level = 0
	}
	change_government = subroman_government
	remove_character_flag = gubernatorial_ruler
}
fix_invalid_gubernatorial_state = {
	change_government = subroman_government
	remove_character_flag = gubernatorial_ruler
}
#Decrease realm law
decrease_realm_law = {
	#Crown Authority Cases
	if = {
		limit = { has_realm_law = crown_authority_1 }
		add_realm_law = crown_authority_0
	}
	if = {
		limit = { has_realm_law = crown_authority_2 }
		add_realm_law = crown_authority_1
	}
	if = {
		limit = { has_realm_law = crown_authority_3 }
		add_realm_law = crown_authority_2
	}
	#Prefeudal Cases
	if = {
		limit = { has_realm_law = prefeudal_authority_1 }
		add_realm_law = prefeudal_authority_0
	}
	if = {
		limit = { has_realm_law = prefeudal_authority_2 }
		add_realm_law = prefeudal_authority_1
	}
	if = {
		limit = { has_realm_law = prefeudal_authority_3 }
		add_realm_law = prefeudal_authority_2
	}
	#High Tribal Organization Cases
	if = {
		limit = { has_realm_law = high_tribal_organization_1 }
		add_realm_law = high_tribal_organization_0
	}
	if = {
		limit = { has_realm_law = high_tribal_organization_2 }
		add_realm_law = high_tribal_organization_1
	}
	if = {
		limit = { has_realm_law = high_tribal_organization_3 }
		add_realm_law = high_tribal_organization_2
	}
	#For countries with subroman organization
	if = {
		limit = { has_realm_law = subroman_decay_1 }
		add_realm_law = subroman_decay_1
	}
	if = {
		limit = { has_realm_law = subroman_decay_2 }
		add_realm_law = subroman_decay_0
	}
	if = {
		limit = { has_realm_law = subroman_decay_3 }
		add_realm_law = subroman_decay_2
	}
	if = {
		limit = { has_realm_law = subroman_decay_4 }
		add_realm_law = subroman_decay_3
	}
}
