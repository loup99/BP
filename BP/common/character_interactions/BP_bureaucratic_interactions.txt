##### Changed from Vanilla: Generalized Title Revocation Trigger
bureaucratic_revoke_title_interaction = {
	category = interaction_category_vassal
	common_interaction = yes
	highlighted_reason = HIGHLIGHTED_HAS_REVOKE_TITLE_REASON
	notification_text = REVOKE_TITLE_BUREAUCRATIC_PROPOSAL

	desc = revoke_title_interaction_desc

	target_type = title
	target_filter = recipient_domain_titles
	ai_maybe = yes
	can_send_despite_rejection = yes
	popup_on_receive = yes
	pause_on_receive = yes

	interface_priority = 60
	ai_min_reply_days = 4
	ai_max_reply_days = 9

	on_decline_summary = general_rebellion_decline_summary

	# actor character giving the titles
	# recipient character receiving the titles

	is_shown = {
		scope:recipient = {
			is_landed = yes
			# should be shown but be disabled for indirect vassals
			target_is_liege_or_above = scope:actor
			# is_vassal_of = scope:actor
		}
		trigger_if = {
			limit = {
				scope:actor = { is_ai = yes }
				# No point revoking barons at this time
				scope:recipient.primary_title.tier >= tier_county
			}
		}
		#Bureaucratic/Gubernatorials use their own title revocation interactions
		scope:recipient = {
			OR = {
				has_government = bureaucratic_government
				has_government = gubernatorial_government
			}
		}
	}
	
	is_valid_showing_failures_only = {
		scope:actor = {
			NOR =  {
				is_at_war_with = scope:recipient
				has_truce = scope:recipient
			}
			custom_description = {
				text = "character_interactions_revoke_title_from_ally_without_reason"
				object = scope:recipient
				OR = {
					NOT = { is_allied_to = scope:recipient }
					has_revoke_title_reason = scope:recipient
				}
			}
			trigger_if = {
				limit = { scope:recipient = { vassal_contract_has_flag = vassal_contract_cannot_revoke_titles } }
				custom_description = {
					text = vassal_contract_forbids_revocation
					scope:recipient = {
						NOT = { vassal_contract_has_flag = vassal_contract_cannot_revoke_titles }
					}
				}
			}
		}
		scope:recipient = {
			AND = {
				is_vassal_or_below_of = scope:actor
				primary_title.tier != tier_barony
			}
			is_diplomatically_available = yes
			NOT = { has_strong_hook = scope:actor }
		}
	}
	
	can_send = {
		scope:actor = {
			custom_description = {
				text = "character_interactions_hostile_actions_disabled_delay"
				NOT = { has_character_flag = flag_hostile_actions_disabled_delay }
			}
		}
	}
	
	# Highlighted in the interaction menu when right-clicking a character
	is_highlighted = {
		OR = {
			scope:actor = { has_revoke_title_reason = scope:recipient }
			scope:recipient = {
			 	any_held_title = { scope:actor = { has_claim_on = prev } }
				NOT = { any_ally = { this = scope:actor } }
			}
		}
	}
	
	can_be_picked_title = {
		scope:target = {
			#Unrevokable titles
			custom_description = {
				text = unrevokable_title
				NOT = { has_variable = unrevokable } #The title itself
				NOT = { #The last county of an unrevokable title
					this.holder = { any_held_title = { has_variable = unrevokable } }
					this = this.holder.capital_province.county
				}
			}
			is_contested = no
			NOT = {
				recent_history = {
					type = granted
					years = 1
				}
			}
			custom_description = {
				text = "character_interactions_not_rel_head_title"
				is_head_of_faith = no
			}
		}
	}
	
	#Use hook
	send_option = {
		is_valid = { scope:actor = { has_usable_hook = scope:recipient } }
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = { scope:actor = { has_usable_hook = scope:recipient } }
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	
	send_options_exclusive = no
	
	on_send = {
		scope:actor = {
			add_character_flag = {
				flag = flag_hostile_actions_disabled_delay
				days = 10
			}
		}
	}
	
	on_auto_accept = { scope:recipient = { trigger_event = BP_char_interaction.0200 } }
	
	on_accept = {
		BP_revoke_title_bureaucratic_interaction_effect = yes

		scope:actor = { trigger_event = BP_char_interaction.0199 }

		if = {
			limit = { scope:actor = { has_character_flag = flag_hostile_actions_disabled_delay } }
			scope:actor = { remove_character_flag = flag_hostile_actions_disabled_delay }
		}

		# For revoking titles of character's imprisoned abroad who have lost a revocation war
		hidden_effect = {
			scope:actor = {
				if = {
					limit = {
						has_opinion_modifier = {
							target = scope:recipient
							modifier = foreign_prison_revocation_opinion
						}
					}
					remove_opinion = {
						target = scope:recipient
						modifier = foreign_prison_revocation_opinion
					}
				}
			}
		}
		
		#And... actually revoke the singular title
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = no
		}
		scope:target = {
			change_title_holder = {
				holder = scope:actor
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change
	}
	
	on_decline = {
		if = {
			limit = { scope:target.tier != tier_barony }
			scope:actor = {
				bp_revocation_tyranny_bureaucratic_effect = yes
				bp_title_revocation_stress_bureaucratic_effect = yes
			}
		}
		bp_war_for_revoke_effect = yes
		scope:recipient = {
			add_opinion = {
				target = scope:actor
				modifier = revoked_title
			}
		}
		if = {
			limit = {
				scope:actor = { refusal_is_treason_trigger = yes }
			}
			scope:actor = {
				add_opinion = {
					target = scope:recipient
					modifier = treasonous_revoke_refusal
				}
			}
		}
		if = {
			limit = { scope:actor = { has_character_flag = flag_hostile_actions_disabled_delay } }
			scope:actor = { remove_character_flag = flag_hostile_actions_disabled_delay }
		}
	}
	
	auto_accept = {
		scope:recipient = {
			calc_true_if = {
				amount >= 1
				custom_description = {
					text = "baron_revocation"
					highest_held_title_tier = tier_barony
				}
				custom_description = {
					text = "prisoner_revocation"
					is_imprisoned_by = scope:actor
				}
				custom_description = {
					text = "spending_hook"
					subject = scope:actor
					object = scope:recipient
					scope:hook = yes
					scope:actor = { has_strong_hook = scope:recipient }
				}
				custom_description = {
					text = "foreign_prison_revocation"
					subject = scope:actor
					object = scope:recipient
					scope:recipient = {
						is_imprisoned = yes
						NOT = { is_imprisoned_by = scope:actor }
					}
					scope:actor = {
						has_opinion_modifier = {
							target = scope:recipient
							modifier = foreign_prison_revocation_opinion
						}
					}
				}
			}
		}
	}
	
	ai_accept = {
		base = 0 # Try to make it 0 for most interactions

		modifier = {
			scope:hook = yes
			add = 40
			desc = SCHEME_WEAK_HOOK_USED
		}

		opinion_modifier = { # Opinion Factor
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.8
			desc = AI_OPINION_REASON
		}
		
		modifier = {
			add = 20
			scope:actor = { refusal_is_treason_trigger = yes }
			desc = AI_REFUSAL_IS_TREASON
		}
		modifier = {
			exists = scope:actor.primary_title.title_capital_county
			OR = {
				scope:target = scope:actor.primary_title.title_capital_county
				scope:target = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			add = 50
			desc = AI_TITLE_IS_REALM_CAPITAL_BUREAUCRATIC
		}
		modifier = {
			add = 30
			scope:actor = { has_claim_on = scope:target }
			desc = AI_LIEGE_HAS_CLAIM_ON_TITLE
		}
		
		ai_value_modifier = {
			who = scope:recipient
			ai_greed = {
				if = {
					limit = { scope:recipient = { NOT = { ai_greed = 0 } } }
					value = -0.75
				}
			}
			ai_honor  = {
				if = {
					limit = {
						 #If AI is honorable and the law compels to obey the liege, AI will be more likely to obey.
						scope:recipient = { ai_honor > 0 }
						scope:actor = { refusal_is_treason_trigger = yes }
					}
					value = 0.5
				}
			}
		}
		modifier = { #I am a King!
			desc = offer_vassalization_interaction_aibehavior_amkingtier_tt
			trigger = { scope:recipient = { highest_held_title_tier = tier_kingdom } }
			add = -20
		}
		modifier = { #Title is part of vassal's primary title de-jure.
			add = -25
			OR = {
				scope:recipient.primary_title = { is_de_jure_liege_or_above_target = scope:target }
				scope:recipient.primary_title = scope:target
			}
			desc = AI_REFUSAL_IS_DE_JURE_UNDER_BUREAUCRATIC
		}
		modifier = {
			add = intimidated_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_halved_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		modifier = { #Comparative military strength.
			desc = offer_vassalization_interaction_aibehavior_power_tt
			add = {
				value = 1
					subtract = {
					value = scope:recipient.max_military_strength
					divide = { value = scope:actor.max_military_strength min = 1 }
					}
				multiply = 50
				max = 20
			}
		}
		modifier = { # Legalistic tradition
			desc = tradition_legalistic_name
			scope:actor = {
				has_revoke_title_reason = scope:recipient
				culture = { has_cultural_parameter = vassals_more_likely_accept_punishments }
			}
			add = legalistic_vassal_punishment_acceptance
		}
	}
	
	# AI
	ai_targets = { ai_recipients = vassals }
	
	ai_frequency = 12

	ai_potential = {
		refusal_is_treason_trigger = yes
		primary_title.tier > tier_county
	}

	ai_will_do = {
		base = -1000

		# We want to avoid tyranny unless we've got a good reason
		# And even if we can avoid tyranny we don't want to revoke just because we can, so this only gets us to -10
		# Certain characters will revoke despite tyranny, if their rationality is sufficiently low
		modifier = {
			scope:actor = {
				OR = {
					NOT = { bp_title_revocation_is_tyrannical_bureaucratic_trigger = yes }
					AND = {
						ai_rationality <= very_high_negative_ai_value
						OR = {
							has_trait = lunatic
							has_trait = possessed
							has_trait = arbitrary
						}
					}
				}
			}

			add = 990
		}
		# Always revoke preferred capital and capital duchy
		modifier = {
			exists = scope:actor.primary_title.title_capital_county
			OR = {
				scope:target = scope:actor.primary_title.title_capital_county
				scope:target = scope:actor.primary_title.title_capital_county.de_jure_liege
			}
			# Don't revoke player titles tyranically, it must be possible to play and succeed as Ulm!
			NAND = {
				scope:target.holder = { is_ai = no }
				scope:actor = { bp_title_revocation_is_tyrannical_bureaucratic_trigger = yes }
			}
			add = 1000
		}
		# Revoke county we're dejure liege of if below domain limit
		modifier = {
			scope:actor.domain_size < scope:actor.domain_limit
			scope:target.tier = tier_county
			scope:target.de_jure_liege.holder = scope:actor
			add = 500
		}
		# Revoke from vassals of the wrong faith if you can do it without tyranny
		modifier = {
			NOT = { scope:actor.faith = scope:recipient.faith }
			OR = {
				NOT = { scope:actor.faith.religion = scope:recipient.faith.religion }
				scope:actor.ai_zeal >= low_negative_ai_value
				NOT = { scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic } }
			}
			OR = { # Chill a bit until you've dealt with the ones already in your prison
				scope:recipient = {
					is_imprisoned_by = scope:actor
				}
				NOT = {
					any_vassal = {
						NOT = { faith = scope:actor.faith }
						primary_title.tier > tier_barony
						is_imprisoned_by = scope:actor
						time_in_prison < { years = 1 }
					}
				}
			}
			add = 100
		}
		# Revoke from characters you dislike if you can do it without tyranny
		modifier = {
			scope:actor = {
				OR = {
					has_relation_rival = scope:recipient
					has_relation_nemesis = scope:recipient
				}
			}
			add = 100
		}
		# Slight preference for higher-tier titles
		modifier = { add = scope:target.tier }
		# Do not revoke titles from certain characters
		modifier = {
			scope:actor = {
				OR = {
					has_relation_friend = scope:recipient
					has_relation_best_friend = scope:recipient
					has_relation_lover = scope:recipient
					has_relation_soulmate = scope:recipient
					is_heir_of = scope:recipient
				}
			}
			add = -2000
		}
		# Do not revoke titles when the chance of success if exceedingly low
		modifier = {
			NOT = { scope:recipient = { is_imprisoned_by = scope:actor } }
			scope:actor = {
				OR = {
					gold < minimum_ai_gold_value_for_tyranny_wars
					AND = {
						scope:actor.max_military_strength < scope:recipient.max_military_strength
						gold < comfortable_ai_gold_value_for_tyranny_wars
					}
				}
			}
			add = -2000
		}
		
		modifier = { # The AI will only use a Hook if they couldn't otherwise do this
			scope:hook = yes
			add = -1
		}

		modifier = { # The AI shouldn't ruin the player's fun
			add = -2000
			scope:recipient = { has_character_flag = is_party_baron }
		}

		modifier = { # Avoid triggering Tyranny wars mid-war
			factor = 0
			scope:actor = { is_at_war = yes }
			scope:recipient = { NOT = { is_imprisoned_by = scope:actor } }
		}
	}
}