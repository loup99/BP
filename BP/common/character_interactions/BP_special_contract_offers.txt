# Add general actions here, if any.

offer_foederatus_interaction = {
	category = interaction_category_vassal
	special_interaction = grant_titles_interaction
	interface = grant_titles
	target_type = title
	target_filter = actor_domain_titles
	interface_priority = 60

	desc = offer_foederatus_interaction_desc
	
	ai_targets = { ai_recipients = neighboring_rulers }
	ai_target_quick_trigger = { adult = yes }
	ai_frequency = 48

	is_shown = {
		scope:actor = {
			is_independent_ruler = yes
			culture = { has_innovation = innovation_foederati }
		}
		scope:recipient = {
			NOT = { this = scope:actor }
			is_landed = yes
			is_independent_ruler = yes
			highest_held_title_tier < scope:actor.highest_held_title_tier
			NOT = { government_has_flag = can_not_be_vassal_or_liege }
			valid_government_foederatus_special_trigger = yes
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			is_at_war = no
			NOT = { has_character_flag = recently_offered_foederatus }
		}
		scope:recipient = {
			is_at_war = no

			custom_description = {
				text = was_recently_granted_independence
				NOT = {
					has_opinion_modifier = {
						modifier = granted_independence_opinion
						target = scope:actor
					}
				}
			}
		}
	}

	can_be_picked_title = {
		scope:target = {
			is_leased_out = no
			#Cannot hand out: Your primary title, anything up the chain from your capital
			custom_description = {
				text = "is_a_county"
				this.tier = tier_county
			}
			custom_description = {
				text = "is_primary_title"
				NOT = { this = scope:actor.primary_title }
			}
			custom_description = {
				text = "is_capital_county"
				NOT = { this = scope:actor.capital_county }
			}
			#Cannot hand out anything the same tier (or greater!) than the target's primary tier
			custom_description = {
				text = "is_greater_than_primary_tier"
				subject = scope:recipient
				NOT = { this.tier >= scope:recipient.primary_title.tier }
			}
			trigger_if = {
				limit = { this.tier <= tier_duchy }
				custom_description = {
					text = "is_in_capital_duchy"
					NOT = { this.duchy = scope:actor.capital_county.duchy }
				}
			}
		}
	}

	greeting = positive
	notification_text = OFFER_VASSALIZATION_INTERACTION_NOTIFICATION

	ai_min_reply_days = 5
	ai_max_reply_days = 10

	#can_send_despite_rejection = yes

	ai_accept = {
		base = -45 #Same as offering vassalization
		
		#PERKS
		modifier = { # Perk boost
			desc = offer_vassalization_true_ruler_perk_tt
			trigger = { scope:actor = { has_perk = true_ruler_perk } }
			add = true_ruler_value
		}
		
		#OPINIONS
		modifier = { #We just fought against each other.
			desc = offer_vassalization_interaction_aibehavior_recent_war_tt
			trigger = {
				scope:recipient = {
					any_truce_holder = {
						this = scope:actor
					}
				}
			}
			add = -40
		}
		modifier = { #I fought an independence war against you.
			desc = offer_vassalization_interaction_aibehavior_independence_war_tt
			trigger = {
				scope:recipient = {
					exists = var:independence_war_former_liege
					var:independence_war_former_liege = scope:actor
				}
			}
			add = -100
		}
		modifier = { #Friend modifier.
			desc = offer_vassalization_interaction_aibehavior_friend_tt
			trigger = {
				scope:recipient = {
					has_relation_friend = scope:actor
					NOT = { has_relation_best_friend = scope:actor }
				}
			}
			add = 10
		}
		modifier = { #Best Friend modifier.
			desc = offer_vassalization_interaction_aibehavior_best_friend_tt
			trigger = {
				scope:recipient = {
					has_relation_best_friend = scope:actor
				}
			}
			add = 20
		}
		modifier = { #Rivalry modifier.
			desc = offer_vassalization_interaction_aibehavior_rival_tt
			trigger = {
				scope:recipient = {
					has_relation_rival = scope:actor
					NOT = { has_relation_nemesis = scope:actor }
				}
			}
			add = -10
		}
		modifier = { #Nemesis modifier.
			desc = offer_vassalization_interaction_aibehavior_nemesis_tt
			trigger = {
				scope:recipient = {
					has_relation_nemesis = scope:actor
				}
			}
			add = -1000
		}
		
		# OPINION INFLUENCE
		modifier = {
			add = intimidated_external_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = cowed_external_reason_value
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		opinion_modifier = { #Compare Opinion modifier.
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.35
		}
		
		#Size of the offer
		modifier = {
			desc = development_weighted_size_of_offering
			add = {
				value = 0
				every_in_list = {
					list = target_titles
					limit = { tier = tier_county }
					add = 5 #New land should be more developed than the old
					add = this.foederatus_scaled_development_level_new_land
				}
			}
		}
		#Size of current holdings
		modifier = {
			desc = development_weighted_size_of_domain
			add = {
				value = 0
				every_held_title = {
					limit = { tier = tier_county }
					subtract = 10 #There's no place like home
					subtract = this.foederatus_scaled_development_level_old_land
				}
			}
		}
		#Kings demand more land, befitting their status
		modifier = {
			desc = king_land_demand
			trigger = { scope:recipient.primary_title.tier = tier_kingdom }
			add = -30
		}
	}

	on_accept = {
		#Apply actor effects
		#Setup Title Changes
		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = swear_fealty_to_new_liege
		}
		create_title_and_vassal_change = {
			type = granted
			save_scope_as = grant_old_titles_to_new_chars
			add_claim_on_loss = no
		}
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = grant_new_counties_to_recipient
			add_claim_on_loss = no
		}
		create_title_and_vassal_change = {
			type = independency
			save_scope_as = liberate_old_counties_with_new_chars
			add_claim_on_loss = no
		}
		#Make a New Vassal
		scope:recipient = {
			change_liege = {
				liege = scope:actor
				change = scope:swear_fealty_to_new_liege
			}
			#Mark former counties for release
			every_held_title = {
				limit = { tier = tier_county }
				add_to_temporary_list = former_counties
			}
		}
		every_in_list = {
			list = former_counties
			create_character = {
				location = scope:recipient.location
				culture = this.culture
				faith = this.faith
				gender_female_chance = { #TODO: Make more-religion/culture dynamic
					if = {
						limit = { scope:recipient = { is_male = yes } }
						value = 0
					}
					else = { value = 100 }
				}
				save_scope_as = new_char
			}
			change_title_holder = {
				holder = scope:new_char
				change = scope:grant_old_titles_to_new_chars
				take_baronies = yes
			}
			scope:new_char = { becomes_independent = { change = scope:liberate_old_counties_with_new_chars } }
		}
		#Mark the selected titles for transfer
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = this_title
			if = {
				limit = { exists = scope:landed_title }
				scope:recipient = {
					if = {
						limit = { scope:this_title.tier = tier_county }
						scope:this_title = {
							add_to_temporary_list = titles_to_grant
							change_title_holder = {
								holder = scope:recipient
								change = scope:grant_new_counties_to_recipient
							}
						}
					}
				}
			}
		}
		resolve_title_and_vassal_change = scope:swear_fealty_to_new_liege
		resolve_title_and_vassal_change = scope:grant_new_counties_to_recipient
		resolve_title_and_vassal_change = scope:grant_old_titles_to_new_chars
		resolve_title_and_vassal_change = scope:liberate_old_counties_with_new_chars
		scope:recipient = {
			hidden_effect = {
				if = {
					limit = { is_independent_ruler = no }
					vassal_contract_set_obligation_level = { type = foederatus_special_contract level = 1 }
				}
			}
		}
		
		#Create Titular title if primary isn't titular
		#Avoids the edge case of migrating a landed title getting usurped almost immediately after migration
		#and counties that have been handed out become independent
		create_titular_title_if_needed = { ATTACKER = scope:recipient }
		scope:actor = {
			add_character_flag = {
				flag = recently_offered_foederatus
				years = 10
			}
			trigger_event = BP_char_interaction.0001
		}
	}

	on_decline = {
		scope:actor = {
			add_character_flag = {
				flag = recently_offered_foederatus
				years = 10
			}
			trigger_event = BP_char_interaction.0002
		}
	}
	
	ai_potential = {
		is_adult = yes
		is_independent_ruler = yes
		highest_held_title_tier > tier_county
	}

	ai_will_do = {
		base = 100
		modifier = { # If the recipient is a player, do not bother sending
			factor = 0
			scope:recipient = { is_ai = no }
		}
	}
}
