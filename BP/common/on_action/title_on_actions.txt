#On actions about titles

# All on-actions in this file provide scope:transfer_type unless otherwise noted
# scope:transfer_type has the following permutations:
# flag:conquest
# flag:conquest_holy_war
# flag:conquest_claim
# flag:conquest_populist
# flag:inheritance
# flag:abdication
# flag:destroyed
# flag:created
# flag:usurped
# flag:granted
# flag:revoked
# flag:election
# flag:independency
# flag:returned
# flag:leased_out
# flag:lease_revoked
# flag:faction_demand
# flag:swear_fealty

# A title is destroyed
# root = the holder before destruction
# scope:landed_title = the title that is being destroyed
# Does *not* provide scope:transfer_type
on_title_destroyed = {
	events = {
		british_isles.1031	# Danelaw-England partition calc.
	}
}


# A title is transferred to a new character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain = {
	effect = {
		##### Start Vanilla Section vvvvv
		scope:title = { update_dynamic_coa = yes }
		
		if = {
			limit = {
				scope:title = { is_holy_order = yes }
				NOT = { has_trait = order_member }
				has_government = holy_order_government
			}
			add_trait = order_member
		}

		#Did I receive a title from my sibling?
		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = {
					is_alive = yes
					exists = var:sibling_waiting_for_land
					any_sibling = {
						this = root
						this = scope:previous_holder.var:sibling_waiting_for_land
					}
				}
			}
			add_character_flag = {
				flag = got_title_from_sibling
				years = 4
			}
		}
		
		# Grandeur in elective realms
		if = {
			limit = {
				exists = var:previous_holder_grandeur_value
				has_royal_court = yes
			}
			hidden_effect = {
				change_current_court_grandeur = -100 # Reset to 0
				change_current_court_grandeur = var:previous_holder_grandeur_value
				remove_variable = previous_holder_grandeur_value
			}
		}

		# Petition allowed again
		if = {
			limit = { has_variable = petition_title_cooldown }
			remove_variable = petition_title_cooldown
		}

		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = {
					any_character_artifact = {
						has_variable = artifact_succession_title #Is this an artifact that should follow a title?
						var:artifact_succession_title = { is_title_created = yes } #Does the title the artifact should follow exist?
						var:artifact_succession_title = scope:title #Scope title is the artifact title
					}
				}
			}
			scope:previous_holder = {
				every_character_artifact = {
					limit = {
						has_variable = artifact_succession_title #Is this an artifact that should follow a title?
						var:artifact_succession_title = { is_title_created = yes } #Does the title the artifact should follow exist?
						var:artifact_succession_title = scope:title #Scope title is the artifact title
					}
					if = {
						limit = {
							OR = {
								scope:transfer_type = flag:conquest
								scope:transfer_type = flag:conquest_holy_war
								scope:transfer_type = flag:conquest_claim
								scope:transfer_type = flag:conquest_populist
								scope:transfer_type = flag:abdication
								scope:transfer_type = flag:usurped
								scope:transfer_type = flag:revoked
								scope:transfer_type = flag:faction_demand
							}
						}
						set_owner = {
							target = root
							history = {
								type = conquest
								actor = scope:previous_holder
								recipient = root
								location = scope:previous_holder.location
							}
						}
					}
					else = {
						set_owner = {
							target = root
							history = {
								type = inherited
								recipient = root
							}
						}
					}
				}
			}
		}
		##### End Vanilla Section ^^^^^
		
		##### Changed from Vanilla vvvvv
		
		#Notes:
		# * is_ruler added to ensure granting titles doesn't risk changing gov't of current holders
		
		#Convert valid predecessor government types to Bureaucratic Government
		#For cases like: A prefeudal_government holder becomes e_ere holder
		if = {
			limit = {
				is_independent_ruler = yes
				OR = {
					has_government = subroman_government
					has_government = gubernatorial_government
					has_government = bureaucratic_government
					has_government = prefeudal_government
				}
				scope:previous_holder = {
					OR = {
						has_government = bureaucratic_government #dead bureacrats
						has_character_flag = bureacratic_ruler #Living bureacrats with no titles
					}
				}
			}
			change_government = bureaucratic_government
			add_character_flag = bureacratic_ruler
		}
		
		#### Title granting safety check (prevent boostrapping chars)
		
		#Titles that were granted to non-landed have special checks to prevent government bootstrapping
		#Advanced governments (can't hold tribal_holding) giving tribals yield high_tribal_government; 
		#nomad_government, high_tribal_government, and tribal_government yield the same government
		if = {
			limit = {
				AND = {
					scope:transfer_type = flag:granted #Only for title grants
					scope:title = { tier >= tier_county } #Which was a county or better
					#Who wasn't getting upgraded (from baron to county) *or* who already _had_ counties
					root.capital_county = { this != scope:title } #NB: Throws singular error, but it WORKS!
				}
			}
			#Unplayable Governments: Should not change whenever gaining titles
			if = {
				limit = {
					root = {
						OR = {
							has_government = republic_government
							has_government = mercenary_government
							has_government = holy_order_government
						}
					}
				}
			}
			#Theocracy (special)
			else_if = {
				limit = { scope:previous_holder = { has_government = theocracy_government } }
				change_government = theocracy_government
			}
			#Primitive Governments (can hold tribal_holding)
			else_if = {
				limit = { scope:previous_holder = { has_government = tribal_government } }
				change_government = tribal_government
			}
			else_if = {
				limit = { scope:previous_holder = { has_government = nomad_government } }
				change_government = nomad_government
			}
			else_if = {
				limit = { scope:previous_holder = { has_government = high_tribal_government } }
				change_government = high_tribal_government
			}
			#Advanced Governments (Cannot hold tribal_holding)
			else_if = {
				limit = { scope:previous_holder = { has_government = prefeudal_government } }
				if = {
					limit = { scope:title.title_province = { has_holding_type = tribal_holding } }
					change_government = high_tribal_government
				}
				else = { change_government = prefeudal_government }
			}
			else_if = {
				limit = { scope:previous_holder = { has_government = subroman_government } }
				if = {
					limit = { scope:title.title_province = { has_holding_type = tribal_holding } }
					change_government = high_tribal_government
				}
				else = { change_government = subroman_government } #Occasional errors
			}
			else_if = {
				limit = { scope:previous_holder = { has_government = eranshar_government } }
				if = {
					limit = { scope:title.title_province = { has_holding_type = tribal_holding } }
					change_government = high_tribal_government
				}
				else = { change_government = eranshar_government }
			}
			else_if = {
				limit = { scope:previous_holder = { has_government = gupta_government } }
				if = {
					limit = { scope:title.title_province = { has_holding_type = tribal_holding } }
					change_government = high_tribal_government
				}
				else = { change_government = gupta_government } #Occasional errors
			}
			else_if = {
				limit = {
					scope:previous_holder = {
						OR = {
							has_government = gubernatorial_government
							has_government = bureaucratic_government
						}
					}
				}
				if = {
					limit = { scope:title.title_province = { has_holding_type = tribal_holding } }
					change_government = high_tribal_government
				}
				else = { change_government = gubernatorial_government } #Occasional errors
			}
		}
		else_if = {
			limit = {
				scope:transfer_type = flag:granted
				scope:previous_holder = { has_government = bureaucratic_government }
				scope:title = { tier = tier_barony }
				scope:title.title_province = { has_holding_type = castle_holding }
			}
			change_government = gubernatorial_government
		}
		else_if = {
			limit = { }
		}
		##### Change from Vanilla ^^^^^
	}
	##### Change from Vanilla #####
	events = {
		roman_restoration.0005		#New Roman Emperor gets Augustus trait. (old holder, if still alive, loses it)
		roman_restoration.0199		#Restoring the Pentarchy.
		religious_decision.0312		# Base game: new holder of a county with a runestone
		fp1_other_decisions.0113	# FP1: new holder of a county with a runestone
		delay = { days = 1 }
		realm_maintenance.2001		#Big notification about inheriting emperor tier title
		british_isles.1032			# Danelaw-England partition calc.
		fp1_major_decisions.1011	# Harald Tanglehair becomes Harald Fairhair.
		fp1_major_decisions.1012	# If Norway has just been created for the first time, flag that.
		title_event.0001			# Rename West Francia to France
		title_event.0002			# Rename East Francia to Germany
	}
	##### Change from Vanilla #####
}


# A title is inherited by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Should be dead
on_title_gain_inheritance = {
	events = {
	}
	effect = {
		if = {
			limit = {
				scope:title = title:e_mongol_empire
				has_character_flag = gain_mongol_succession_dread
			}
			add_dread = 50
		}
	}
}

# A title is usurped by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Shouldn't be dead
on_title_gain_usurpation = {
	events = {
	}
}

# A title is lost by a character
# root = the old holder
# scope:title = the title that changes hands
# scope:new_holder = new holder.
on_title_lost = {
	events = {
		british_isles.1033	# Danelaw-England partition calc.
	}

	effect = {
		#Make sure nobody ever has only the Kingdom of Fashion
		if = {
			limit = {
				scope:title = { tier = tier_kingdom }
				has_title = title:k_fashion
				NOT = {
					any_held_title = { # Only trigger if you don't have any kingdom titles other than Fashion and the kingdom you just lost. Double negative is confusing but it's the only way I could think to script it
						tier = tier_kingdom
						NOT = { this = title:k_fashion }
						NOT = { this = scope:title }
					}
				}
			}
			destroy_title = title:k_fashion
		}
		#Earmark landless Scandinavians for adventuring.
		if = {
			limit = {
				#We only want to grab tribal cultures.
				culture = {
					NOT = { has_cultural_era_or_later = culture_era_early_medieval }
				}
				#Must have lost their last piece of land.
				is_landed = no
				#If they've ventured far outside Europe, they're unlikely to come back, so we don't #want them.
				scope:title = {
					tier = tier_county
					title_province = {
						OR = {
							geographical_region = world_europe
							geographical_region = world_asia_minor
						}
					}
				}
			}
			#Norse, Norwegians, & Danes go into the western adventurer list.
			if = {
				limit = {
					OR = {
						has_culture = culture:norse
						has_culture = culture:norwegian
						has_culture = culture:danish
					}
				}
				add_to_global_variable_list = {
					name = western_scandinavian_adventurer_list
					target = this
				}
			}
			#Norse & Swedes go into the eastern adventurer list.
			if = {
				limit = {
					OR = {
						has_culture = culture:norse
						has_culture = culture:swedish
					}
				}
				add_to_global_variable_list = {
					name = eastern_scandinavian_adventurer_list
					target = this
				}
			}
		}

		#To remove concubines if a character becomes unlanded
		if = {
			limit = {
				is_landed = no
				any_concubine = { count >= 1 }
			}
			every_concubine = {
				root = {
					remove_concubine = prev
				}
			}
		}

		#Apply loss of stress to the Rivals
		if = {
			limit = {
				scope:title.tier >= tier_county
				OR = {
					scope:transfer_type = flag:conquest
					scope:transfer_type = flag:conquest_holy_war
					scope:transfer_type = flag:conquest_claim
					scope:transfer_type = flag:conquest_populist
					scope:transfer_type = flag:abdication
					scope:transfer_type = flag:usurped
					scope:transfer_type = flag:revoked
					scope:transfer_type = flag:faction_demand
				}
			}
			root = {
				save_scope_as = actor
			}
			every_relation ={
				type = rival

				send_interface_message = {
					type = event_generic_neutral
					title = msg_rival_dethroned
					left_icon = scope:actor
					right_icon = scope:title

					custom_tooltip = msg_rival_dethroned_desc

					stress_impact = { 
						base = medium_stress_loss
						vengeful = medium_stress_loss
					}
				}
			}
		}
	}
}

# A claim is gained by a character
# root = the claimant
# scope:title = the title that is claimed
on_explicit_claim_gain = {
	effect = {
		if = {
			limit = { 
				title:k_england.holder = root
			}
			title:k_england = {
				update_dynamic_coa = yes
			}
		}
	}
}

# A claim is lost by a character
# root = the claimant
# scope:title = the title that was claimed
on_explicit_claim_lost = {
	effect = {
		if = {
			limit = { 
				title:k_england.holder = root 
			}
			title:k_england = {
				update_dynamic_coa = yes
			}
		}
	}
}

# A title change makes the character rank up in the landed tiers (eg Duke -> King)
# root = character ranking up
# scope:title = old primary title
on_rank_up = { # Will not fire during history execution or for dying characters
	events = {
	}
	effect = {
		add_achievement_flag_effect = { FLAG = achievement_moving_up_in_the_world_flag }
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
		# Make a note of ranking up for stele purposes.
		if = {
			limit = {
				# DLC check.
				has_fp1_dlc_trigger = yes
				# Is the culture eligible?
				fp1_can_raise_stele_trigger = yes
				# Aaaaand, for balance reasons, were they landed already?
				exists = scope:title
			}
			set_variable = {
				name = recent_rank_increase
				value = root.primary_title
				years = 5
			}
		}
	}
}

# A title change makes the character rank down in the landed tiers (eg King -> Duke)
# root = character ranking down
# scope:title = old primary title
on_rank_down = { # Will not fire during history execution or for dying characters
	events = {
	}
	effect = {
		if = {
			limit = {
				NOR = {
					has_trait = humble
					has_trait = content
					has_trait = generous
				}
			}
			add_character_flag = {
				flag = make_suicide_available
				years = 5
			}
			set_variable = {
				name = rank_demoted
				value = yes
			}
		}
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
	}
}

# A character gains a vassal
# root = character gaining vassal
# scope:vassal = vassal being gained
# scope:old_liege = the previous liege of the vassal. Might be the null character (vassal used to be a non-ruler or independent), so make sure to use "exists" checks where relevant
on_vassal_gained = {
	events = {
		realm_maintenance.1000 # Notify vassals of new liege
	}
}

# A baron is found or created for a title, E.G., due to the player using the "Give to Low Noble" action
# No transfer type here; it's always a grant
# root = the baron
# scope:liege = the person who wanted them created
# scope:title = the barony
on_baron_found_or_created_for_title = {
	effect = {
		add_opinion = {
			target = scope:liege
			modifier = received_title_barony
		}
	}
}
