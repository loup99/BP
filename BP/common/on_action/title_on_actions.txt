#On actions about titles

# All on-actions in this file provide scope:transfer_type unless otherwise noted
# scope:transfer_type has the following permutations:
# flag:conquest
# flag:conquest_holy_war
# flag:conquest_claim
# flag:conquest_populist
# flag:inheritance
# flag:abdication
# flag:destroyed
# flag:created
# flag:usurped
# flag:granted
# flag:revoked
# flag:election
# flag:independency
# flag:returned
# flag:leased_out
# flag:lease_revoked
# flag:faction_demand
# flag:swear_fealty

##### Change from Vanilla #####
# Remove Danelaw-England Partition event
on_title_destroyed = {
	events = {}
}
##### Change from Vanilla #####

# A title is transferred to a new character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain = {
	effect = {
		if = {
			limit = {
				scope:title = { is_holy_order = yes }
				NOT = { has_trait = order_member }
				has_government = holy_order_government
			}
			add_trait = order_member
		}

		#Did I receive a title from my sibling?
		if = {
			limit = {
				exists = scope:previous_holder
				scope:previous_holder = {
					is_alive = yes
					exists = var:sibling_waiting_for_land
					any_sibling = {
						this = root
						this = scope:previous_holder.var:sibling_waiting_for_land
					}
				}
			}
			add_character_flag = {
				flag = got_title_from_sibling
				years = 4
			}
		}
		##### Change from Vanilla vvvvv
		
		#Notes:
		# * is_ruler added to ensure granting titles doesn't risk changing gov't of current holders
		
		#Convert valid predecessor government types to Bureaucratic Government
		#For cases like: A prefeudal_government holder becomes e_ere holder
		if = {
			limit = {
				is_independent_ruler = yes
				OR = {
					has_government = subroman_government
					has_government = gubernatorial_government
					has_government = bureaucratic_government
					has_government = prefeudal_government
				}
				scope:previous_holder = {
					OR = {
						has_government = bureaucratic_government #dead bureacrats
						has_character_flag = bureacratic_ruler #Living bureacrats with no titles
					}
				}
			}
			change_government = bureaucratic_government
			add_character_flag = bureacratic_ruler
		}
		
		#### Title granting safety check (prevent boostrapping chars)
		
		#Titles that were granted to non-landed have special checks to prevent government bootstrapping
		#Advanced governments (can't hold tribal_holding) giving tribals yield high_tribal_government; 
		#nomad_government, high_tribal_government, and tribal_government yield the same government
		if = {
			limit = {
				AND = {
					scope:transfer_type = flag:granted #Only for title grants
					scope:title = { tier >= tier_county } #Which was a county or better
					#Who wasn't getting upgraded (from baron to county) *or* who already _had_ counties
					root.capital_county = { this != scope:title } #NB: Throws singular error, but it WORKS!
				}
			}
			#Unplayable Governments: Should not change whenever gaining titles
			if = {
				limit = {
					root = {
						OR = {
							has_government = republic_government
							has_government = mercenary_government
							has_government = holy_order_government
						}
					}
				}
			}
			#Theocracy (special)
			else_if = {
				limit = { scope:previous_holder = { has_government = theocracy_government } }
				change_government = theocracy_government
			}
			#Primitive Governments (can hold tribal_holding)
			else_if = {
				limit = { scope:previous_holder = { has_government = tribal_government } }
				change_government = tribal_government
			}
			else_if = {
				limit = { scope:previous_holder = { has_government = nomad_government } }
				change_government = nomad_government
			}
			else_if = {
				limit = { scope:previous_holder = { has_government = high_tribal_government } }
				change_government = high_tribal_government
			}
			#Advanced Governments (Cannot hold tribal_holding)
			else_if = {
				limit = { scope:previous_holder = { has_government = prefeudal_government } }
				if = {
					limit = { scope:title.title_province = { has_holding_type = tribal_holding } }
					change_government = high_tribal_government
				}
				else = { change_government = prefeudal_government }
			}
			else_if = {
				limit = { scope:previous_holder = { has_government = subroman_government } }
				if = {
					limit = { scope:title.title_province = { has_holding_type = tribal_holding } }
					change_government = high_tribal_government
				}
				else = { change_government = subroman_government } #Occasional errors
			}
			else_if = {
				limit = { scope:previous_holder = { has_government = eranshar_government } }
				if = {
					limit = { scope:title.title_province = { has_holding_type = tribal_holding } }
					change_government = high_tribal_government
				}
				else = { change_government = eranshar_government }
			}
			else_if = {
				limit = { scope:previous_holder = { has_government = gupta_government } }
				if = {
					limit = { scope:title.title_province = { has_holding_type = tribal_holding } }
					change_government = high_tribal_government
				}
				else = { change_government = gupta_government } #Occasional errors
			}
			else_if = {
				limit = {
					scope:previous_holder = {
						OR = {
							has_government = gubernatorial_government
							has_government = bureaucratic_government
						}
					}
				}
				if = {
					limit = { scope:title.title_province = { has_holding_type = tribal_holding } }
					change_government = high_tribal_government
				}
				else = { change_government = gubernatorial_government } #Occasional errors
			}
		}
		else_if = {
			limit = {
				scope:transfer_type = flag:granted
				scope:previous_holder = { has_government = bureaucratic_government }
				scope:title = { tier = tier_barony }
				scope:title.title_province = { has_holding_type = castle_holding }
			}
			change_government = gubernatorial_government
		}
		else_if = {
			limit = { }
		}
		##### Change from Vanilla ^^^^^
	}
	##### Change from Vanilla #####
	events = {
		roman_restoration.0005		#New Roman Emperor gets Augustus trait. (old holder, if still alive, loses it)
		roman_restoration.0199		#Restoring the Pentarchy.
		religious_decision.0312		# Base game: new holder of a county with a runestone
		fp1_other_decisions.0113	# FP1: new holder of a county with a runestone
		coa.1						# check if title Coat of Arms should change.
		delay = { days = 1 }
		realm_maintenance.2001		#Big notification about inheriting emperor tier title
	}
	##### Change from Vanilla #####
}

# A title is inherited by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Should be dead
on_title_gain_inheritance = {
	events = {}
	effect = {
		if = {
			limit = {
				scope:title = title:e_mongol_empire
				has_character_flag = gain_mongol_succession_dread
			}
			add_dread = 50
		}
	}
}

# A title is usurped by a character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Shouldn't be dead
on_title_gain_usurpation = {
	events = {}
}

##### Change from Vanilla #####
# Removed danelaw effect
##### Change from Vanilla #####
on_title_lost = {
	events = {}
}

# A claim is gained by a character
# root = the claimant
# scope:title = the title that is claimed
on_explicit_claim_gain = {
	events = {
		coa.1 # check if title Coat of Arms should change.
	}
}

# A claim is lost by a character
# root = the claimant
# scope:title = the title that was claimed
on_explicit_claim_lost = {
	events = {
		coa.1 # check if title Coat of Arms should change.
	}
}

# A title change makes the character rank up in the landed tiers (eg Duke -> King)
# root = character ranking up
# scope:title = old primary title
on_rank_up = { # Will not fire during history execution or for dying characters
	events = {}
	effect = {
		add_achievement_flag_effect = { FLAG = achievement_moving_up_in_the_world_flag }
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
		# Make a note of ranking up for stele purposes.
		if = {
			limit = {
				# DLC check.
				has_fp1_dlc_trigger = yes
				# Is the culture eligible?
				fp1_can_raise_stele_trigger = yes
				# Aaaaand, for balance reasons, were they landed already?
				exists = scope:title
			}
			set_variable = {
				name = recent_rank_increase
				value = root.primary_title
				years = 5
			}
		}
	}
}

# A title change makes the character rank down in the landed tiers (eg King -> Duke)
# root = character ranking down
# scope:title = old primary title
on_rank_down = { # Will not fire during history execution or for dying characters
	events = {}
	effect = {
		add_character_flag = {
			flag = make_suicide_available
			years = 5
		}
		update_embassies_effect = yes
		every_ally = {
			update_embassies_effect = yes
		}
	}
}

# A character gains a vassal
# root = character gaining vassal
# scope:vassal = vassal being gained
# scope:old_liege = the previous liege of the vassal. Might be the null character (vassal used to be a non-ruler or independent), so make sure to use "exists" checks where relevant
on_vassal_gained = {
	events = {
		realm_maintenance.1000 # Notify vassals of new liege
	}
}

# A baron is found or created for a title, E.G., due to the player using the "Give to Low Noble" action
# No transfer type here; it's always a grant
# root = the baron
# scope:liege = the person who wanted them created
# scope:title = the barony
on_baron_found_or_created_for_title = {
	effect = {
		add_opinion = {
			target = scope:liege
			modifier = received_title_barony
		}
	}
}
