@crown_authority_cooldown_years = 20
@high_tribal_centralization_cooldown_years = 10
@bureaucracy_cooldown_years = 10
@subroman_decay_cooldown_years = 50
@recent_subroman_decay_upgrade_cooldown_years = 10

#TODO: Implement imprisonment restrictions
high_tribal_centralization = {
	default = high_tribal_centralization_0
	cumulative = no
	flag = realm_law
	
	high_tribal_centralization_0 = {
		modifier = {
			direct_vassal_opinion = 10
			development_growth_factor = -0.40
		}
		
		can_keep = { realm_law_use_high_tribal_centralization = yes }
		#Imprisonment is disabled if you have this law. Script is in the interaction, currently in 00_prison_interactions.
	}
	
	high_tribal_centralization_1 = {
		modifier = { 
			direct_vassal_opinion = -10
			development_growth_factor = -0.30
		}
		
		can_keep = { realm_law_use_high_tribal_centralization = yes }
		
		can_pass = {
			trigger_if = {
				limit = { has_realm_law = high_tribal_centralization_0 }
				custom_description = {
					subject = root
					text = "has_high_tribal_centralization_cooldown"
					NOT = { has_variable = high_tribal_centralization_cooldown }
				}
			}
		}
		
		pass_cost = {
			prestige = {
				if = {
					limit = {
						NOR = {
							has_realm_law = high_tribal_centralization_2
							has_realm_law = high_tribal_centralization_3
						}
					}
					add = increase_tribal_authority_prestige_cost
				}
			}
		}
		
		on_pass = {
			if = {
				limit = {
					NOR = {
						has_realm_law = high_tribal_centralization_2
						has_realm_law = high_tribal_centralization_3
					}
				}
			}
			set_variable = {
				name = high_tribal_centralization_cooldown
				years = @high_tribal_centralization_cooldown_years
			}
		}

		ai_will_do = {
			if = {
				limit = { has_realm_law = high_tribal_centralization_0 }
				value = 1
			}
		}
	}
	
	high_tribal_centralization_2 = {
		modifier = {
			direct_vassal_opinion = -20
			development_growth_factor = -0.20
		}
		flag = title_revocation_allowed
		flag = vassal_retraction_allowed
		
		can_keep = { realm_law_use_high_tribal_centralization = yes }
		
		can_pass = {
			trigger_if = {
				limit = {
					NOT = { has_realm_law = high_tribal_centralization_3 }
				}
				has_realm_law = high_tribal_centralization_1
				custom_description = {
					subject = root
					text = "has_high_tribal_centralization_cooldown"
					NOT = { has_variable = high_tribal_centralization_cooldown }
				}
			}
			root.culture = { has_innovation = innovation_leges_barbarorum }
		}

		pass_cost = {
			prestige = {
				if = {
					limit = {
						NOT = { has_realm_law = high_tribal_centralization_3 }
					}
					add = increase_tribal_authority_prestige_cost
				}
			}
		}
		
		on_pass = {
			if = {
				limit = {
					NOT = { has_realm_law = high_tribal_centralization_3 }
				}
			}
			set_variable = {
				name = high_tribal_centralization_cooldown
				years = @high_tribal_centralization_cooldown_years
			}
		}

		ai_will_do = {
			if = {
				limit = { has_realm_law = high_tribal_centralization_1 }
				value = 1
			}
		}
	}
	
	high_tribal_centralization_3 = {
		modifier = {
			direct_vassal_opinion = -20
			development_growth_factor = -0.10
		}
		#Settling is disabled unless you have this law. Script is in the decisions, currently in 80_major_decisions.
		#Reforming pagan religions (but not creating other faiths) is disabled unless you have this law. Script is in the reformation prereqs, currently in 00_rules.
		
		can_keep = { realm_law_use_high_tribal_centralization = yes }
		
		can_pass = {
			has_realm_law = high_tribal_centralization_2
			custom_description = {
				subject = root
				text = "has_high_tribal_centralization_cooldown"
				NOT = { has_variable = high_tribal_centralization_cooldown }
			}
			root.culture = { has_innovation = innovation_mundium }
		}
		
		pass_cost = { prestige = increase_tribal_authority_prestige_cost }
		
		on_pass = {
			set_variable = {
				name = high_tribal_centralization_cooldown
				years = @high_tribal_centralization_cooldown_years
			}
		}

		ai_will_do = {
			if = {
				limit = { has_realm_law = high_tribal_centralization_2 }
				value = 1
			}
		}
	}
}

prefeudal_authority = {
	default = prefeudal_authority_0
	cumulative = no
	flag = realm_law
	
	prefeudal_authority_0 = {
		modifier = {
			direct_vassal_opinion = 10
			vassal_tax_contribution_mult = -0.20
			vassal_levy_contribution_mult = -0.20
		}
		can_keep = { realm_law_use_prefedual_authority = yes }
	}
	
	prefeudal_authority_1 = {
		modifier = {
			direct_vassal_opinion = 5
			vassal_tax_contribution_mult = -0.10
			vassal_levy_contribution_mult = -0.10
		}
		flag = can_change_partition_succession_laws

		can_keep = { realm_law_use_prefedual_authority = yes }

		can_pass = {
			trigger_if = {
				limit = { has_realm_law = prefeudal_authority_0 }
				custom_description = {
					subject = root
					text = "has_crown_authority_cooldown"
					NOT = { has_variable = crown_authority_cooldown }
				}
				root.culture = { has_innovation = innovation_writing }
			}
		}
		
		pass_cost = {
			prestige = {
				if = {
					limit = {
						NOR = {
							has_realm_law = prefeudal_authority_2
							has_realm_law = prefeudal_authority_3
						}
					}
					add = increase_crown_authority_prestige_cost
				}
			}
		}
		
		on_pass = {
			if = {
				limit = {
					NOT = { has_realm_law = prefeudal_authority_2 }
				}
			}
			set_variable = {
				name = crown_authority_cooldown
				years = @crown_authority_cooldown_years
			}
		}

		ai_will_do = {
			if = {
				limit = { has_realm_law = prefeudal_authority_0 }
				value = 1
			}
		}
	}
	
	prefeudal_authority_2 = {
		modifier = {
			direct_vassal_opinion = -5
			vassal_tax_contribution_mult = 0.10
			vassal_levy_contribution_mult = 0.10
		}
		flag = title_revocation_allowed
		flag = vassal_retraction_allowed
		
		flag = titles_cannot_leave_realm_on_succession # Hardcoded flag
		
		can_keep = { realm_law_use_prefedual_authority = yes }

		can_pass = {
			trigger_if = {
				limit = {
					NOT = { has_realm_law = prefeudal_authority_3 }
				}
				has_realm_law = prefeudal_authority_1
				custom_description = {
					subject = root
					text = "has_crown_authority_cooldown"
					NOT = { has_variable = crown_authority_cooldown }
				}
			}
			root.culture = { has_innovation = innovation_mundium }
		}

		pass_cost = {
			prestige = {
				if = {
					limit = {
						NOT = { has_realm_law = prefeudal_authority_3 }
					}
					add = increase_crown_authority_prestige_cost
				}
			}
		}
		
		on_pass = {
			if = {
				limit = {
					NOT = { has_realm_law = prefeudal_authority_3 }
				}
			}
			set_variable = {
				name = crown_authority_cooldown
				years = @crown_authority_cooldown_years
			}
		}

		ai_will_do = {
			if = {
				limit = { has_realm_law = prefeudal_authority_1 }
				value = 1
			}
		}
	}
	
	prefeudal_authority_3 = {
		modifier = {
			direct_vassal_opinion = -10
			vassal_tax_contribution_mult = 0.20
			vassal_levy_contribution_mult = 0.20
		}
		flag = can_change_succession_laws
		
		can_keep = { realm_law_use_prefedual_authority = yes }

		can_pass = {
			has_realm_law = prefeudal_authority_2
			custom_description = {
				subject = root
				text = "has_crown_authority_cooldown"
				NOT = { has_variable = crown_authority_cooldown }
			}
			root.culture = { has_innovation = innovation_plenary_assemblies }
		}
		
		pass_cost = {
			prestige = {
				if = {
					limit = {
						NOT = { has_realm_law = prefeudal_authority_3 }
					}
					add = increase_crown_authority_prestige_cost
				}
			}
		}
		
		on_pass = {
			set_variable = {
				name = crown_authority_cooldown
				years = @crown_authority_cooldown_years
			}
		}
	}
}

#Since theis models decay more than anything else, you can only improve your status
#not decline it
subroman_decay = {
	default = subroman_decay_0
	cumulative = yes
	flag = realm_law
	
	#Note:
	#subroman_decay_cooldown prevents YOU from upgrading more than once every 50 years
	#recent_subroman_decay_upgrade_cooldown prevents THE GAME from downgrading shortly afterwards
	
	subroman_decay_0 = {
		modifier = {}
		
		can_keep = { realm_law_use_subroman_decay = yes }
		
		can_pass = {
			custom_description = {
				text = can_never_voluntary_reach_this_state
				always = no
			}
		}
		
		pass_cost = {
			prestige = { add = improve_subroman_decay_prestige_cost }
			gold = { add = improve_subroman_decay_gold_cost }
		}
		
		on_pass = {
			if = {
				limit = { NOT = { has_realm_law = subroman_decay_0 } }
				set_variable = {
					name = subroman_decay_cooldown
					years = @subroman_decay_cooldown_years
				}
				set_variable = {
					name = recent_subroman_decay_upgrade_cooldown
					years = @recent_subroman_decay_upgrade_cooldown_years
				}
			}
		}
	}
	subroman_decay_1 = {
		modifier = {
			domain_tax_mult = 0.1
			vassal_levy_contribution_mult = -0.10
			vassal_tax_contribution_mult = 0.10
		}
		flag = title_revocation_allowed
		flag = vassal_retraction_allowed
		
		can_keep = { realm_law_use_subroman_decay = yes }
		
		can_pass = {
			has_realm_law = subroman_decay_0
			trigger_if = {
				limit = { has_realm_law = subroman_decay_0 }
				custom_description = {
					subject = root
					text = "has_subroman_decay_cooldown"
					NOT = { has_variable = subroman_decay_cooldown }
				}
			}
		}
		
		pass_cost = {
			prestige = { add = improve_subroman_decay_prestige_cost }
			gold = { add = improve_subroman_decay_gold_cost }
		}
		
		on_pass = {
			if = {
				limit = { NOT = { has_realm_law = subroman_decay_1 } }
				set_variable = {
					name = subroman_decay_cooldown
					years = @subroman_decay_cooldown_years
				}
				set_variable = {
					name = recent_subroman_decay_upgrade_cooldown
					years = @recent_subroman_decay_upgrade_cooldown_years
				}
			}
		}
	}
	subroman_decay_2 = {
		modifier = {
			domain_tax_mult = 0.1
			vassal_levy_contribution_mult = -0.10
			vassal_tax_contribution_mult = 0.10
		}
		flag = can_change_succession_laws
		
		can_keep = { realm_law_use_subroman_decay = yes }
		
		can_pass = {
			has_realm_law = subroman_decay_1
			trigger_if = {
				limit = { has_realm_law = subroman_decay_1 }
				custom_description = {
					subject = root
					text = "has_subroman_decay_cooldown"
					NOT = { has_variable = subroman_decay_cooldown }
				}
			}
		}
		
		pass_cost = {
			prestige = { add = improve_subroman_decay_prestige_cost }
			gold = { add = improve_subroman_decay_gold_cost }
		}
		
		on_pass = {
			if = {
				limit = { NOT = { has_realm_law = subroman_decay_2 } }
				set_variable = {
					name = subroman_decay_cooldown
					years = @subroman_decay_cooldown_years
				}
				set_variable = {
					name = recent_subroman_decay_upgrade_cooldown
					years = @recent_subroman_decay_upgrade_cooldown_years
				}
			}
		}
	}
	subroman_decay_3 = {
		modifier = {
			domain_tax_mult = 0.1
			vassal_levy_contribution_mult = -0.10
			vassal_tax_contribution_mult = 0.10
		}
		flag = vassal_internal_wars_banned
		
		can_keep = { realm_law_use_subroman_decay = yes }
		
		can_pass = {
			has_realm_law = subroman_decay_2
			trigger_if = {
				limit = { has_realm_law = subroman_decay_2 }
				custom_description = {
					subject = root
					text = "has_subroman_decay_cooldown"
					NOT = { has_variable = subroman_decay_cooldown }
				}
			}
		}
		
		pass_cost = {
			prestige = { add = improve_subroman_decay_prestige_cost }
			gold = { add = improve_subroman_decay_gold_cost }
		}
		
		on_pass = {
			if = {
				limit = { NOT = { has_realm_law = subroman_decay_3 } }
				set_variable = {
					name = subroman_decay_cooldown
					years = @subroman_decay_cooldown_years
				}
				set_variable = {
					name = recent_subroman_decay_upgrade_cooldown
					years = @recent_subroman_decay_upgrade_cooldown_years
				}
			}
		}
	}
	subroman_decay_4 = {
		modifier = {
			domain_tax_mult = 0.1
			vassal_levy_contribution_mult = -0.10
			vassal_tax_contribution_mult = 0.10
		}
		flag = vassal_all_wars_banned
		flag = can_designate_heirs
		
		can_keep = { realm_law_use_subroman_decay = yes }
		
		can_pass = {
			trigger_if = {
				limit = { has_realm_law = subroman_decay_3 }
				custom_description = {
					subject = root
					text = "has_subroman_decay_cooldown"
					NOT = { has_variable = subroman_decay_cooldown }
				}
			}
		}
		
		pass_cost = {
			prestige = { add = improve_subroman_decay_prestige_cost }
			gold = { add = improve_subroman_decay_gold_cost }
		}
		
		on_pass = {
			if = {
				limit = { NOT = { has_realm_law = subroman_decay_4 } }
				set_variable = {
					name = subroman_decay_cooldown
					years = @subroman_decay_cooldown_years
				}
				set_variable = {
					name = recent_subroman_decay_upgrade_cooldown
					years = @recent_subroman_decay_upgrade_cooldown_years
				}
			}
		}
	}
}

#Eranshar Governmnet special effects
eranshar_authority = {
	default = eranshar_authority_0
	cumulative = no
	flag = realm_law
	
	eranshar_authority_0 = {
		modifier = {}
		flag = title_revocation_allowed
		flag = vassal_retraction_allowed
		flag = can_change_succession_laws
		
		can_keep = { realm_law_use_eranshar_authority = yes }
	}
}

#Roman government special effects
gubernatorial_authority = {
	default = gubernatorial_authority_0
	cumulative = no
	flag = realm_law
	
	gubernatorial_authority_0 = {
		modifier = { vassal_levy_contribution_mult = -0.50 }
		flag = title_revocation_allowed
		flag = vassal_retraction_allowed
		
		can_keep = { realm_law_use_gubernatorial_authority = yes }
	}
}

bureaucratic_authority = {
	default = bureaucratic_authority_2
	cumulative = no
	flag = realm_law
	
	bureaucratic_authority_0 = {
		modifier = {
			vassal_tax_contribution_mult = 0.50
			vassal_levy_contribution_mult = -0.50
			direct_vassal_opinion = -10
		}
		flag = title_revocation_allowed
		flag = vassal_retraction_allowed
		flag = can_change_partition_succession_laws
		flag = vassal_refusal_is_treason
		flag = can_change_succession_laws
		flag = titles_cannot_leave_realm_on_succession # Hardcoded flag
		flag = can_designate_heirs
		
		can_keep = { realm_law_use_bureaucratic_authority = yes }
	}
	
	bureaucratic_authority_1 = {
		modifier = {
			vassal_tax_contribution_mult = 0.25
			vassal_levy_contribution_mult = -0.50
			direct_vassal_opinion = -5
		}
		flag = title_revocation_allowed
		flag = vassal_retraction_allowed
		flag = can_change_partition_succession_laws
		flag = vassal_refusal_is_treason
		flag = can_change_succession_laws
		flag = titles_cannot_leave_realm_on_succession # Hardcoded flag
		flag = can_designate_heirs

		can_keep = { realm_law_use_bureaucratic_authority = yes }

		can_pass = {
			trigger_if = {
				limit = { has_realm_law = bureaucratic_authority_0 }
				custom_description = {
					subject = root
					text = "has_bureaucracy_cooldown"
					NOT = { has_variable = bureaucracy_cooldown }
				}
			}
		}
		
		pass_cost = {
			prestige = {
				if = {
					limit = {
						NOR = {
							has_realm_law = bureaucratic_authority_2
							has_realm_law = bureaucratic_authority_3
						}
					}
					add = increase_crown_authority_prestige_cost
				}
			}
		}
		
		on_pass = {
			if = { limit = { NOT = { has_realm_law = bureaucratic_authority_2 } } }
			set_variable = {
				name = bureaucracy_cooldown
				years = @bureaucracy_cooldown_years
			}
		}

		ai_will_do = {
			if = {
				limit = { has_realm_law = bureaucratic_authority_0 }
				value = 1
			}
		}
	}
	
	bureaucratic_authority_2 = {
		modifier = { vassal_levy_contribution_mult = -0.50 }
		flag = title_revocation_allowed
		flag = vassal_retraction_allowed
		flag = can_change_partition_succession_laws
		flag = vassal_refusal_is_treason
		flag = can_change_succession_laws
		flag = titles_cannot_leave_realm_on_succession # Hardcoded flag
		flag = can_designate_heirs
		
		can_keep = { realm_law_use_bureaucratic_authority = yes }

		can_pass = {
			trigger_if = {
				limit = { NOT = { has_realm_law = bureaucratic_authority_3 } }
				has_realm_law = bureaucratic_authority_1
				custom_description = {
					subject = root
					text = "has_bureaucracy_cooldown"
					NOT = { has_variable = bureaucracy_cooldown }
				}
			}
		}

		pass_cost = {
			prestige = {
				if = {
					limit = { NOT = { has_realm_law = bureaucratic_authority_3 } }
					add = increase_crown_authority_prestige_cost
				}
			}
		}
		
		on_pass = {
			if = {
				limit = { NOT = { has_realm_law = bureaucratic_authority_3 } }
			}
			set_variable = {
				name = bureaucracy_cooldown
				years = @bureaucracy_cooldown_years
			}
		}

		ai_will_do = {
			if = {
				limit = { has_realm_law = bureaucratic_authority_1 }
				value = 1
			}
		}
	}
	
	bureaucratic_authority_3 = {
		modifier = {
			vassal_levy_contribution_mult = -0.25
			direct_vassal_opinion = -5
		}
		flag = title_revocation_allowed
		flag = vassal_retraction_allowed
		flag = can_change_partition_succession_laws
		flag = vassal_refusal_is_treason
		flag = can_change_succession_laws
		flag = titles_cannot_leave_realm_on_succession # Hardcoded flag
		flag = can_designate_heirs
		
		can_keep = { realm_law_use_bureaucratic_authority = yes }

		can_pass = {
			trigger_if = {
				limit = { NOT = { has_realm_law = bureaucratic_authority_4 } }
				has_realm_law = bureaucratic_authority_2
				custom_description = {
					subject = root
					text = "has_bureaucracy_cooldown"
					NOT = { has_variable = bureaucracy_cooldown }
				}
			}
		}
		
		pass_cost = {
			prestige = {
				if = {
					limit = { NOT = { has_realm_law = bureaucratic_authority_4 } }
					add = increase_crown_authority_prestige_cost
				}
			}
		}
		
		on_pass = {
			if = { limit = { NOT = { has_realm_law = bureaucratic_authority_4 } } }
			set_variable = {
				name = bureaucracy_cooldown
				years = @bureaucracy_cooldown_years
			}
		}
	}
	
	bureaucratic_authority_4 = {
		modifier = { direct_vassal_opinion = -10 }
		flag = title_revocation_allowed
		flag = vassal_retraction_allowed
		flag = can_change_partition_succession_laws
		flag = vassal_refusal_is_treason
		flag = can_change_succession_laws
		flag = titles_cannot_leave_realm_on_succession # Hardcoded flag
		flag = can_designate_heirs
		
		can_keep = { realm_law_use_bureaucratic_authority = yes }

		can_pass = {
			has_realm_law = bureaucratic_authority_3
			custom_description = {
				subject = root
				text = "has_crown_authority_cooldown"
				NOT = { has_variable = crown_authority_cooldown }
			}
		}
		
		pass_cost = {
			prestige = {
				if = {
					limit = { NOT = { has_realm_law = bureaucratic_authority_3 } }
					add = increase_crown_authority_prestige_cost
				}
			}
		}
		
		on_pass = {
			set_variable = {
				name = bureaucracy_cooldown
				years = @bureaucracy_cooldown_years
			}
		}
	}
}
