namespace = bp_heritage_linguistic_drift

#Design Notes:
# For 0.2.0, this will be a simple binary, but later we'll want to make the linguistic/heritage drifts
# more gradual.

#0001-0100: Linguistic Drift Events
#0101-0200: Heritage Drift Events

scripted_trigger valid_linguistic_drift_culture_trigger = {
	#Should actually be uses the latin language, but we need to make sure to map all possiblities
	OR = {
		this = culture:romano_african
		this = culture:romano_noric
		this = culture:romano_raetian
		this = culture:romano_british
	}
	this = { has_cultural_pillar = language_latin }
}

#60% of culture counties under a single Latin-speaking Empire
scripted_trigger valid_linguistic_prevention_condition_trigger = {
	any_ruler = {
		this = { save_temporary_scope_as = ruler }
		primary_title.tier = tier_empire
		culture = { has_same_culture_language = scope:linguistic_shift_culture }
		scope:linguistic_shift_culture = {
			any_culture_county = {
				percent >= 0.60
				holder = {
					OR = {
						this = scope:ruler
						this = { any_liege_or_above = { this = scope:ruler } }
					}
				}
			}
		}
	}
}

scripted_effect shift_language_effect = {
	scope:linguistic_shift_culture = {
		if = {
			limit = { this = culture:romano_african }
			custom_tooltip = {
				text = african_romance_language
				subject = scope:linguistic_shift_culture
				set_culture_pillar = language_african_romance
			}
			custom_tooltip = {
				text = african_romance_name_list
				subject = scope:linguistic_shift_culture
				set_name_list = name_list_african_romance
			}
		}
		else_if = {
			limit = {
				OR = {
					this = culture:romano_noric
					this = culture:romano_raetian
				}
			}
			custom_tooltip = {
				text = rhaeto_romance_language
				subject = scope:linguistic_shift_culture
				set_culture_pillar = language_rhaeto_romance
			}
			custom_tooltip = {
				text = romansh_name_list
				subject = scope:linguistic_shift_culture
				set_name_list = name_list_romansh
			}
		}
		else_if = {
			limit = { this = culture:romano_british }
			custom_tooltip = {
				text = british_romance_language
				subject = scope:linguistic_shift_culture
				set_culture_pillar = language_british_romance
			}
			custom_tooltip = {
				text = british_romance_name_list
				subject = scope:linguistic_shift_culture
				set_name_list = name_list_british_romance
			}
		}
		else = { debug_log = "UNHANDLED CULTURE IN bp_heritage_linguistic_drift EVENT SPACE" }
	}
}

#Make sure culture is actually valid
bp_heritage_linguistic_drift.0001 = {
	hidden = yes
	
	#Make sure a valid culture exists
	trigger = { any_culture_global = { valid_linguistic_drift_culture_trigger = yes } }
	
	#Pick one of the random valid cultures
	immediate = {
		random_culture_global = {
			limit = { valid_linguistic_drift_culture_trigger = yes }
			save_scope_as = linguistic_shift_culture
		}
		
		if = {
			limit = { NOT = { valid_linguistic_prevention_condition_trigger = yes } }
			
			if = {
				limit = { exists = scope:linguistic_shift_culture }
				#If the culture head exists, inform him/her first
				if = {
					limit = { exists = scope:linguistic_shift_culture.culture_head }
					scope:linguistic_shift_culture.culture_head = { trigger_event = { id = bp_heritage_linguistic_drift.0002 } }
				}
				#Otherwise, directly change the culture and tell everyone
				else = {
					shift_language_effect = yes
					every_player = { trigger_event = { id = bp_heritage_linguistic_drift.0003 } }
				}
			}
			#Handle failure case; shouldn't happen unless some Latin-speaking culture doesn't map
			else = { debug_log = "NO LATIN SPEAKING CULTURE CAN BE SELECTED FOR bp_heritage_linguistic_drift.0001 EVENT" }
		}
	}
}

bp_heritage_linguistic_drift.0002 = {
	type = character_event
	title = bp_heritage_linguistic_drift.0002.t
	desc = bp_heritage_linguistic_drift.0002.desc
	theme = culture_change
	left_portrait = root
	
	immediate = {}
	
	option = {
		name = bp_heritage_linguistic_drift.0002.accept
		shift_language_effect = yes
		every_ruler = {
			limit = {
				OR = {
					this = { in_diplomatic_range = root }
					this.culture = { has_same_culture_language = scope:linguistic_shift_culture }
				}
				NOT = { this = root }
			}
			trigger_event = { id = bp_heritage_linguistic_drift.0003 }
		}
		flavor = bp_heritage_linguistic_drift.0002.accept.tooltip
	}
}

bp_heritage_linguistic_drift.0003 = {
	type = character_event
	title = bp_heritage_linguistic_drift.0003.t
	desc = bp_heritage_linguistic_drift.0003.desc
	theme = culture_change
	left_portrait = scope:chosen_character
	
	immediate = {
		if = {
			limit = { exists = scope:linguistic_shift_culture.culture_head }
			scope:linguistic_shift_culture.culture_head = { save_scope_as = chosen_character }
		}
		else_if = {
			limit = { any_ruler = { culture = scope:linguistic_shift_culture } }
			random_ruler = {
				limit = { culture = scope:linguistic_shift_culture }
				save_scope_as = chosen_character
			}
		}
		#Fallback
		else = { root = { save_scope_as = chosen_character } }
	}
	
	#For other rulers of the culture
	option = {
		name = bp_heritage_linguistic_drift.0003.accept_same_culture
		flavor = bp_heritage_linguistic_drift.0003.accept_same_culture.tooltip
		trigger = { root.culture = scope:linguistic_shift_culture }
	}
	#For other rulers not of the culture
	option = {
		name = bp_heritage_linguistic_drift.0003.accept_different_culture
		flavor = bp_heritage_linguistic_drift.0003.accept_different_culture.tooltip
		trigger = { NOT = { root.culture = scope:linguistic_shift_culture } }
		fallback = yes
	}
}

##### Heritage cases: Should require culture counties under dominance of another heritage
##### (80% under another heritage, not 80% under a set)
