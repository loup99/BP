namespace = BP_maintenance_events

#Informational event for players at start
BP_maintenance_events.0001 = {
	type = character_event
	theme = realm
	
	title = BP_maintenance_events.0001.t
	
	desc = {
		#Basic Mod information
		desc = BP_maintenance_events.0001.desc.opening
		desc = BP_maintenance_events.0001.desc.more_information
		desc = BP_maintenance_events.0001.desc.development_info
		#Tell Players about any special character they are playing
		desc = BP_maintenance_events.0001.section_spacer
		desc = BP_maintenance_events.0001.character_description_intro
		desc = BP_maintenance_events.0001.character_description
		#Tell players about rules
		desc = BP_maintenance_events.0001.section_spacer
		#Vanilla Overwrites
		desc = BP_maintenance_events.0001.desc.wtwsms_vanilla_change_info
		triggered_desc = {
			trigger = { has_game_rule = strict_regional_heresy }
			desc = BP_maintenance_events.0001.desc.changed_default_heresy_status
		}
		triggered_desc = {
			trigger = { has_game_rule = bp_default_culture_conversion_speed }
			desc = BP_maintenance_events.0001.desc.changed_default_faith_conversion_speed
		}
		triggered_desc = {
			trigger = { has_game_rule = bp_default_faith_conversion_speed }
			desc = BP_maintenance_events.0001.desc.changed_default_culture_conversion_speed
		}
		triggered_desc = {
			trigger = { has_game_rule = bp_default_hybrid_and_divergence_cooldowns }
			desc = BP_maintenance_events.0001.desc.changed_default_culture_hybrid_divergence_rate
		}
		desc = BP_maintenance_events.0001.sub_section_spacer
		#WtWSMS Special Rules
		desc = BP_maintenance_events.0001.desc.wtwsms_rule_intro
		triggered_desc = {
			trigger = { has_game_rule = tribal_shatter_mechanic_enabled }
			desc = BP_maintenance_events.0001.desc.tribal_shatter
		}
		triggered_desc = {
			trigger = { has_game_rule = bp_strong_believers_conversion_resistance }
			desc = BP_maintenance_events.0001.desc.strong_believers
		}
		triggered_desc = {
			trigger = { has_game_rule = custom_kingdom_creation_blocked_for_specific_cases_enabled }
			desc = BP_maintenance_events.0001.desc.custom_kingdoms_empires
		}
		triggered_desc = {
			trigger = { has_game_rule = can_not_freely_create_empires }
			desc = BP_maintenance_events.0001.desc.can_not_freely_create_empires
		}
		### Titular Restrictions
		triggered_desc = {
			trigger = { has_game_rule = titular_titles_restricted }
			desc = BP_maintenance_events.0001.desc.titular_title_restrictions
		}
		triggered_desc = {
			trigger = { has_game_rule = ai_only_titular_titles_restricted }
			desc = BP_maintenance_events.0001.desc.ai_only_titular_titles_restricted
		}
		desc = BP_maintenance_events.0001.sub_section_spacer
		desc = BP_maintenance_events.0001.desc.rule_closing
	}
	right_portrait = { character = ROOT }
	
	option = { name = BP_maintenance_events.0001.a }
}

#Fix issues with governments of baronies at start (Feudal must die!)
BP_maintenance_events.0002 = {
	scope = none
	hidden = yes
	
	immediate = {
		every_barony = {
			limit = { this = { is_capital_barony = no } }
			if = {
				limit = {
					OR = {
						this.title_province = { has_holding_type = castle_holding }
						AND = {
							this.title_province = { has_holding_type = city_holding }
							OR = {
								this.county.holder = { has_bureaucratic_government_type_trigger = yes }
								this.county.holder = { has_government = subroman_government }
							}
						}
						AND = {
							this.title_province = { has_holding_type = church_holding }
							this.holder.faith = { has_doctrine = doctrine_theocracy_lay_clergy }
						}
					}
				}
				#Vanilla Governments
				if = {
					limit = { this.county.holder = { has_government = tribal_government } }
					this.holder = { convert_realm_to_tribal_effect = yes }
				}
				else_if = { #NB: Causes singular "illegal_government" error in 476 start
					limit = { this.county.holder = { has_government = republic_government } }
					this.holder = { convert_realm_to_republic_effect = yes }
				}
				else_if = {
					limit = { this.county.holder = { has_government = theocracy_government } }
					this.holder = { convert_realm_to_theocracy_effect = yes }
				}
				#BP Governments
				else_if = {
					limit = { this.county.holder = { has_government = high_tribal_government } }
					this.holder = { convert_realm_to_high_tribal_effect = yes }
				}
				else_if = {
					limit = { this.county.holder = { has_government = prefeudal_government } }
					this.holder = { convert_realm_to_prefeudal_effect = yes }
				}
				else_if = {
					limit = { this.county.holder = { has_government = nomad_government } }
					this.holder = { convert_realm_to_nomad_effect = yes }
				}
				else_if = {
					limit = { this.county.holder = { has_government = subroman_government } }
					this.holder = { convert_realm_to_subroman_direct_effect = yes }
				}
				else_if = {
					limit = { this.county.holder = { has_government = eranshar_government } }
					this.holder = { convert_realm_to_eranshar_effect = yes }
				}
				else_if = {
					limit = { this.county.holder = { has_government = rajamandala_government } }
					this.holder = { convert_realm_to_gupta_effect = yes }
				}
				else_if = {
					limit = { this.county.holder = { has_bureaucratic_government_type_trigger = yes } }
					this.holder = { convert_realm_to_gubernatorial_effect = yes }
				}
			}
		}
	}
}

#Does things for 476.2.2 game start
BP_maintenance_events.0100 = {
	scope = none
	hidden = yes
	
	immediate = {
		#Make Romulus Augustulus' Diarchy entrenched and give him senatorial approval
		character:96055 = {
			update_diarchy_swing_with_perspective_effect = {
				SWING = 80
				LIEGE = character:96054
			}
		}
		character:96054 = { update_all_senate_opinion_about_character_effect = { ACTOR = character:96054 } }
		#Give Basilicos Senatorial approval
		character:145226 = { update_all_senate_opinion_about_character_effect = { ACTOR = character:145226 } }
	}
}
