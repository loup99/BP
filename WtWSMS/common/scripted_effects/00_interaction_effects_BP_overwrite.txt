##### Changed from Vanilla: Added intersection of revocation and Senate interaction
revoke_title_interaction_effect = {
	if = {
		limit = {
			scope:recipient = {
				faith = scope:actor.faith
				government_has_flag = government_is_theocracy
			}
			NOT = { scope:actor = scope:actor.faith.religious_head } #No loss if actor is head of faith themselves
		}
		scope:actor = {
			add_piety = major_piety_loss
		}
		if = {
			limit = {
				exists = scope:actor.faith.religious_head
			}
			scope:actor.faith.religious_head = {
				add_opinion = {
					target = scope:actor
					modifier = impious_opinion
					opinion = -20
				}
			}
		}
	}
	if = {
		limit = {
			exists = scope:actor.faith.religious_head
			scope:recipient = scope:actor.faith.religious_head
		}
		scope:actor = {
			add_piety_level = -2
		}
	}
	if = {
		limit = {
			scope:landed_title.tier != tier_barony
		}
		scope:actor = {
			revocation_tyranny_effect = { VASSAL = scope:recipient }
			title_revocation_stress_effect = { VASSAL = scope:recipient }
			consume_revoke_title_reason = scope:recipient
		}
		scope:recipient = {
			if = {
				limit = {
					NOT = { exists = scope:administrative_revocation }
					is_landed_or_landless_administrative = no
				}
				add_pressed_claim = scope:landed_title
			}
			if = {
				limit = {
					is_a_faction_member = yes
				}
				add_joined_faction_discontent = 25
			}
		}

		if = {
			limit = { scope:landed_title.tier = tier_county }
			scope:landed_title = {
				change_county_control = {
					value = -30
					if = {
						limit = {
							NOT = { scope:recipient.culture = scope:actor.culture }
							scope:recipient.culture = this.culture
						}
						multiply = 1.5
					}
					if = {
						limit = {
							NOT = { scope:recipient.faith = scope:actor.faith }
							scope:recipient.faith = this.faith
						}
						multiply = 1.5
					}
				}
			}
		}

		if = {
			limit = {
				scope:actor.culture = { has_cultural_parameter = penalty_for_revoking_titles_from_house_members }
				exists = scope:actor.house
				exists = scope:recipient.house
				scope:actor.house = scope:recipient.house
			}
			if = {
				limit = {
					scope:landed_title.tier = tier_county
				}
				scope:actor = {
					add_prestige = medium_prestige_loss
				}
			}
			else_if = {
				limit = {
					scope:landed_title.tier = tier_duchy
				}
				scope:actor = {
					add_prestige = major_prestige_loss
				}
			}
			else_if = { #Empire
				limit = {
					scope:landed_title.tier = tier_kingdom
				}
				scope:actor = {
					add_prestige = massive_prestige_loss
				}
			}
		}

		if = {
			limit = {
				scope:actor.culture = { has_cultural_parameter = penalty_for_revoking_titles_from_close_family }
				exists = scope:actor
				exists = scope:recipient
				scope:actor = {
					is_close_family_of = scope:recipient
				}
			}
			if = {
				limit = {
					scope:landed_title.tier = tier_county
				}
				scope:actor = {
					add_prestige = medium_prestige_loss
				}
			}
			else_if = {
				limit = {
					scope:landed_title.tier = tier_duchy
				}
				scope:actor = {
					add_prestige = major_prestige_loss
				}
			}
			else_if = { #Empire
				limit = {
					scope:landed_title.tier = tier_kingdom
				}
				scope:actor = {
					add_prestige = massive_prestige_loss
				}
			}
		}

		if = {
			limit = {
				scope:actor.culture = { has_cultural_parameter = piety_penalty_for_revoking_titles_from_house_members }
				exists = scope:actor.house
				exists = scope:recipient.house
				scope:actor.house = scope:recipient.house
			}
			if = {
				limit = {
					scope:landed_title.tier = tier_county
				}
				scope:actor = {
					add_piety = medium_piety_loss
				}
			}
			else_if = {
				limit = {
					scope:landed_title.tier = tier_duchy
				}
				scope:actor = {
					add_piety = major_piety_loss
				}
			}
			else = { #Can't revoke empire titles anyway
				limit = {
					scope:landed_title.tier = tier_kingdom
				}
				scope:actor = {
					add_piety = massive_piety_loss
				}
			}
		}
		
		# If we're a clan this interaction affects unity
		if = {
			limit = {
				scope:actor = { government_has_flag = government_is_clan }
				scope:recipient = { government_has_flag = government_is_clan }
				exists = scope:actor.house
				exists = scope:recipient.house
				scope:actor.house = scope:recipient.house
				scope:landed_title.tier >= tier_county
			}
			scope:actor.house = {
				if = {
					limit = {
						scope:landed_title.tier = tier_county
					}
					save_scope_value_as = {
						name = revoke_title_unity_loss
						value = minor_unity_loss
					}
				}
				if = {
					limit = {
						scope:landed_title.tier = tier_duchy
					}
					save_scope_value_as = {
						name = revoke_title_unity_loss
						value = medium_unity_loss
					}
				}
				else_if = {
					limit = {
						scope:landed_title.tier = tier_kingdom
					}
					save_scope_value_as = {
						name = revoke_title_unity_loss
						value = major_unity_loss
					}
				}
				if = {
					limit = { exists = scope:revoke_title_unity_loss }
					add_clan_unity_interaction_effect = {
						CHARACTER = scope:actor
						TARGET = scope:recipient
						VALUE = scope:revoke_title_unity_loss
						DESC = clan_unity_title_revoked.desc
						REVERSE_NON_HOUSE_TARGET = no
					}
				}
			}
		}
		
		# EP3 - Become Adventurer - Revocation
		scope:recipient = {
			if = {
				limit = {
					has_ep3_dlc_trigger = yes
					is_valid_for_laampdom = yes
				}
				# Plus for our memory variable.
				primary_title = { save_scope_as = lost_primary_title }
				custom_tooltip = {
					text = laamp_may_become_adventurer_tt
					trigger_event = {
						id = ep3_laamps.0041
						delayed = yes
					}
				}
			}
		}
	}
	else = {
		if = {
			limit = {
				NOT = { exists = scope:revoke_title_interaction }
			}
			custom_tooltip = IS_ALLOWED_TO_REVOKE_TITLE_BARONY_DESC
			scope:actor = {
				if = {
					limit = {
						any_vassal = {
							has_vassal_stance = barons_and_minor_landholders
						}
					}
					custom_tooltip = barons_and_minor_landholders_disapproves_baron_revocations
					hidden_effect = {
						every_vassal = {
							limit = {
								has_vassal_stance = barons_and_minor_landholders
							}
							add_opinion = {
								target = scope:actor
								modifier = barons_and_minor_landholders_disapproves_baron_revocations_opinion
							}
						}
					}
				}
			}
		}
	}


	scope:actor = {
		if = {
			limit = {
				scope:hook = yes
				scope:recipient = { is_alive = yes }
			}
			use_hook = scope:recipient
		}
		if = {
			limit = {
				scope:hook_liege ?= yes
				scope:intermediary = { is_alive = yes }
			}
			use_hook = scope:intermediary
		}
	}
	scope:recipient = {
		add_opinion = {
			target = scope:actor
			modifier = revoked_title
		}
		if = { #If they recently imprisoned you, or asked for your excommunication, they become your rival
			limit = {
				OR = {
					has_opinion_modifier = {
						target = scope:actor
						modifier = released_from_prison
					}
					AND = {
						exists = var:requested_my_excommunication
						var:requested_my_excommunication = scope:actor
					}
				}
				NOT = {
					has_relation_rival = scope:actor
				}
			}
			if = {
				limit = {
					has_relation_potential_rival = scope:actor
				}
				remove_relation_potential_rival = scope:actor
			}
			set_relation_rival = {
				target = scope:actor
				reason = rival_revoked_title_reversed
			}
		}
		else = {
			progress_towards_rival_effect = {
				CHARACTER = scope:actor
				REASON = rival_revoked_title_progress
				OPINION = 0
			}
		}
	}

	# Penalty for taking the Party Baron's last title. I mean, come on...
	if = {
		limit = {
			scope:recipient = {
				has_character_flag = is_party_baron
				NOT = {
					any_held_title = {
						NOT = { this = scope:landed_title }
					}
				}
			}
		}
		scope:actor = {
			add_character_modifier = {
				modifier = party_baron_ended_the_party_modifier
				years = 10
			}
			random_owned_story = {
				limit = {
					story_type = story_party_baron
				}
				end_story = yes
			}
		}
	}
	##### Changed from Vanilla vvvvv
	if = { #If you are unlanding a (barony) Senator unjustly, the Senate is mad
		limit = {
			scope:actor = { title_revocation_is_tyrannical_trigger = { VASSAL = scope:recipient } }
			scope:recipient.primary_title.tier = tier_barony
			scope:recipient = { has_trait = senator_west }
			scope:recipient = { character_is_in_senate_west_trigger = yes }
			scope:actor = { character_is_in_senate_west_trigger = yes }
		}
		senate_revoke_title_opinion_effect = { REGION = west }
	}
	if = { #If you are unlanding a (barony) Senator unjustly, the Senate is mad
		limit = {
			scope:actor = { title_revocation_is_tyrannical_trigger = { VASSAL = scope:recipient } }
			scope:recipient.primary_title.tier = tier_barony
			scope:recipient = { has_trait = senator_east }
			scope:recipient = { character_is_in_senate_east_trigger = yes }
			scope:actor = { character_is_in_senate_east_trigger = yes }
		}
		senate_revoke_title_opinion_effect = { REGION = east }
	}
	##### Changed from Vanilla ^^^^^
}

##### Changed from Vanilla: Added intersection of revocation tyranny and Iranian_Dynastic Government
revocation_tyranny_effect = {
	save_scope_as = liege_temp_scope
	if = {
		limit = { exists = scope:use_strife_not_tyranny }
		# If you have revocation reason, we allow that.
		if = {
			limit = { has_revoke_title_reason = $VASSAL$ }
			consume_revoke_title_reason = $VASSAL$
		}
		else = { change_strife_opinion = major_strife_gain }
	}
	##### Changed from Vanilla vvvvv
	else_if = {
		limit = {
			scope:liege_temp_scope = { government_has_flag = government_uses_iranian_dynastic_authority }
			$VASSAL$ = { government_has_flag = government_uses_iranian_dynastic_authority }
			$VASSAL$ = { vassal_contract_has_flag = title_revocation_increased_tyranny }
		}
		if = {
			limit = { scope:liege_temp_scope = { has_realm_law_flag = title_revocation_wuzurgan_massive_tyranny } }
			if = {
				limit = { title_revocation_is_tyrannical_trigger = { VASSAL = $VASSAL$ } }
				add_tyranny = revoke_wuzurgan_tyranny_gain_massive
			}
			else = { add_tyranny = revoke_wuzurgan_tyranny_gain_massive_half }
		}
		else_if = {
			limit = { scope:liege_temp_scope = { has_realm_law_flag = title_revocation_wuzurgan_major_tyranny } }
			if = {
				limit = { title_revocation_is_tyrannical_trigger = { VASSAL = $VASSAL$ } }
				add_tyranny = revoke_wuzurgan_tyranny_gain_major
			}
			else = { add_tyranny = revoke_wuzurgan_tyranny_gain_major_half }
		}
		else_if = {
			limit = { scope:liege_temp_scope = { has_realm_law_flag = title_revocation_wuzurgan_moderate_tyranny } }
			if = {
				limit = { title_revocation_is_tyrannical_trigger = { VASSAL = $VASSAL$ } }
				add_tyranny = revoke_wuzurgan_tyranny_gain_moderate
			}
			else = { add_tyranny = revoke_wuzurgan_tyranny_gain_moderate_half }
		}
		else_if = {
			limit = { scope:liege_temp_scope = { has_realm_law_flag = title_revocation_wuzurgan_minimal_tyranny } }
			if = {
				limit = { title_revocation_is_tyrannical_trigger = { VASSAL = $VASSAL$ } }
				add_tyranny = revoke_wuzurgan_tyranny_gain_minimal
			}
			else = { add_tyranny = revoke_wuzurgan_tyranny_gain_minimal_half }
		}
	}
	##### Changed from Vanilla ^^^^^
	else_if = {
		limit = {
			title_revocation_is_tyrannical_trigger = { VASSAL = $VASSAL$ }
		}
		add_tyranny = revoke_title_tyranny_gain
		# Special Legitimacy loss if you're revoking without a reason
		if = {
			limit = {
				has_legitimacy = yes
				NOT = {
					scope:landed_title ?= {
						duchy = scope:liege_temp_scope.capital_county.duchy
					}
				}
			}
			add_legitimacy = medium_legitimacy_loss
		}

		#If my culture is different from the recipients
		if = {
			limit = {
				NOT = { culture = $VASSAL$.culture }
			}
			$VASSAL$.culture = {
				change_cultural_acceptance = {
					target = scope:liege_temp_scope.culture
					value = revoke_title_culture_acceptance_impact
					desc = cultural_acceptance_loss_revokation
				}
			}
		}
	}
	else = {
		if = {
			limit = {
				title_revocation_is_admin_governor_trigger = { VASSAL = $VASSAL$ }
			}
			custom_description = {
				text = IS_ALLOWED_TO_REVOKE_ADMIN_GOVERNMENT
				subject = scope:liege_temp_scope
				object = $VASSAL$
			}
		}
		else_if = {
			limit = {
				exists = scope:landed_title
				has_claim_on = scope:landed_title
			}
			custom_tooltip = IS_ALLOWED_TO_REVOKE_TITLE_FOR_CLAIM_DESC
		}
		else_if = {
			limit = {
				has_revoke_title_reason = scope:recipient
			}
			custom_tooltip = IS_ALLOWED_TO_REVOKE_TITLE_DESC
		}
		else_if = {
			limit = {
				faith = {
					OR = {
						has_doctrine_parameter = pluralism_righteous_revocation_tyranny_reduced
						has_doctrine_parameter = pluralism_fundamentalist_revocation_tyranny_minimal
					}
					faith_hostility_level = {
						target = scope:recipient.faith
						value >= faith_hostile_level
					}
				}
			}
			if = {
				limit = {
					faith = {
						has_doctrine_parameter = pluralism_fundamentalist_revocation_tyranny_minimal
						faith_hostility_level = {
							target = scope:recipient.faith
							value = faith_hostile_level
						}
					}
				}
				custom_tooltip = IS_ALLOWED_TO_REVOKE_HOSTILE_INFIDEL_TITLE
			}
			else = {
				custom_tooltip = IS_ALLOWED_TO_REVOKE_EVIL_INFIDEL_TITLE
			}
			every_vassal = {
				limit = {
					faith = scope:recipient.faith
				}
				custom = INFIDEL_REVOCATION_OPINION
				add_opinion = {
					modifier = angry_opinion
					target = scope:actor
					opinion = {
						value = revoke_title_tyranny_gain
						multiply = -1
					}
				}
			}
		}
	}
}

########## Below this line, we've bundled the old vanilla effect (start_tributary_interaction_vanilla_effect)
########## with the new one and the necessary wrapping logic for overall simplicity.

@tributary_truce_negotiated = 5
@tributary_truce_war = 15

# Effect to start a tributary relationship, can be called directly without a war or from start_tributary_from_war_effect
# $TRIBUTARY$ = the new tributary
# $SUZERAIN$ = their suzerain
start_tributary_interaction_effect = {
	if = {
		limit = {
			$SUZERAIN$ = { government_has_flag = government_is_centralized }
			$SUZERAIN$ = { any_neighboring_top_liege_realm = { this.holder.top_liege = $TRIBUTARY$ } }
		}
		start_tributary_interaction_permanent_tributaries_effect = {
			TRIBUTARY = $TRIBUTARY$
			SUZERAIN = $SUZERAIN$
		}
	}
	else = {
		start_tributary_interaction_vanilla_effect = {
			TRIBUTARY = $TRIBUTARY$
			SUZERAIN = $SUZERAIN$
		}
	}
}

# Effect to start a tributary relationship, can be called directly without a war or from start_tributary_from_war_effect
# $TRIBUTARY$ = the new tributary
# $SUZERAIN$ = their suzerain
start_tributary_interaction_vanilla_effect = {

	# Nomadic Tributaries
	if = {
		limit = { $SUZERAIN$ = { has_government = nomad_government } }
		$TRIBUTARY$ = {
			if = {
				limit = {
					OR = {
						has_government = nomad_government
						has_government = herder_government
					}
				}
				start_tributary = {
					contract_group = tributary_nomadic
					suzerain = $SUZERAIN$
				}
			}
			else = {
				start_tributary = {
					contract_group = tributary_settled
					suzerain = $SUZERAIN$
				}
			}

			# Special terms depending on which options were set
			if = { # settled tributary
				limit = {
					NOR = {
						has_government = nomad_government
						has_government = herder_government
					}
				}
				if = {
					limit = { 
						OR = {
							scope:high_obligations ?= yes
							exists = scope:tributary_war
						}
					}
					if = {
						limit = { is_tributary = yes } # suppress error logging
						hidden_effect = {
							tributary_contract_set_obligation_level = { type = default_tributary_taxes level = 2 }
							tributary_contract_set_obligation_level = { type = default_tributary_levies level = 2 }
							tributary_contract_set_obligation_level = { type = default_tributary_prestige level = 2 }
						}
					}
					custom_tooltip = high_tribute_taxes
					custom_tooltip = high_tribute_levies
					custom_tooltip = high_tribute_prestige
				}
				else_if = {
					limit = { scope:low_obligations ?= yes }
					if = {
						limit = { is_tributary = yes } # suppress error logging
						hidden_effect = {
							tributary_contract_set_obligation_level = { type = default_tributary_taxes level = 0 }
							tributary_contract_set_obligation_level = { type = default_tributary_levies level = 0 }
							tributary_contract_set_obligation_level = { type = default_tributary_prestige level = 0 }
						}
					}
					custom_tooltip = low_tribute_taxes
					custom_tooltip = low_tribute_levies
					custom_tooltip = none_tribute_prestige
				}
				else = {
					if = {
						limit = { is_tributary = yes } # suppress error logging
						hidden_effect = {
							tributary_contract_set_obligation_level = { type = default_tributary_taxes level = 1 }
							tributary_contract_set_obligation_level = { type = default_tributary_levies level = 1 }
							tributary_contract_set_obligation_level = { type = default_tributary_prestige level = 1 }
						}
					}
					custom_tooltip = normal_tribute_taxes
					custom_tooltip = normal_tribute_levies
					custom_tooltip = normal_tribute_prestige
				}
			}
			else = { # nomadic tributary
				if = {
					limit = { 
						OR = {
							scope:high_obligations ?= yes
							exists = scope:tributary_war
						}
					}
					if = {
						limit = { is_tributary = yes } # suppress error logging
						hidden_effect = {
							tributary_contract_set_obligation_level = { type = nomad_government_herd level = 3 } #herd_tax_high
							tributary_contract_set_obligation_level = { type = nomad_government_prestige level = 2 }
						}
					}
					custom_tooltip = high_tribute_herd
					custom_tooltip = high_tribute_prestige
				}
				else_if = {
					limit = { scope:low_obligations ?= yes }
					if = {
						limit = { is_tributary = yes } # suppress error logging
						hidden_effect = {
							tributary_contract_set_obligation_level = { type = nomad_government_herd level = 1 } #herd_tax_low
							tributary_contract_set_obligation_level = { type = nomad_government_prestige level = 0 }
						}
					}
					custom_tooltip = low_tribute_herd
					custom_tooltip = none_tribute_prestige
				}
				else = {
					if = {
						limit = { is_tributary = yes } # suppress error logging
						hidden_effect = {
							tributary_contract_set_obligation_level = { type = nomad_government_herd level = 2 } #herd_tax_normal
							tributary_contract_set_obligation_level = { type = nomad_government_prestige level = 1 }
						}
					}
					custom_tooltip = normal_tribute_herd
					custom_tooltip = normal_tribute_prestige
				}
			}
			if = {
				limit = { is_tributary = yes } # suppress error logging
				tributary_contract_set_obligation_level = { type = suzerain_war_participation_guarantee level = 0 }
				tributary_contract_set_obligation_level = { type = tributary_war_participation_obligation level = 0 }
				custom_tooltip = no_tributary_war_obligations
				custom_tooltip = no_suzerain_guarantee
			}
		}
	}
	else = { # subjugated tributary
		$TRIBUTARY$ = {
			start_tributary = {
				contract_group = tributary_subjugated
				suzerain = $SUZERAIN$
			}
			if = {
				limit = { scope:low_obligations ?= yes }
				if = {
					limit = { is_tributary = yes } # suppress error logging
					hidden_effect = {
						tributary_contract_set_obligation_level = { type = default_tributary_taxes level = 1 }
						tributary_contract_set_obligation_level = { type = default_tributary_prestige level = 0 }
					}
				}
				custom_tooltip = low_tribute_taxes
				custom_tooltip = none_tribute_prestige
			}
			else = {
				if = {
					limit = { is_tributary = yes } # suppress error logging
					hidden_effect = {
						tributary_contract_set_obligation_level = { type = default_tributary_taxes level = 2 }
						tributary_contract_set_obligation_level = { type = default_tributary_prestige level = 1 }
					}
				}
				custom_tooltip = high_tribute_taxes
				custom_tooltip = normal_tribute_prestige
			}
			if = {
				limit = { is_tributary = yes } # suppress error logging
				hidden_effect = {
					tributary_contract_set_obligation_level = { type = suzerain_war_participation_guarantee level = 1 }
					tributary_contract_set_obligation_level = { type = tributary_war_participation_obligation level = 0 }
				}
			}
			custom_tooltip = suzerain_guarantee
			custom_tooltip = no_tributary_war_obligations
		}
	}

	# Setup truces depending on how the tributary relationship was created
	$TRIBUTARY$ = {save_scope_as = tributary_loc }
	$SUZERAIN$ = { save_scope_as = suzerain_loc }
	if = {
		limit = { exists = scope:tributary_war } # this will exist if invoked from start_tributary_from_war_effect
		$TRIBUTARY$ = {
			add_truce_one_way = {
				character = $SUZERAIN$
				years = @[tributary_truce_war]
				war = scope:tributary_war
				result = defeat
			}
		}
	}
	else = {
		$TRIBUTARY$ = {
			add_truce_both_ways = {
				character = $SUZERAIN$
				years = @[tributary_truce_negotiated]
				name = TRUCE_TRIBUTARY
			}
		}
	}
}

start_tributary_interaction_permanent_tributaries_effect = {

	$TRIBUTARY$ = {
		if = {
			limit = { this = { government_has_flag = government_is_tribal } }
			start_tributary = {
				contract_group = BP_tribal_fixed_tributary
				suzerain = $SUZERAIN$
			}
			add_character_flag = tribal_tributary_flag
		}
		else = {
			start_tributary = {
				contract_group = BP_fixed_tributary
				suzerain = $SUZERAIN$
			}
		}
		if = {
			limit = { scope:low_obligations ?= yes }
			if = {
				limit = { is_tributary = yes } # suppress error logging
				hidden_effect = {
					if = {
						limit = { has_character_flag = tribal_tributary_flag }
						tributary_contract_set_obligation_level = { type = default_tributary_levies level = 1 }
					}
					else = {
						tributary_contract_set_obligation_level = { type = default_tributary_taxes level = 1 }
					}
					tributary_contract_set_obligation_level = { type = default_tributary_prestige level = 0 }
				}
			}
			custom_tooltip = low_tribute_taxes
			custom_tooltip = none_tribute_prestige
		}
		else = {
			if = {
				limit = { is_tributary = yes } # suppress error logging
				hidden_effect = {
					if = {
						limit = { has_character_flag = tribal_tributary_flag }
						tributary_contract_set_obligation_level = { type = default_tributary_levies level = 2 }
					}
					else = {
						tributary_contract_set_obligation_level = { type = default_tributary_taxes level = 2 }
					}
					tributary_contract_set_obligation_level = { type = default_tributary_prestige level = 1 }
				}
			}
			custom_tooltip = high_tribute_taxes
			custom_tooltip = normal_tribute_prestige
		}
		if = {
			limit = { is_tributary = yes } # suppress error logging
			hidden_effect = {
				tributary_contract_set_obligation_level = { type = suzerain_war_participation_guarantee level = 1 }
				tributary_contract_set_obligation_level = { type = tributary_war_participation_obligation level = 0 }
			}
		}
		custom_tooltip = suzerain_guarantee
		custom_tooltip = no_tributary_war_obligations
		
		remove_character_flag = tribal_tributary_flag
	}

	# Setup truces depending on how the tributary relationship was created
	$TRIBUTARY$ = {save_scope_as = tributary_loc }
	$SUZERAIN$ = { save_scope_as = suzerain_loc }
	if = {
		limit = { exists = scope:tributary_war } # this will exist if invoked from start_tributary_from_war_effect
		$TRIBUTARY$ = {
			add_truce_one_way = {
				character = $SUZERAIN$
				years = @[tributary_truce_war]
				war = scope:tributary_war
				result = defeat
			}
		}
	}
	else = {
		$TRIBUTARY$ = {
			add_truce_both_ways = {
				character = $SUZERAIN$
				years = @[tributary_truce_negotiated]
				name = TRUCE_TRIBUTARY
			}
		}
	}
}
