# scope:source_county
# scope:county
notify_recipient_of_faith_migration_effect = {
	scope:county.holder = {
		add_to_temporary_list = characters_to_notify
		top_liege = {
			if = {
				limit = { is_ai = no }
				add_to_temporary_list = characters_to_notify
			}
			every_vassal_or_below = {
				limit = {
					is_ai = no
					any_sub_realm_county = { this = scope:county }
				}
				add_to_temporary_list = characters_to_notify
			}
		}
	}

	every_in_local_list = {
		list = characters_to_notify

		send_interface_toast = {
			type = event_generic_neutral
			title = minority_faith_appearance_title
			custom_tooltip = minority_faith_appearance_tt
			right_icon = scope:county
		}
	}
}

# scope:source_county
# scope:county
notify_recipient_of_culture_migration_effect = {
	scope:county.holder = {
		add_to_temporary_list = characters_to_notify
		top_liege = {
			if = {
				limit = { is_ai = no }
				add_to_temporary_list = characters_to_notify
			}
			every_vassal_or_below = {
				limit = {
					is_ai = no
					any_sub_realm_county = { this = scope:county }
				}
				add_to_temporary_list = characters_to_notify
			}
		}
	}

	every_in_local_list = {
		list = characters_to_notify

		send_interface_toast = {
			type = event_generic_neutral
			title = minority_culture_appearance_title
			custom_tooltip = minority_culture_appearance_tt
			right_icon = scope:county
		}
	}
}

##### Changed from Vanilla vvvvv

displace_majority_culture_effect = {
	displace_majority_with_minority_effect = {
		CULTURE_OR_FAITH = culture
		TARGET = $CULTURE$
	}
}
displace_majority_faith_effect = {
	displace_majority_with_minority_effect = {
		CULTURE_OR_FAITH = faith
		TARGET = $FAITH$
	}
}

#This is done at a county scope
# $CULTURE_OR_FAITH$: either "culture" or "faith"
demote_least_supported_minority_in_county_effect = {
	$THE_COUNTY$ = { save_scope_as = the_county }
	$THE_COUNTY$ = {
		if = {
			limit = { has_variable_list = $CULTURE_OR_FAITH$_minorities_small }
			every_in_list = { variable = $CULTURE_OR_FAITH$_minorities_small add_to_temporary_list = potential_items }
		}
		if = {
			limit = { has_variable_list = $CULTURE_OR_FAITH$_minorities_large }
			every_in_list = { variable = $CULTURE_OR_FAITH$_minorities_large add_to_temporary_list = potential_items }
		}
		
		ordered_in_list = {
			list = potential_items
			order_by = support_of_a_$CULTURE_OR_FAITH$_minority_in_county
			position = 0
			save_scope_as = item_to_demote
		}
		
		if = {
			limit = { exists = scope:item_to_demote }
			demote_minority_effect = { CULTURE_OR_FAITH = $CULTURE_OR_FAITH$ ITEM = scope:item_to_demote }
			notify_characters_of_minority_reduction_effect = {
				THE_TARGET_COUNTY = $THE_COUNTY$
				CULTURE_OR_FAITH = $CULTURE_OR_FAITH$
			}
		}
	}
}
#This is done at a county scope
# $CULTURE_OR_FAITH$: either "culture" or "faith"
demote_an_underfed_minority_in_county_effect = {
	$THE_COUNTY$ = { save_scope_as = the_county }
	$THE_COUNTY$ = {
		if = {
			limit = { has_variable_list = $CULTURE_OR_FAITH$_minorities_small }
			every_in_list = { variable = $CULTURE_OR_FAITH$_minorities_small add_to_temporary_list = potential_items }
		}
		if = {
			limit = { has_variable_list = $CULTURE_OR_FAITH$_minorities_large }
			every_in_list = { variable = $CULTURE_OR_FAITH$_minorities_large add_to_temporary_list = potential_items }
		}
		
		#Find every underfed_minority
		every_in_list = {
			list = potential_items
			if = {
				limit = { feeding_of_a_$CULTURE_OR_FAITH$_minority_in_county > 0 }
				add_to_temporary_list = underfed_minority
			}
		}
		
		#Pick the least supported minority
		ordered_in_list = {
			list = underfed_minority
			order_by = support_of_a_$CULTURE_OR_FAITH$_minority_in_county
			position = 0
			save_scope_as = item_to_demote
		}
		if = {
			limit = { exists = scope:item_to_demote }
			demote_minority_effect = { CULTURE_OR_FAITH = $CULTURE_OR_FAITH$ ITEM = scope:item_to_demote }
			notify_characters_of_minority_reduction_effect = {
				THE_TARGET_COUNTY = $THE_COUNTY$
				CULTURE_OR_FAITH = $CULTURE_OR_FAITH$
			}
		}
	}
}
#Requires scope:target_county
inward_immigration_effect = {
	$THE_TARGET_COUNTY$ = { save_scope_as = the_county }
	$THE_TARGET_COUNTY$ = {
		random_neighboring_county = {
			limit = {
				NOT = { culture = scope:target_county.culture }
				NOT = { faith = scope:target_county.faith }
				valid_neighbor_immigration_state_trigger = yes
			}
			this = { save_scope_as = source_county }
		}
		#Carry out immigration iff it has some *actual* effect (as in, at least one of 
		#the source's culture/faith is not large
		if = {
			limit = {
				exists = scope:source_county
				#AKA, at least one of large faith/culture minorities must not have the 
				#source county's faith/culture
				OR = {
					county_has_a_minority_with_type_and_size_trigger = {
						CULTURE_OR_FAITH = culture
						SIZE = large
						TARGET = scope:source_county.culture
					}
					county_has_a_minority_with_type_and_size_trigger = {
						CULTURE_OR_FAITH = faith
						SIZE = large
						TARGET = scope:source_county.faith
					}
				}
			}
			promote_minority_but_not_to_majority_effect = {
				ITEM = scope:source_county.faith
				CULTURE_OR_FAITH = faith
			}
			promote_minority_but_not_to_majority_effect = {
				ITEM = scope:source_county.culture
				CULTURE_OR_FAITH = culture
			}
			notify_characters_of_minority_immigration_effect = {
				THE_SOURCE_COUNTY = scope:source_county
				THE_TARGET_COUNTY = $THE_TARGET_COUNTY$
				EVENT_TITLE = minority_immigration_title
				EVENT_TOOLTIP = minority_immigration_tt
			}
		}
	}
}
#Requires scope:source_county
outward_immigration_effect = {
	$SOURCE_COUNTY$ = {
		random_neighboring_county = {
			limit = {
				NAND = {
					this.culture = scope:source_county.culture
					this.faith = scope:source_county.faith
				}
			}
			this = { save_scope_as = target_county }
		}
	}
	
	if = {
		limit = { exists = scope:target_county }
		#Odds of immigration actually happening depends on differential in county development
		#
		# Assuming no minorities to start and the same county is picked each time, the weighting is such that:
		# A 100 point development differential will likely flip the target in around 30-50 years (1-2 Generations)
		# A 50 point development differential will likely flip the target in 60-100 years (3-5 Generations)
		# A 20 point development differential will likely flip the target in around 100-150 years (6-8 Generations)
		random = {
			chance = 100
			modifier = {
				factor = 0.90
				$SOURCE_COUNTY$.development_level.compare_value < {
					value = scope:target_county.development_level
					add = 90
				}
			}
			modifier = {
				factor = 0.80
				$SOURCE_COUNTY$.development_level.compare_value < {
					value = scope:target_county.development_level
					add = 80
				}
			}
			modifier = {
				factor = 0.70
				$SOURCE_COUNTY$.development_level.compare_value < {
					value = scope:target_county.development_level
					add = 70
				}
			}
			modifier = {
				factor = 0.60
				$SOURCE_COUNTY$.development_level.compare_value < {
					value = scope:target_county.development_level
					add = 60
				}
			}
			modifier = {
				factor = 0.50
				$SOURCE_COUNTY$.development_level.compare_value < {
					value = scope:target_county.development_level
					add = 50
				}
			}
			modifier = {
				factor = 0.40
				$SOURCE_COUNTY$.development_level.compare_value < {
					value = scope:target_county.development_level
					add = 40
				}
			}
			modifier = {
				factor = 0.30
				$SOURCE_COUNTY$.development_level.compare_value < {
					value = scope:target_county.development_level
					add = 30
				}
			}
			modifier = {
				factor = 0.20
				$SOURCE_COUNTY$.development_level.compare_value < {
					value = scope:target_county.development_level
					add = 20
				}
			}
			modifier = {
				factor = 0.10
				$SOURCE_COUNTY$.development_level.compare_value < {
					value = scope:target_county.development_level
					add = 10
				}
			}
			modifier = {
				factor = 0
				$SOURCE_COUNTY$.development_level.compare_value < scope:target_county.development_level
			}
			### Actual immigration effect here ###
			scope:target_county = {
				this.faith = { save_scope_as = old_faith }
				this.culture = { save_scope_as = old_culture }
				promote_minority_effect = { CULTURE_OR_FAITH = culture ITEM = $SOURCE_COUNTY$.culture }
				promote_minority_effect = { CULTURE_OR_FAITH = faith ITEM = $SOURCE_COUNTY$.faith }
			}
			#Determine the message to use
			if = {
				limit = {
					OR = {
						$SOURCE_COUNTY$.culture = scope:target_county.culture
						$SOURCE_COUNTY$.faith = scope:target_county.faith
					}
				}
				notify_characters_of_county_change_immigration_effect = {
					THE_SOURCE_COUNTY = $SOURCE_COUNTY$
					THE_TARGET_COUNTY = scope:target_county
				}
			}
			else = {
				notify_characters_of_minority_immigration_effect = {
					THE_SOURCE_COUNTY = $SOURCE_COUNTY$
					THE_TARGET_COUNTY = scope:target_county
					EVENT_TITLE = minority_immigration_title
					EVENT_TOOLTIP = minority_immigration_tt
				}
			}
		}
	}
}
minority_growth_effect = {
	$SOURCE_COUNTY$ = { save_scope_as = the_county }
	$SOURCE_COUNTY$ = {
		#Growth implies that it could flip naturally, so include the actual counties culture/faith as well
		this.$CULTURE_OR_FAITH$ = { add_to_temporary_list = growing_minority }
		if = {
			limit = { has_variable_list = $CULTURE_OR_FAITH$_minorities_small }
			every_in_list = { variable = $CULTURE_OR_FAITH$_minorities_small add_to_temporary_list = potential_items }
		}
		if = {
			limit = { has_variable_list = $CULTURE_OR_FAITH$_minorities_large }
			every_in_list = { variable = $CULTURE_OR_FAITH$_minorities_large add_to_temporary_list = potential_items }
		}
		
		#Get only the minorities that are growing
		every_in_list = {
			list = potential_items
			if = {
				limit = { this.support_of_a_$CULTURE_OR_FAITH$_minority_in_county < 0 }
				add_to_temporary_list = growing_minority
			}
		}
		
		#Get the fastest growing minority
		ordered_in_list = {
			list = growing_minority
			order_by = support_of_a_$CULTURE_OR_FAITH$_minority_in_county
			position = 0
			save_scope_as = candidate_minority_to_promote
		}
		#Only do something if the list is non-empty
		if = {
			limit = { exists = scope:candidate_minority_to_promote }
			#If the fastest growing minority **is** the majority, we remove it from the list and
			# pick again, using promote_minority_but_not_to_majority_effect; otherwise use 
			# promote_minority_effect (conditions have changed that the minority should flip this time)
			if = {
				limit = { $SOURCE_COUNTY$.$CULTURE_OR_FAITH$ = scope:candidate_minority_to_promote }
				scope:candidate_minority_to_promote = { remove_from_list = growing_minority }
				ordered_in_list = {
					list = growing_minority
					order_by = support_of_a_$CULTURE_OR_FAITH$_minority_in_county
					position = 0
					save_scope_as = candidate_minority_to_promote
				}
				promote_minority_but_not_to_majority_effect = {
					CULTURE_OR_FAITH = $CULTURE_OR_FAITH$
					ITEM = scope:candidate_minority_to_promote
				}
				notify_characters_of_minority_growth_effect = {
					THE_SOURCE_COUNTY = $SOURCE_COUNTY$
					EVENT_TITLE = minority_$CULTURE_OR_FAITH$_growing_title
					EVENT_TOOLTIP = minority_$CULTURE_OR_FAITH$_growing_tt
				}
			}
			else = {
				this.culture = { save_scope_as = old_culture }
				this.faith = { save_scope_as = old_faith }
				promote_minority_effect = {
					CULTURE_OR_FAITH = $CULTURE_OR_FAITH$
					ITEM = scope:candidate_minority_to_promote
				}
				notify_characters_of_county_change_growth_effect = { THE_SOURCE_COUNTY = $SOURCE_COUNTY$ }
			}
		#else, do nothing (growing_minority list is empty)
		}
	}
}
#Requires scope:source_county
evangelization_effect = {
	$SOURCE_COUNTY$ = {
		if = {
			limit = {
				any_neighboring_county = {
					NOT = { faith = $SOURCE_COUNTY$.faith }
					faith = { is_valid_evangelizing_target_faith_trigger = yes }
				}
			}
			random_neighboring_county = {
				limit = {
					NOT = { faith = $SOURCE_COUNTY$.faith }
					faith = { is_valid_evangelizing_target_faith_trigger = yes }
				}
				### WtWSMS Autocephaly Weights vvv
				weight = {
					base = 1
					#Autocephaly should restrict targeting
					modifier = {
						factor = 2
						$SOURCE_COUNTY$.faith = { has_doctrine = tenet_autocephaly }
						actor_is_faith_culture_or_child_culture_for_cultural_religions_trigger = {
							ACTOR = this
							TARGET = $SOURCE_COUNTY$
							VARIABLE = church_culture
						}
					}
					modifier = { #Don't commingle autocephalous churches
						factor = 0
						$SOURCE_COUNTY$.faith = { has_doctrine = tenet_autocephaly }
						this.faith = { has_doctrine = tenet_autocephaly }
					}
					modifier = { #Don't proselytize autocephalous churches to unrelated cultures
						factor = 0
						$SOURCE_COUNTY$.faith = { has_doctrine = tenet_autocephaly }
						NOT = {
							actor_is_faith_culture_or_child_culture_for_cultural_religions_trigger = {
								ACTOR = this
								TARGET = $SOURCE_COUNTY$
								VARIABLE = church_culture
							}
						}
					}
				}
				### WtWSMS Autocephaly Weights ^^^
				this = { save_scope_as = target_county }
			}
			#Carry out evangelization
			if = {
				limit = {
					exists = scope:target_county
					NOT = { $SOURCE_COUNTY$.faith = scope:target_county.faith }
				}
				scope:target_county = {
					promote_minority_but_not_to_majority_effect = {
						ITEM = $SOURCE_COUNTY$.faith
						CULTURE_OR_FAITH = faith
					}
					notify_characters_of_minority_immigration_effect = {
						THE_SOURCE_COUNTY = $SOURCE_COUNTY$
						THE_TARGET_COUNTY = scope:target_county
						EVENT_TITLE = minority_faith_evangelization_title
						EVENT_TOOLTIP = minority_faith_evangelization_tt
					}
				}
			}
		}
	}
}
##### Changed from Vanilla ^^^^^