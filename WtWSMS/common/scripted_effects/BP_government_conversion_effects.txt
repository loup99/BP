### Government Conversion Effects
convert_realm_to_general_government_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	change_government = $GOVERNMENT_TYPE$
	if = {
		limit = { NOT = { has_realm_law = $INITIAL_REALM_LAW$ } }
		add_realm_law_skip_effects = $INITIAL_REALM_LAW$
	}
}
apply_subroman_taxation_law_effect = {
	if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$.var:subroman_taxation_id = { compare_value = id_subroman_taxation_0 }
				$THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_taxation_0 }
			}
		}
		add_realm_law_skip_effects = subroman_taxation_0
	}
	else_if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$.var:subroman_taxation_id = { compare_value = id_subroman_taxation_1 }
				$THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_taxation_1 }
			}
		}
		add_realm_law_skip_effects = subroman_taxation_1
	}
	else_if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$.var:subroman_taxation_id = { compare_value = id_subroman_taxation_2 }
				$THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_taxation_2 }
			}
		}
		add_realm_law_skip_effects = subroman_taxation_2
	}
	else_if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$.var:subroman_taxation_id = { compare_value = id_subroman_taxation_3 }
				$THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_taxation_3 }
			}
		}
		add_realm_law_skip_effects = subroman_taxation_3
	}
	#Fallback
	else = { add_realm_law_skip_effects = subroman_taxation_3 }
}
apply_subroman_transition_law_effect = {
	if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$.var:subroman_transition_id = { compare_value = id_subroman_feudal_transition_0 }
				$THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_0 }
			}
		}
		add_realm_law_skip_effects = subroman_feudal_transition_0
	}
	else_if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$.var:subroman_transition_id = { compare_value = id_subroman_feudal_transition_1 }
				$THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_1 }
			}
		}
		add_realm_law_skip_effects = subroman_feudal_transition_1
	}
	else_if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$.var:subroman_transition_id = { compare_value = id_subroman_feudal_transition_2 }
				$THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_2 }
			}
		}
		add_realm_law_skip_effects = subroman_feudal_transition_2
	}
	else_if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$.var:subroman_transition_id = { compare_value = id_subroman_feudal_transition_3 }
				$THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_3 }
			}
		}
		add_realm_law_skip_effects = subroman_feudal_transition_3
	}
	else_if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$.var:subroman_transition_id = { compare_value = id_subroman_feudal_transition_4 }
				$THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_4 }
			}
		}
		add_realm_law_skip_effects = subroman_feudal_transition_4
	}
	else_if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$.var:subroman_transition_id = { compare_value = id_subroman_feudal_transition_5 }
				$THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_5 }
			}
		}
		add_realm_law_skip_effects = subroman_feudal_transition_5
	}
	else_if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$.var:subroman_transition_id = { compare_value = id_subroman_feudal_transition_6 }
				$THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_6 }
			}
		}
		add_realm_law_skip_effects = subroman_feudal_transition_6
	}
	else_if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$.var:subroman_transition_id = { compare_value = id_subroman_feudal_transition_7 }
				$THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_7 }
			}
		}
		add_realm_law_skip_effects = subroman_feudal_transition_7
	}
	else_if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$.var:subroman_transition_id = { compare_value = id_subroman_feudal_transition_8 }
				$THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_8 }
			}
		}
		add_realm_law_skip_effects = subroman_feudal_transition_8
	}
	else_if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$.var:subroman_transition_id = { compare_value = id_subroman_feudal_transition_9 }
				$THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_9 }
			}
		}
		add_realm_law_skip_effects = subroman_feudal_transition_9
	}
	#Fallback
	else = { add_realm_law_skip_effects = subroman_feudal_transition_0 }
}
#Actual effects
convert_realm_to_republic_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	change_government = republic_government
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}
convert_realm_to_theocracy_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	change_government = theocracy_government
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}
convert_realm_to_feudal_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	convert_realm_to_general_government_effect = {
		GOVERNMENT_TYPE = feudal_government
		INITIAL_REALM_LAW = crown_authority_0
	}
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}
convert_realm_to_clan_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	convert_realm_to_general_government_effect = {
		GOVERNMENT_TYPE = clan_government
		INITIAL_REALM_LAW = crown_authority_0
	}
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}
convert_realm_to_tribal_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	convert_realm_to_general_government_effect = {
		GOVERNMENT_TYPE = tribal_government
		INITIAL_REALM_LAW = tribal_authority_0
	}
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}
convert_realm_to_nomad_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	convert_realm_to_general_government_effect = {
		GOVERNMENT_TYPE = nomad_government
		INITIAL_REALM_LAW = tribal_authority_0
	}
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}
convert_realm_to_prefeudal_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	convert_realm_to_general_government_effect = {
		GOVERNMENT_TYPE = prefeudal_government
		INITIAL_REALM_LAW = prefeudal_authority_0
	}
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}
convert_realm_to_gupta_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	convert_realm_to_general_government_effect = {
		GOVERNMENT_TYPE = gupta_government
		INITIAL_REALM_LAW = gupta_authority_0
	}
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}
convert_realm_to_eranshar_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	convert_realm_to_general_government_effect = {
		GOVERNMENT_TYPE = eranshar_government
		INITIAL_REALM_LAW = eranshar_authority_0
	}
	if = {
		limit = {
			realm_law_use_clerical_influence_trigger = yes
			NOT = { has_realm_law = clerical_influence_0 }
		}
		add_realm_law_skip_effects = clerical_influence_0
	}
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}
convert_realm_to_subroman_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	change_government = subroman_government
	#Apply Taxation if previous holder was sub-roman
	if = {
		limit = {
			OR = {
				$THE_PREVIOUS_HOLDER$ = { has_variable = subroman_taxation_id }
				$THE_PREVIOUS_HOLDER$ = { has_variable = subroman_transition_id }
			}
		}
		apply_subroman_taxation_law_effect = { THE_PREVIOUS_HOLDER = $THE_PREVIOUS_HOLDER$ }
		#Apply Transition if previous holder was sub-roman
		apply_subroman_transition_law_effect = { THE_PREVIOUS_HOLDER = $THE_PREVIOUS_HOLDER$ }
	}
	else = {
		add_realm_law_skip_effects = subroman_taxation_3
		add_realm_law_skip_effects = subroman_popular_opinion_0
		add_realm_law_skip_effects = subroman_feudal_transition_0
	}
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}
convert_realm_to_subroman_direct_effect = { #i.e., we just go to default values
	hidden_effect = { remove_all_realm_laws_effect = yes }
	change_government = subroman_government
	add_realm_law_skip_effects = subroman_taxation_3
		add_realm_law_skip_effects = subroman_popular_opinion_0
		add_realm_law_skip_effects = subroman_feudal_transition_0
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}
convert_realm_to_gubernatorial_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	change_government = gubernatorial_government
	get_and_apply_previous_taxation_effect = { LIEGE = this.liege }
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}
convert_realm_to_bureaucratic_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	change_government = bureaucratic_government
	every_vassal_or_below = {
		limit = { has_government = subroman_government }
		change_government = gubernatorial_government
	}
	set_taxation_law_to_value_effect = { VALUE = 2 }
	every_held_title = {
		limit = { this.tier = tier_empire }
		remove_all_title_laws_effect = yes
		if = {
			limit = { NOT = { has_title_law = imperial_elective_succession_law } }
			add_title_law = imperial_elective_succession_law
		}
	}
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}
convert_realm_to_bureaucratic_just_ruler_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	change_government = bureaucratic_government
	set_taxation_law_to_value_effect = { VALUE = 2 }
	every_held_title = {
		limit = { this.tier = tier_empire }
		remove_all_title_laws_effect = yes
		if = {
			limit = { NOT = { has_title_law = imperial_elective_succession_law } }
			add_title_law = imperial_elective_succession_law
		}
	}
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}
convert_realm_to_high_tribal_effect = {
	hidden_effect = { remove_all_realm_laws_effect = yes }
	convert_realm_to_general_government_effect = {
		GOVERNMENT_TYPE = high_tribal_government
		INITIAL_REALM_LAW = high_tribal_organization_0
	}
	hidden_effect = {
		remove_government_id_effect = { THE_RULER = this }
		set_government_id_effect = { THE_RULER = this }
	}
}

#Handle gubernatorials no longer being gubernatorials
change_all_gubernatorial_vassals_effect = {
	every_vassal_or_below = {
		limit = { has_government = gubernatorial_government }
		convert_realm_to_subroman_direct_effect = yes
	}
}
degrade_roman_government_effect = {
	if = {
		limit = {
			has_bureaucratic_government_type_trigger = yes
			valid_bureaucratic_government_type_status_trigger = no
		}
		convert_realm_to_subroman_direct_effect = yes
		change_all_gubernatorial_vassals_effect = yes
	}
}

#Setting Government IDs
set_government_id_effect = {
	if = {
		limit = { $THE_RULER$ = { has_government = feudal_government } }
		$THE_RULER$ = { set_variable = { name = government_id value = id_feudal_government } }
	}
	else_if = {
		limit = { $THE_RULER$ = { has_government = clan_government } }
		$THE_RULER$ = { set_variable = { name = government_id value = id_clan_government } }
	}
	else_if = {
		limit = { $THE_RULER$ = { has_government = tribal_government } }
		$THE_RULER$ = { set_variable = { name = government_id value = id_tribal_government } }
	}
	else_if = {
		limit = { $THE_RULER$ = { has_government = nomad_government } }
		$THE_RULER$ = { set_variable = { name = government_id value = id_nomad_government } }
	}
	else_if = {
		limit = { $THE_RULER$ = { has_government = prefeudal_government } }
		$THE_RULER$ = { set_variable = { name = government_id value = id_prefeudal_government } }
	}
	else_if = {
		limit = { $THE_RULER$ = { has_government = gupta_government } }
		$THE_RULER$ = { set_variable = { name = government_id value = id_gupta_government } }
	}
	else_if = {
		limit = { $THE_RULER$ = { has_government = eranshar_government } }
		$THE_RULER$ = { set_variable = { name = government_id value = id_eranshar_government } }
	}
	else_if = {
		limit = { $THE_RULER$ = { has_government = subroman_government } }
		$THE_RULER$ = { set_variable = { name = government_id value = id_subroman_government } }
	}
	else_if = {
		limit = { $THE_RULER$ = { has_government = gubernatorial_government } }
		$THE_RULER$ = { set_variable = { name = government_id value = id_gubernatorial_government } }
	}
	else_if = {
		limit = { $THE_RULER$ = { has_government = bureaucratic_government } }
		$THE_RULER$ = { set_variable = { name = government_id value = id_bureaucratic_government } }
	}
	else_if = {
		limit = { $THE_RULER$ = { has_government = high_tribal_government } }
		$THE_RULER$ = { set_variable = { name = government_id value = id_high_tribal_government } }
	}
	else = { debug_log = "INVALID GOVERNMENT IN 'save_government_type_effect'" }
}

#### Bootstrap Prevention Code (for baronies, which is why we need "change_government" directly
match_government_type_effect = { #NB: For cities, it only applies to counties with city capitals
	if = {
		limit = { $THE_COUNTY_BARONY$.title_province = { has_holding_type = tribal_holding } }
		change_government = $TRIBAL_HOLDING_GOVERNMENT$
	}
	else_if = {
		limit = { $THE_COUNTY_BARONY$.title_province = { has_holding_type = castle_holding } }
		change_government = $CASTLE_HOLDING_GOVERNMENT$
	}
	else_if = {
		limit = { $THE_COUNTY_BARONY$.title_province = { has_holding_type = city_holding } }
		if = {
			limit = { $THE_COUNTY_BARONY$.tier = tier_county }
			change_government = $CITY_COUNTY_HOLDING_GOVERNMENT$
		}
		else = { change_government = $CITY_BARONY_HOLDING_GOVERNMENT$ }
	}
	else_if = {
		limit = { $THE_COUNTY_BARONY$.title_province = { has_holding_type = church_holding } }
		if = {
			limit = { $THE_COUNTY_BARONY$.holder.faith = { has_doctrine = doctrine_theocracy_lay_clergy } }
			change_government = $CASTLE_HOLDING_GOVERNMENT$
		}
	}
}
#Migration CB Improve Government (Minor Wars only)
improve_government_form_effect = {
	#Feudal and Clan
	if = {
		limit = { $DEFENDER$ = { has_variable = government_id } }
		if = {
			limit = { $DEFENDER$.var:government_id = id_feudal_government }
			$ATTACKER$ = { convert_realm_to_high_tribal_effect = yes }
		}
		else_if = {
			limit = { $DEFENDER$.var:government_id = id_clan_government }
			$ATTACKER$ = { convert_realm_to_high_tribal_effect = yes }
		}
		#Primitives
		else_if = {
			limit = { $DEFENDER$.var:government_id = id_tribal_government }
			$ATTACKER$ = { convert_realm_to_tribal_effect = yes }
		}
		else_if = {
			limit = { $DEFENDER$.var:government_id = id_nomad_government }
			$ATTACKER$ = { convert_realm_to_tribal_effect = yes }
		}
		else_if = {
			limit = { $DEFENDER$.var:government_id = id_high_tribal_government }
			$ATTACKER$ = { convert_realm_to_tribal_effect = yes }
		}
		#Intermediate
		else_if = {
			limit = { $DEFENDER$.var:government_id = id_prefeudal_government }
			$ATTACKER$ = { convert_realm_to_high_tribal_effect = yes }
		}
		#Advanced
		else_if = {
			limit = { $DEFENDER$.var:government_id = id_gupta_government }
			$ATTACKER$ = { convert_realm_to_high_tribal_effect = yes }
		}
		else_if = {
			limit = { $DEFENDER$.var:government_id = id_eranshar_government }
			$ATTACKER$ = { convert_realm_to_high_tribal_effect = yes }
		}
		else_if = {
			limit = { $DEFENDER$.var:government_id = id_subroman_government }
			$ATTACKER$ = { convert_realm_to_high_tribal_effect = yes }
		}
		else_if = {
			limit = { $DEFENDER$.var:government_id = id_gubernatorial_government }
			$ATTACKER$ = { convert_realm_to_high_tribal_effect = yes }
		}
		else_if = {
			limit = { $DEFENDER$.var:government_id = id_bureaucratic_government }
			$ATTACKER$ = { convert_realm_to_high_tribal_effect = yes }
		}
	}
	else = { debug_log = "INVALID GOVERNMENT ID IN 'improve_government_form_effect'" }
}

### Other Conversion Code
remove_government_id_effect = {
	if = {
		limit = { $THE_RULER$ = { has_variable = government_id } }
		$THE_RULER$ = { remove_variable = government_id }
	}
}
#Because wars can unland a holder, the "has_government" check may become invalid, so we have to
#save the government types (and sub-roman statuses) before doing any title work
save_subroman_taxation_values_effect = {
	#Taxation
	if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_taxation_0 } }
		set_variable = { name = subroman_taxation_id value = id_subroman_taxation_0 }
	}
	else_if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_taxation_1 } }
		set_variable = { name = subroman_taxation_id value = id_subroman_taxation_1 }
	}
	else_if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_taxation_2 } }
		set_variable = { name = subroman_taxation_id value = id_subroman_taxation_2 }
	}
	else_if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_taxation_3 } }
		set_variable = { name = subroman_taxation_id value = id_subroman_taxation_3 }
	}
	#Feudal Transition
	if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_0 } }
		set_variable = { name = subroman_transition_id value = id_subroman_feudal_transition_0 }
	}
	else_if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_1 } }
		set_variable = { name = subroman_transition_id value = id_subroman_feudal_transition_1 }
	}
	else_if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_2 } }
		set_variable = { name = subroman_transition_id value = id_subroman_feudal_transition_2 }
	}
	else_if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_3 } }
		set_variable = { name = subroman_transition_id value = id_subroman_feudal_transition_3 }
	}
	else_if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_4 } }
		set_variable = { name = subroman_transition_id value = id_subroman_feudal_transition_4 }
	}
	else_if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_5 } }
		set_variable = { name = subroman_transition_id value = id_subroman_feudal_transition_5 }
	}
	else_if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_6 } }
		set_variable = { name = subroman_transition_id value = id_subroman_feudal_transition_6 }
	}
	else_if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_7 } }
		set_variable = { name = subroman_transition_id value = id_subroman_feudal_transition_7 }
	}
	else_if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_8 } }
		set_variable = { name = subroman_transition_id value = id_subroman_feudal_transition_8 }
	}
	else_if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_realm_law = subroman_feudal_transition_9 } }
		set_variable = { name = subroman_transition_id value = id_subroman_feudal_transition_9 }
	}
}
save_government_type_effect = { #This must be linked with the below
	if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_variable = government_id } }
		$THE_PREVIOUS_HOLDER$ = { remove_variable = government_id }
	}
	if = {
		limit = { $THE_NEW_HOLDER$ = { is_landed = no } }
		$THE_NEW_HOLDER$ = { set_variable = { name = unlanded_character } }
	}
	set_government_id_effect = { THE_RULER = $THE_PREVIOUS_HOLDER$ }
	if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_government = subroman_government } }
		$THE_PREVIOUS_HOLDER$ = { save_subroman_taxation_values_effect = { THE_PREVIOUS_HOLDER = $THE_PREVIOUS_HOLDER$ } }
	}
}
convert_government_type_effect = { #Must be linked with the above or it won't fire
	if = {
		limit = { $THE_NEW_HOLDER$ = { has_variable = unlanded_character } }
		#Feudal and Clan
		if = {
			limit = { $THE_PREVIOUS_HOLDER$ = { has_variable = government_id } }
			if = {
				limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_feudal_government }
				$THE_NEW_HOLDER$ = { convert_realm_to_feudal_effect = yes }
			}
			else_if = {
				limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_clan_government }
				$THE_NEW_HOLDER$ = { convert_realm_to_clan_effect = yes }
			}
			#Primitives
			else_if = {
				limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_tribal_government }
				$THE_NEW_HOLDER$ = { convert_realm_to_tribal_effect = yes }
			}
			else_if = {
				limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_nomad_government }
				$THE_NEW_HOLDER$ = { convert_realm_to_nomad_effect = yes }
			}
			else_if = {
				limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_high_tribal_government }
				$THE_NEW_HOLDER$ = { convert_realm_to_high_tribal_effect = yes }
			}
			#Intermediate
			else_if = {
				limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_prefeudal_government }
				if = {
					limit = { NOT = { $THE_NEW_HOLDER$.capital_barony.title_province = { has_holding_type = tribal_holding } } }
					$THE_NEW_HOLDER$ = { convert_realm_to_prefeudal_effect = yes }
				}
				else = { $THE_NEW_HOLDER$ = { convert_realm_to_tribal_effect = yes } }
			}
			#Advanced
			else_if = {
				limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_gupta_government }
				if = {
					limit = { NOT = { $THE_NEW_HOLDER$.capital_barony.title_province = { has_holding_type = tribal_holding } } }
					$THE_NEW_HOLDER$ = { convert_realm_to_gupta_effect = yes }
				}
				else = { $THE_NEW_HOLDER$ = { convert_realm_to_high_tribal_effect = yes } }
			}
			else_if = {
				limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_eranshar_government }
				if = {
					limit = { NOT = { $THE_NEW_HOLDER$.capital_barony.title_province = { has_holding_type = tribal_holding } } }
					$THE_NEW_HOLDER$ = { convert_realm_to_eranshar_effect = yes }
				}
				else = { $THE_NEW_HOLDER$ = { convert_realm_to_high_tribal_effect = yes } }
			}
			else_if = {
				limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_subroman_government }
				if = {
					limit = { NOT = { $THE_NEW_HOLDER$.capital_barony.title_province = { has_holding_type = tribal_holding } } }
					$THE_NEW_HOLDER$ = { convert_realm_to_subroman_effect = { THE_PREVIOUS_HOLDER = $THE_PREVIOUS_HOLDER$ } }
				}
				else = { $THE_NEW_HOLDER$ = { convert_realm_to_high_tribal_effect = yes } }
			}
			else_if = {
				limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_gubernatorial_government }
				$THE_NEW_HOLDER$ = {
					if = {
						limit = { valid_bureaucratic_government_type_status_trigger = yes }
						$THE_NEW_HOLDER$ = { convert_realm_to_gubernatorial_effect = yes }
					}
					else_if = {
						limit = { $THE_NEW_HOLDER$.capital_barony.title_province = { has_holding_type = tribal_holding } }
						$THE_NEW_HOLDER$ = {
							convert_realm_to_high_tribal_effect = yes
							change_all_gubernatorial_vassals_effect = yes
						}
					}
					else = { #Degrade government if the new ruler is independent nor has correct
						$THE_NEW_HOLDER$ = {
							convert_realm_to_subroman_effect = { THE_PREVIOUS_HOLDER = $THE_PREVIOUS_HOLDER$ }
							change_all_gubernatorial_vassals_effect = yes
						}
					}
				}
			}
			else_if = {
				limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_bureaucratic_government }
				$THE_NEW_HOLDER$ = {
					if = {
						limit = { valid_bureaucratic_government_type_status_trigger = yes }
						$THE_NEW_HOLDER$ = { convert_realm_to_bureaucratic_effect = yes }
					}
					else_if = {
						limit = { $THE_NEW_HOLDER$.capital_barony.title_province = { has_holding_type = tribal_holding } }
						$THE_NEW_HOLDER$ = {
							convert_realm_to_high_tribal_effect = yes
							change_all_gubernatorial_vassals_effect = yes
						}
					}
					else = { #Degrade government if new ruler is invalid
						$THE_NEW_HOLDER$ = {
							convert_realm_to_subroman_effect = { THE_PREVIOUS_HOLDER = $THE_PREVIOUS_HOLDER$ }
							change_all_gubernatorial_vassals_effect = yes
						}
					}
				}
			}
		}
		else = { debug_log = "INVALID GOVERNMENT ID IN 'convert_government_type_effect'" }
	}
}
#Doesn't have to be linked with the above, but should try to use the above if possible for type safety
convert_government_type_without_check_effect = {
	#Feudal and Clan
	if = {
		limit = { $THE_PREVIOUS_HOLDER$ = { has_variable = government_id } }
		if = {
			limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_feudal_government }
			$THE_NEW_HOLDER$ = { convert_realm_to_feudal_effect = yes }
		}
		else_if = {
			limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_clan_government }
			$THE_NEW_HOLDER$ = { convert_realm_to_clan_effect = yes }
		}
		#Primitives
		else_if = {
			limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_tribal_government }
			$THE_NEW_HOLDER$ = { convert_realm_to_tribal_effect = yes }
		}
		else_if = {
			limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_nomad_government }
			$THE_NEW_HOLDER$ = { convert_realm_to_nomad_effect = yes }
		}
		else_if = {
			limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_high_tribal_government }
			$THE_NEW_HOLDER$ = { convert_realm_to_high_tribal_effect = yes }
		}
		#Intermediate
		else_if = {
			limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_prefeudal_government }
			if = {
				limit = { NOT = { $THE_NEW_HOLDER$.capital_barony.title_province = { has_holding_type = tribal_holding } } }
				$THE_NEW_HOLDER$ = { convert_realm_to_prefeudal_effect = yes }
			}
			else = { $THE_NEW_HOLDER$ = { convert_realm_to_tribal_effect = yes } }
		}
		#Advanced
		else_if = {
			limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_gupta_government }
			if = {
				limit = { NOT = { $THE_NEW_HOLDER$.capital_barony.title_province = { has_holding_type = tribal_holding } } }
				$THE_NEW_HOLDER$ = { convert_realm_to_gupta_effect = yes }
			}
			else = { $THE_NEW_HOLDER$ = { convert_realm_to_high_tribal_effect = yes } }
		}
		else_if = {
			limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_eranshar_government }
			if = {
				limit = { NOT = { $THE_NEW_HOLDER$.capital_barony.title_province = { has_holding_type = tribal_holding } } }
				$THE_NEW_HOLDER$ = { convert_realm_to_eranshar_effect = yes }
			}
			else = { $THE_NEW_HOLDER$ = { convert_realm_to_high_tribal_effect = yes } }
		}
		else_if = {
			limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_subroman_government }
			if = {
				limit = { NOT = { $THE_NEW_HOLDER$.capital_barony.title_province = { has_holding_type = tribal_holding } } }
				$THE_NEW_HOLDER$ = { convert_realm_to_subroman_effect = { THE_PREVIOUS_HOLDER = $THE_PREVIOUS_HOLDER$ } }
			}
			else = { $THE_NEW_HOLDER$ = { convert_realm_to_high_tribal_effect = yes } }
		}
		else_if = {
			limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_gubernatorial_government }
			$THE_NEW_HOLDER$ = {
				if = {
					limit = { valid_bureaucratic_government_type_status_trigger = yes }
					$THE_NEW_HOLDER$ = { convert_realm_to_gubernatorial_effect = yes }
				}
				else_if = {
					limit = { $THE_NEW_HOLDER$.capital_barony.title_province = { has_holding_type = tribal_holding } }
					$THE_NEW_HOLDER$ = {
						convert_realm_to_high_tribal_effect = yes
						change_all_gubernatorial_vassals_effect = yes
					}
				}
				else = { #Degrade government if the new ruler is independent nor has correct
					$THE_NEW_HOLDER$ = {
						convert_realm_to_subroman_effect = { THE_PREVIOUS_HOLDER = $THE_PREVIOUS_HOLDER$ }
						change_all_gubernatorial_vassals_effect = yes
					}
				}
			}
		}
		else_if = {
			limit = { $THE_PREVIOUS_HOLDER$.var:government_id = id_bureaucratic_government }
			$THE_NEW_HOLDER$ = {
				if = {
					limit = { valid_bureaucratic_government_type_status_trigger = yes }
					$THE_NEW_HOLDER$ = { convert_realm_to_bureaucratic_effect = yes }
				}
				else_if = {
					limit = { $THE_NEW_HOLDER$.capital_barony.title_province = { has_holding_type = tribal_holding } }
					$THE_NEW_HOLDER$ = {
						convert_realm_to_high_tribal_effect = yes
						change_all_gubernatorial_vassals_effect = yes
					}
				}
				else = { #Degrade government if new ruler is invalid
					$THE_NEW_HOLDER$ = {
						convert_realm_to_subroman_effect = { THE_PREVIOUS_HOLDER = $THE_PREVIOUS_HOLDER$ }
						change_all_gubernatorial_vassals_effect = yes
					}
				}
			}
		}
	}
	else = { debug_log = "INVALID GOVERNMENT ID IN 'convert_government_type_effect'" }
}
#Separated on account of sometimes (like popular revolts), we need to keep the variables around
#until we've gone through the whole list;
#scope is the character in question
government_transition_garbage_collect_effect = {
	if = { limit = { has_variable = unlanded_character } remove_variable = unlanded_character }
	if = { limit = { has_variable = subroman_taxation_id } remove_variable = subroman_taxation_id }
	if = { limit = { has_variable = subroman_transition_id } remove_variable = subroman_transition_id }
}

#### Holdings Conversion
convert_holdings_effect = {
	## Spawn holdings in tribal counties
	
	# Spawn temples in your holy sites
	every_sub_realm_county = {
		limit = {
			any_county_province = { has_holding_type = tribal_holding }
			NOT = { any_county_province = { has_holding_type = church_holding } }
			any_county_province = {
				has_holding = no
				barony = { is_holy_site_of = root.faith }
			}
		}
		random_county_province = {
			limit = {
				has_holding = no
				barony = { is_holy_site_of = root.faith }
			}
			set_holding_type = church_holding
		}
	}
	
	# Spawn a City
	every_sub_realm_county = {
		limit = {
			any_county_province = { has_holding_type = tribal_holding }
			any_county_province = { has_holding = no }
			NOT = { any_county_province = { has_holding_type = city_holding } }
		}
		random_county_province = {
			limit = {
				has_holding = no
				OR = {
					terrain = floodplains
					terrain = oasis
					terrain = farmlands
				}
				is_coastal = yes
				has_special_building_slot = no
			}
			alternative_limit = {
				has_holding = no
				OR = {
					terrain = floodplains
					terrain = oasis
					terrain = farmlands
				}
				has_special_building_slot = no
			}
			alternative_limit = {
				has_holding = no
				OR = {
					terrain = floodplains
					terrain = oasis
					terrain = farmlands
				}
			}
			alternative_limit = { has_holding = no }
			random = {
				chance = 60
				modifier = { add = county.development_level }
				modifier = {
					add = 50
					this.county = root.capital_county
				}
				modifier = {
					add = 20
					OR = {
						terrain = floodplains
						terrain = oasis
						terrain = farmlands
					}
				}
				set_holding_type = city_holding
			}
		}
	}
	
	# Spawn a Temple
	every_sub_realm_county = {
		limit = {
			any_county_province = { has_holding_type = tribal_holding }
			any_county_province = { has_holding = no }
			NOT = { any_county_province = { has_holding_type = church_holding } }
		}
		random_county_province = {
			limit = {
				has_holding = no
				OR = {
					terrain = floodplains
					terrain = oasis
					terrain = farmlands
				}
				is_coastal = yes
				has_special_building_slot = no
			}
			alternative_limit = {
				has_holding = no
				OR = {
					terrain = floodplains
					terrain = oasis
					terrain = farmlands
				}
				has_special_building_slot = no
			}
			alternative_limit = {
				has_holding = no
				OR = {
					terrain = floodplains
					terrain = oasis
					terrain = farmlands
				}
			}
			alternative_limit = {
				has_holding = no
			}
			random = {
				chance = 50
				modifier = { add = county.development_level }
				modifier = {
					add = 50
					this.county = root.capital_county
				}
				modifier = {
					add = 20
					OR = {
						terrain = floodplains
						terrain = oasis
						terrain = farmlands
					}
				}
				set_holding_type = church_holding
			}
		}
	}

	##Sort out new buildings for liege and all vassals
	every_realm_province = {
		limit = {
			has_holding_type = tribal_holding
			NOT = { is_in_list = feudal_conversion }
		}
		add_to_list = feudal_conversion

	}
	every_vassal_or_below = {
		every_realm_province = {
			limit = {
				has_holding_type = tribal_holding
				NOT = { is_in_list = feudal_conversion }
			}
			add_to_list = feudal_conversion

		}
	}
	every_in_list = {
		list = feudal_conversion
		set_variable = {
			name = tribal_to_feudal_building_level
			value = combined_building_level
			days = 1
		}
		set_holding_type = castle_holding
		while = {
			limit = { var:tribal_to_feudal_building_level > 1 }
			generate_building = yes
			change_variable = {
				name = tribal_to_feudal_building_level
				subtract = 1
			}
		}
		remove_variable = tribal_to_feudal_building_level
		remove_from_list = feudal_conversion
	}
}
