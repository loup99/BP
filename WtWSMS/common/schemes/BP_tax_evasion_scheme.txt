tax_evasion = {
	
	skill = intrigue
	desc = tax_evasion_desc_general
	hostile = yes
	#icon = icon_gold
	
	allow = {
		always = yes
		is_ruler = yes
		is_imprisoned = no
		has_government = gubernatorial_government
	}
	
	valid = {
		#custom_description = {
		#	object = scope:target
		#	text = i_have_been_caught_trying_to_murder_target
		#	scope:target = {
		#		NOT = {
		#			has_opinion_modifier = {
		#				target = prev
		#				modifier = murder_personal_grudge_opinion
		#			}
		#		}
		#	}
		#}
		# Special AI exceptions
		NOT = {
			scope:owner = {
				is_ai = yes
				has_opinion_modifier = {
					target = scope:target
					modifier = repentant_opinion
				}
			}
		}
	}

	valid_agent = {
		age >= 16
	}
	
	agent_join_chance = {
		base = 0
		
		# Base Reluctance, including negative AI Energy
		modifier = {
			add = {
				value = -20
				if = {
					limit = {
						ai_energy < 0
					}
					add = {
						value = ai_energy
						multiply = 0.5
					}
				}
			}
			desc = BASE_RELUCTANCE
		}

		#Is Owner sending a gift in the invite interaction?
		modifier = {
			add = bribe_acceptance_value
			exists = scope:gift
			always = scope:gift
			NOT = {
				OR = {
					scope:target = { is_parent_of = root }
					root = { is_parent_of = scope:target }
				}
			}
			desc = "SCHEME_WITH_GIFT"
		}

		#Default Hostile Scheme modifiers
		hostile_murder_agent_base_join_chance_modifier = yes

		#Special Modifier from events for couples that murder together
		modifier = {
			add = 50
			has_opinion_modifier = {
				target = scope:owner
				modifier = murder_partner_opinion
			}
			desc = "SCHEME_MURDER_COUPLE"
		}
		modifier = {
			add = -1000
			has_variable = murder_scheme_disinterest
			var:murder_scheme_disinterest = scope:target
			desc = "SCHEME_MURDER_DISINTERESTED"
		}

		#Scope:target has caused internal strife in the realm
		character_hates_scope_due_to_strife_plus_desc_modifier = { TARGET = scope:target }

		#Family Feud
		house_feud_hostile_scheme_agent_modifier = yes
	}
	
	base_success_chance = {
		base = 0
		
		hostile_scheme_base_chance_modifier = yes

		# Imaginar friend told you to kill them
		modifier = {
			add = 50
			desc = "IMAGINARY_FRIEND_MURDER_BONUS"
			scope:owner = {
				exists = var:imaginary_friend_murder_target
				var:imaginary_friend_murder_target = scope:target
			}
		}
		
		# They crowned you king/queen of fools
		modifier = {
			add = 20
			desc = "MURDER_FOOL_NEMESIS_BONUS"
			scope:owner = {
				exists = var:festival_nemesis_fool_var
				var:festival_nemesis_fool_var = scope:target
			}
		}
		
		# You found their escape tunnel
		modifier = {
			add = 100
			desc = "SCHEME_DISCOVERED_ESCAPE_TUNNEL"
			scope:owner = {
				exists = var:discovered_escape_tunnel_of
				var:discovered_escape_tunnel_of = scope:target
			}
		}
		
		# You know where their chamber is
		modifier = {
			add = 50
			desc = "SCHEME_WNIGHT_VICTIM_CHAMBER"
			scope:owner = {
				exists = var:wnight_chandelier_murder_var
				var:wnight_chandelier_murder_var = scope:target
			}
		}

		modifier = {
			add = 10
			scope:owner = { has_trait = lifestyle_herbalist }
			desc = MURDER_HERBALIST_BONUS
		}

		modifier = {
			add = -50
			scope:target = {				
				has_opinion_modifier = {
					target = scope:owner
					modifier = attempted_murder_me_crime
				}
			}
			desc = HAS_ATTEMPTED_TO_MURDER_TARGET_BEFORE
		}
		# Spiritual Head of Faith
		modifier = {
			add = -25
			desc = "SCHEME_VS_SPIRITUAL_HOF"
			scope:target = {
				faith = scope:owner.faith
				faith = {
					has_doctrine = doctrine_spiritual_head
				}
				faith = {
					exists = religious_head
					religious_head = {
			 			this = scope:target
			 		}
				}
			}
		}
		
		# Spiritual Head of Faith
		modifier = {
			add = -50
			desc = "SCHEME_VS_SPIRITUAL_HOF"
			scope:target = {
				faith = scope:owner.faith
				faith = {
					has_doctrine = doctrine_spiritual_head
				}
				faith = {
					exists = religious_head
					religious_head = {
			 			this = scope:target
			 		}
				}
			}
		}

		# Sponsored Inspiration
		modifier = {
			add = -25
			desc = target_has_sponsored_inspiration
			scope:target = {
				exists = inspiration
				inspiration = { exists = inspiration_sponsor }
			}
		}

		# Family Feud
		house_feud_hostile_scheme_success_modifier = yes
		
		# At War
		first_valid = {
			modifier = {
				add = -50
				desc = "SCHEME_AT_WAR"
				scope:target = {
					is_at_war_with = scope:owner
				}
			}
			modifier = {
				add = -25
				scope:target = {
					is_landed = no
					exists = liege
					liege = {
						is_at_war_with = scope:owner
					}
				}
				desc = "SCHEME_AT_WAR_WITH_LIEGE"
			}
			modifier = {
				add = -25
				scope:target = {
					is_landed = yes
					exists = liege
					liege = {
						is_at_war_with = scope:owner
					}
				}
				desc = "SCHEME_AT_WAR_WITH_LIEGE"
			}
		}

		# Diarchs are better at schemes within their liege's realm
		diarch_scheming_within_realm_bonus_modifier = yes

		# Tailor
		
		modifier = {
			add = 10
			scope:owner = {
				has_character_modifier = tournament_tailor_mixup_scheme_modifier
				exists = var:tailor_mixup_house
				exists = scope:target.house
				var:tailor_mixup_house = scope:target.house
			}
			desc = "tournament_tailor_mixup_scheme_modifier_value"
		}

		modifier = {
			add = 10
			desc = feast_learnt_habits_modifier.tt
			scope:owner = {
				any_scheme = {
					scheme_type = murder
					scheme_target = scope:target
					has_scheme_modifier = feast_learnt_habits_modifier
				}
			}
		}
	}
	
	agent_success_chance = {
		base = 0
		
		hostile_scheme_agent_success_chance_modifier = yes #Adds a value depending on their "closeness" to target
	}
	
	agent_leave_threshold = -25
		
	cooldown = { years = 5 }
	is_secret = yes
	base_secrecy = 10

	on_ready = {
		scheme_owner = {
			if = {
				limit = {
					has_character_flag = is_in_event_murder_outcome_0001
				}
				trigger_event = {
					id = murder_outcome.0001
					days = 1
				}
			}
			else = {
				trigger_event = murder_outcome.0001
			}
		}
	}

	on_monthly = {
		hostile_scheme_discovery_chance_effect = yes
		if = {
			limit = {
				NOT = { exists = scope:discovery_event_happening }
			}			
			scheme_owner = {
				trigger_event = {
					on_action = murder_ongoing
				}
			}
		}
	}

	
	on_invalidated = {
		scheme_target = {
			save_scope_as = target
		}
		scheme_owner = {
			save_scope_as = owner
		}

		#Were your taxes lowered to the minimal value? Then trigger appropriate event...

	}

	
	power_per_skill_point = 3.0
	resistance_per_skill_point = 1.0
	power_per_agent_skill_point = 2
	
	minimum_progress_chance = 10
	maximum_progress_chance = 90
	minimum_success = 5
	maximum_secrecy = 90
	maximum_success = 90
	
	success_desc = "TAX_EVASION_SUCCESS_DESC"
	discovery_desc = "TAX_EVASION_DISCOVERY_DESC"
}
