##### Changed from Vanilla: Added check against changing non-gubernatorial_government vassals
liege_modify_vassal_contract_interaction = {
	special_interaction = modify_vassal_contract
	interface = modify_vassal_contract
	category = interaction_category_vassal
	common_interaction = yes
	icon = icon_contract_modification_single

	send_name = "modify_vassal_contract_interaction_SEND"
	desc = liege_modify_vassal_contract_interaction_desc

	force_notification = yes
	notification_text = MODIFY_VASSAL_CONTRACT_NOTIFICATION_TO_VASSAL

	is_shown = {
		scope:recipient = {
			NOT = { this = scope:actor }
			exists = liege
			liege = scope:actor
			is_ruler = yes
			vassal_contract_has_modifiable_obligations = yes
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			is_busy_in_events_localised = yes
		}
		NOT = { scope:actor = { is_at_war_with = scope:recipient } }
	}

	##### Changed from Vanilla vvvvv
	can_send = {
		trigger_if = { #If they're blocked we don't want to show anything else
			limit = {
				scope:recipient = {
					vassal_contract_is_blocked_from_modification = yes
				}
			}
			scope:recipient = {
				vassal_contract_is_blocked_from_modification = no
			}
		}
		trigger_else = {
			scope:actor = {
				has_changed_contract_obligation_trigger = yes

				custom_description = {
					text = "liege_modify_vassal_contract_cannot_exceed_tyranny_cap"
					object = scope:actor
					NOT = {
						vassal_obligation_increase_tyranny_gain_multiplier > 1
					}
				}

				# Cannot change more than three things at once
				custom_description = {
					text = "vassal_modify_vassal_contract_obligation_change_limit"
					value = list_size:changed_obligations
					list_size:changed_obligations <= max_contract_changes
				}

				# If the trade without the hook usage is already in the vassal's favour or fair then don't waste your hook
				save_temporary_scope_value_as = {
					name = obligations_favoring_vassal
					value = scope:recipient.count_obligation_improvements_for_vassal
				}
				trigger_if = {
					limit = { scope:obligations_favoring_vassal > 0 }
					custom_description = {
						text = "vassal_modify_vassal_contract_unnecessary_hook_usage_vassal_favor"
						object = scope:recipient
						value = scope:obligations_favoring_vassal
						NOT = { always = scope:hook }
					}
				}
				trigger_else_if = {
					limit = { scope:obligations_favoring_vassal = 0 }
					custom_description = {
						text = "vassal_modify_vassal_contract_unnecessary_hook_usage_equal"
						object = scope:recipient
						NOT = { always = scope:hook }
					}
				}
				trigger_else = {} # Otherwise we're fine!
####				##### Changed from Vanilla vvvvv
####				trigger_if = { #To make a non-gubernatorial_government vassal gubernatorial_government requires a strong hook
####					limit = {
####						scope:recipient.liege = { valid_bureacratic_vassal_governance_liege_gov_trigger = yes }
####						scope:recipient = { valid_bureacratic_vassal_governance_vassal_gov_trigger = yes }
####						##### TODO: FIXME:  scope:vassal.changed_obligations.bureaucratic_vassal_governance != 1
####					}
####					custom_description = {
####						text = converting_to_gubernatorial_requires_a_strong_hook
####						scope:recipient.liege = { has_strong_hook = scope:recipient }
####						always = scope:hook
####					}
####				}
####				##### Changed from Vanilla ^^^^^
			}
		}
	}
	##### Changed from Vanilla ^^^^^

	auto_accept = yes
	on_accept = {
		hidden_effect = {
			# Struggle Catalysts
			## We work these out first so they're not invalidated by the actual effect block.
			if = {
				limit = {
					catalyst_granted_powerful_diff_faith_vassal_religious_protection_preliminary_trigger = { CHAR = scope:recipient }
					scope:actor = {
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_granted_powerful_diff_faith_vassal_religious_protection
								CHAR = scope:recipient
							}
						}
					}
				}
				scope:actor = {
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_granted_powerful_diff_faith_vassal_religious_protection
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_granted_powerful_diff_faith_vassal_religious_protection
							character = scope:actor
						}
					}
				}
			}
			if = {
				limit = {
					catalyst_revoked_powerful_diff_faith_vassal_religious_protection_preliminary_trigger = { CHAR = scope:recipient }
					scope:actor = {
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_revoked_powerful_diff_faith_vassal_religious_protection
								CHAR = scope:recipient
							}
						}
					}
				}
				scope:actor = {
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_revoked_powerful_diff_faith_vassal_religious_protection
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_revoked_powerful_diff_faith_vassal_religious_protection
							character = scope:actor
						}
					}
				}
			}

			# Improving contract catalyst
			if = {
				limit = {
					scope:recipient.count_obligation_improvements_for_vassal > 0
					scope:actor = {
						is_diff_faith_or_culture_trigger = {
							CHAR = scope:recipient
							STATUS = involved
						}
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_grant_privilege_to_diff_faith_culture_vassal
								CHAR = scope:recipient
							}
						}
					}
				}
				scope:actor = {
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_grant_privilege_to_diff_faith_culture_vassal
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_grant_privilege_to_diff_faith_culture_vassal
							character = scope:actor
						}
					}
				}
			}
		}

		# Enact changes.
		scope:actor = {
			send_interface_message = {
				type = msg_vassal_contract_change
				title = modify_vassal_contract_interaction_notification
				right_icon = scope:recipient
				# Add tyranny for each level increased. Can spend one hook to avoid one level of tyranny hit.
				add_tyranny = vassal_obligation_increase_tyranny_gain
				if = {
					limit = { vassal_obligation_increase_tyranny_gain != 0 }
					stress_impact = {
						just = medium_stress_impact_gain
						generous = medium_stress_impact_gain
					}
				}
				if = {
					limit = {
						always = scope:hook
					}
					use_hook = scope:recipient
					add_achievement_flag_effect = { FLAG = achievement_fine_print_flag }
				}

				scope:recipient = {
					hidden_effect = { set_vassal_contract_modification_blocked = yes }
				}

				every_in_list = {
					list = changed_obligations

					save_scope_as = obligation

					scope:recipient = {
						vassal_contract_set_obligation_level = {
							type = scope:obligation.vassal_contract_type
							level = scope:obligation
						}
					}
				}
			}
		}
		# If there's a diarch involved, and they called in their change, that gets flagged.
		diarch_changed_own_contract_effect = yes
	}

	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	send_option = {
		is_shown = {
			scope:recipient = {
				diarch ?= scope:actor
				has_diarchy_active_parameter = diarch_gets_a_free_change_on_vassal_contract
			}
		}
		is_valid = {
			scope:recipient = {
				trigger_if = {
					limit = { has_variable_list = diarch_contract_rights_used_list }
					NOT = {
						is_target_in_variable_list = {
							name = diarch_contract_rights_used_list
							target = scope:actor
						}
					}
				}
			}
		}
		flag = diarch
		localization = CALL_IN_DIARCH_RIGHTS
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no
}