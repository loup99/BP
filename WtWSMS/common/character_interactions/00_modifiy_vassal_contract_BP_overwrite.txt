##### Changed from Vanilla: Added support for new vassal contracts
##### Changed from Vanilla: Created additional logic to hide cases with unmodifiable vassal contracts
##### Changed from Vanilla: Added liege check for "has_changed_contract_obligation_trigger"
liege_modify_vassal_contract_interaction = {
	special_interaction = modify_vassal_contract
	interface = modify_vassal_contract
	category = interaction_category_vassal
	common_interaction = yes
	
	send_name = "modify_vassal_contract_interaction_SEND"
	desc = liege_modify_vassal_contract_interaction_desc
	
	force_notification = yes
	notification_text = MODIFY_VASSAL_CONTRACT_NOTIFICATION_TO_VASSAL
	
	##### Changed from Vanilla vvvvv
	is_shown = {
		scope:recipient = {
			NOT = { this = scope:actor }
			exists = liege
			liege = scope:actor
			is_ruler = yes
			##### Changed from Vanilla vvvvv
			OR = {
				#Unmodifiable contracts combined with modifiable contracts weirdness needs to be covered
				AND = {
					OR = {
						vassal_contract_has_flag = tributary_installed_flag
						vassal_contract_has_flag = tributary_state_installed_flag
						vassal_contract_has_flag = foederatus_contract_installed
					}
					has_government_without_modifiable_contracts_excluding_uniques_trigger = yes
				}
				AND = {
					vassal_contract_has_modifiable_obligations = yes
					has_government_without_modifiable_contracts_excluding_uniques_trigger = no
				}
			}
			##### Changed from Vanilla ^^^^^
		}
	}
	##### Changed from Vanilla ^^^^^
	
	is_valid_showing_failures_only = {
		scope:recipient = { 
			is_busy_in_events_localised = yes
		} 
		NOT = { scope:actor = { is_at_war_with = scope:recipient } } 
	}
	
	##### Changed from Vanilla vvvvv
	can_send = {
		trigger_if = { #If they're blocked we don't want to show anything else
			limit = {
				scope:recipient = { vassal_contract_is_blocked_from_modification = yes }
			}
			scope:recipient = { vassal_contract_is_blocked_from_modification = no }
		}
		#To make a non-gubernatorial_government vassal gubernatorial_government requires a strong hook
		trigger_else_if = {
			limit = {
				scope:recipient.liege = { valid_bureacratic_vassal_governance_liege_gov_trigger = yes }
				scope:recipient = { valid_bureacratic_vassal_governance_vassal_gov_trigger = yes }
				local_var:bureaucratic_vassal_governance != 0
			}
			custom_description = {
				text = converting_to_gubernatorial_requires_a_strong_hook
				scope:recipient.liege = { has_strong_hook = scope:recipient }
				always = scope:hook
			}
		}
		trigger_else = {
			scope:actor = {
				has_changed_contract_obligation_trigger = {
					WHO = scope:recipient
					LIEGE = scope:actor
				}
				
				custom_description = {
					text = "liege_modify_vassal_contract_cannot_exceed_tyranny_cap"
					object = scope:actor
					NOT = {
						vassal_obligation_increase_tyranny_gain_multiplier > 1
					}
				}
				
				# If the trade without the hook usage is already in the vassal's favour or fair then
				#don't waste your hook
				save_temporary_scope_value_as = {
					name = obligations_favoring_vassal
					value = scope:recipient.count_obligation_improvements_for_vassal
				}
				trigger_if = {
					limit = { scope:obligations_favoring_vassal > 0 }
					custom_description = {
						text = "vassal_modify_vassal_contract_unnecessary_hook_usage_vassal_favor"
						object = scope:recipient
						value = scope:obligations_favoring_vassal
						NOT = { always = scope:hook }
					}
				}
				trigger_else_if = {
					limit = { scope:obligations_favoring_vassal = 0 }
					custom_description = {
						text = "vassal_modify_vassal_contract_unnecessary_hook_usage_equal"
						object = scope:recipient
						NOT = { always = scope:hook }
					}
				}
				trigger_else = {} # Otherwise we're fine!
			}
			
			# Cannot change more than three things at once
			custom_description = {
				text = "vassal_modify_vassal_contract_obligation_change_limit"
				value = scope:recipient.count_total_obligation_changes
				scope:recipient.count_total_obligation_changes <= max_contract_changes
			}
		}
	}
	##### Changed from Vanilla ^^^^^
	
	auto_accept = yes
	
	##### Changed from Vanilla vvvvv
	on_accept = {
		hidden_effect = {
			# Struggle Catalysts
			## We work these out first so they're not invalidated by the actual effect block.
			if = {
				limit = {
					catalyst_granted_powerful_diff_faith_vassal_religious_protection_preliminary_trigger = { CHAR = scope:recipient }
					scope:actor = {
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_granted_powerful_diff_faith_vassal_religious_protection
								CHAR = scope:recipient
							}
						}
					}
				}
				scope:actor = {
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_granted_powerful_diff_faith_vassal_religious_protection
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_granted_powerful_diff_faith_vassal_religious_protection
							character = scope:actor
						}
					}
				}
			}
			if = {
				limit = {
					catalyst_revoked_powerful_diff_faith_vassal_religious_protection_preliminary_trigger = { CHAR = scope:recipient }
					scope:actor = {
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_revoked_powerful_diff_faith_vassal_religious_protection
								CHAR = scope:recipient
							}
						}
					}
				}
				scope:actor = {
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_revoked_powerful_diff_faith_vassal_religious_protection
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_revoked_powerful_diff_faith_vassal_religious_protection
							character = scope:actor
						}
					}
				}
			}

			# Improving contract catalyst
			if = {
				limit = {
					scope:recipient.count_obligation_improvements_for_vassal > 0
					is_diff_faith_or_culture_trigger = {
						CHAR = scope:recipient
						STATUS = involved
						STRUGGLE_TYPE = iberian_struggle
					}
					scope:actor = {
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_grant_privilege_to_diff_faith_culture_vassal
								CHAR = scope:recipient
							}
						}
					}
				}
				scope:actor = {
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_grant_privilege_to_diff_faith_culture_vassal
								CHAR = scope:recipient
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_grant_privilege_to_diff_faith_culture_vassal
							character = scope:actor
						}
					}
				}
			}
		}
		
		scope:actor = {
			send_interface_message = {
				type = msg_vassal_contract_change
				title = modify_vassal_contract_interaction_notification
				right_icon = scope:recipient
				# Add tyranny for each level increased. Can spend one hook to avoid one level of tyranny hit.
				add_tyranny = vassal_obligation_increase_tyranny_gain
				if = {
					limit = { vassal_obligation_increase_tyranny_gain != 0 }
					stress_impact = {
						just = medium_stress_impact_gain
						generous = medium_stress_impact_gain
					}
				}
				
				scope:recipient = {
					hidden_effect = { set_vassal_contract_modification_blocked = yes }
					
					if = {
						limit = { has_government = feudal_government }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = feudal_government_taxes }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = feudal_government_levies }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = special_contract }
					}
					if = {
						limit = { valid_government_rights_general_trigger = yes }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = fortification_rights }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = coinage_rights }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = succession_rights }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = war_declaration_rights }
					}
					if = {
						limit = { valid_government_jizya_rights_trigger = yes }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = jizya_special_rights }
					}
					if = {
						limit = { valid_government_muslim_related_special_rights_trigger = yes }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = iqta_special_rights }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = ghazi_special_rights }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = marriage_favor_rights }
					}
					if = {
						limit = { valid_title_revocation_rights_trigger = { VASSAL = scope:recipient } }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = title_revocation_rights }
					}
					if = {
						limit = { valid_religious_rights_trigger = { VASSAL = scope:recipient } }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = religious_rights }
					}
					if = {
						limit = { valid_rights_council_trigger = { VASSAL = scope:recipient } }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = council_rights }
					}
					#New government obligations
					if = {
						limit = { has_government = prefeudal_government }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = prefeudal_government_obligation }
					}
					if = {
						limit = { has_government = subroman_government }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = subroman_government_taxes }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = subroman_government_levies }
					}
					if = {
						limit = { has_government = gubernatorial_government }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = gubernatorial_taxes }
					}
					if = {
						limit = { has_government = gupta_government }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = gupta_government_taxes }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = gupta_government_levies }
					}
					if = {
						limit = { has_government = eranshar_government }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = eranshar_marzban_contract }
					}
					#Special Contracts
					if = {
						limit = { valid_government_bureaucratic_special_trigger = yes }
						set_obligation_if_changed_effect = { OBLIGATION_TYPE = bureaucratic_special_contract }
					}
					#Tributary-Type Contracts
					if = {
						limit = { valid_government_foederatus_special_trigger = yes }
						set_obligation_if_changed_effect_tributaries_foederati_effect = { OBLIGATION_TYPE = foederatus_special_contract }
					}
					if = {
						limit = { vassal_contract_has_flag = tributary_installed_flag }
						set_obligation_if_changed_effect_tributaries_foederati_effect = { OBLIGATION_TYPE = tributary_special_contract }
					}
					if = {
						limit = { vassal_contract_has_flag = tributary_state_installed_flag }
						set_obligation_if_changed_effect_tributaries_foederati_effect = { OBLIGATION_TYPE = tributary_state_special_contract }
					}
					if = {
						limit = {
							valid_bureacratic_vassal_governance_vassal_gov_trigger = yes
							scope:actor = { valid_bureacratic_vassal_governance_liege_gov_trigger = yes }
						}
						set_obligation_if_changed_effect_bureaucratic_vassal_governance_effect = { OBLIGATION_TYPE = bureaucratic_vassal_governance }
					}
				}
			}
		}
	}
	##### Changed from Vanilla ^^^^^
	
	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	
	send_options_exclusive = no
}

##### Changed from Vanilla: Added support for new vassal contracts
##### Changed from Vanilla: Created additional logic to hide cases with unmodifiable vassal contracts
vassal_modify_vassal_contract_interaction = {
	special_interaction = modify_vassal_contract
	interface = modify_vassal_contract
	category = interaction_category_vassal
	common_interaction = yes
	
	send_name = "modify_vassal_contract_interaction_SEND"
	desc = vassal_modify_vassal_contract_interaction_desc
	
	force_notification = yes
	notification_text = MODIFY_VASSAL_CONTRACT_NOTIFICATION_TO_LIEGE
	
	redirect = {
		# need to reverse the role for the UI to work properly
		scope:recipient = {
			save_scope_as = secondary_recipient
		}
		scope:actor = {
			save_scope_as = recipient
		}

		scope:secondary_recipient = {
			save_scope_as = actor
		}
	}
	
	##### Changed from Vanilla vvvvv
	is_shown = {
		scope:recipient = {
			is_independent_ruler = no
			NOT = { this = scope:actor }
			liege = scope:actor
			##### Changed from Vanilla vvvvv
			OR = {
				#Unmodifiable contracts combined with modifiable contracts weirdness needs to be covered
				AND = {
					OR = {
						vassal_contract_has_flag = tributary_installed_flag
						vassal_contract_has_flag = tributary_state_installed_flag
						vassal_contract_has_flag = foederatus_contract_installed
					}
					has_government_without_modifiable_contracts_excluding_uniques_trigger = yes
				}
				AND = {
					vassal_contract_has_modifiable_obligations = yes
					has_government_without_modifiable_contracts_excluding_uniques_trigger = no
				}
			}
			##### Changed from Vanilla ^^^^^
		}
	}
	##### Changed from Vanilla ^^^^^
	
	is_valid_showing_failures_only = {
		scope:actor = { is_busy_in_events_localised = yes }
		NOT = { scope:recipient = { is_at_war_with = scope:actor } }
	}
	
	##### Changed from Vanilla vvvvv
	can_send = {
		trigger_if = { #If you're blocked we don't want to show anything else
			limit = { scope:recipient = { vassal_contract_is_blocked_from_modification = yes } }
			scope:recipient = { vassal_contract_is_blocked_from_modification = no }
		}
		trigger_else = {
			scope:recipient = {
				has_changed_contract_obligation_trigger = {
					WHO = scope:recipient
					LIEGE = scope:actor
				}
				
				# Must be an even trade overall
				custom_description = {
					text = "vassal_modify_vassal_contract_cannot_increase_obligation_level"
					object = scope:actor
					value = count_obligation_improvements_for_vassal_include_hook
					count_obligation_improvements_for_vassal_include_hook = 0
				}
				
				# Cannot change more than three things at once
				custom_description = {
					text = "vassal_modify_vassal_contract_obligation_change_limit"
					value = count_total_obligation_changes
					count_total_obligation_changes <= max_contract_changes
				}
			}
		}
		#Vassals with tributary-like contracts can't just free themselves via negotiation.
		trigger_if = {
			limit = { scope:recipient = { vassal_contract_has_flag = vassal_cant_modify_this_contract } }
			scope:recipient = {
				custom_description = {
					text = vassal_cannot_voluntarily_modify_this_contract
					NOR = {
						AND = {
							vassal_contract_has_flag = foederatus_contract_installed
							local_var:foederatus_special_contract != vassal_contract_obligation_level:foederatus_special_contract
						}
						AND = {
							vassal_contract_has_flag = tributary_installed_flag
							local_var:tributary_special_contract != vassal_contract_obligation_level:tributary_special_contract
						}
						AND = {
							vassal_contract_has_flag = tributary_state_installed_flag
							local_var:tributary_state_special_contract != vassal_contract_obligation_level:tributary_state_special_contract
						}
					}
				}
			}
		}
	}
	##### Changed from Vanilla ^^^^^
	
	auto_accept = yes
	
	##### Changed from Vanilla vvvvv
	on_accept = {
		scope:recipient = {
			send_interface_message = {
				type = msg_vassal_contract_change
				title = modify_vassal_contract_interaction_notification
				right_icon = scope:actor
				if = {
					limit = { always = scope:hook }
					use_hook = scope:actor
					add_achievement_flag_effect = { FLAG = achievement_fine_print_flag }
				}
				
				hidden_effect = { set_vassal_contract_modification_blocked = yes }
				
				if = {
					limit = { has_government = feudal_government }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = feudal_government_taxes }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = feudal_government_levies }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = special_contract }
				}
				if = {
					limit = { valid_government_rights_general_trigger = yes }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = fortification_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = coinage_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = succession_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = war_declaration_rights }
				}
				if = {
					limit = { valid_government_jizya_rights_trigger = yes }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = jizya_special_rights }
				}
				if = {
					limit = { valid_government_muslim_related_special_rights_trigger = yes }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = iqta_special_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = ghazi_special_rights }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = marriage_favor_rights }
				}
				if = {
					limit = { valid_title_revocation_rights_trigger = { VASSAL = scope:recipient } }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = title_revocation_rights }
				}
				if = {
					limit = {
						exists = local_var:religious_rights
						valid_religious_rights_trigger = { VASSAL = scope:recipient }
					}
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = religious_rights }
				}
				if = {
					limit = { valid_rights_council_trigger = { VASSAL = scope:recipient } }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = council_rights }
				}
				if = {
					limit = { has_government = prefeudal_government }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = prefeudal_government_obligation }
				}
				if = {
					limit = { has_government = subroman_government }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = subroman_government_taxes }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = subroman_government_levies }
				}
				if = {
					limit = { has_government = gubernatorial_government }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = gubernatorial_taxes }
				}
				if = {
					limit = { has_government = gupta_government }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = gupta_government_taxes }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = gupta_government_levies }
				}
				if = {
					limit = { has_government = eranshar_government }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = eranshar_marzban_contract }
				}
				if = {
					limit = { valid_government_bureaucratic_special_trigger = yes }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = bureaucratic_special_contract }
				}
				if = {
					limit = { valid_government_foederatus_special_trigger = yes }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = foederatus_special_contract }
				}
				if = {
					limit = { can_have_tributary_contract_trigger = yes }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = tributary_special_contract }
				}
				if = {
					limit = { can_have_tributary_state_contract_trigger = yes }
					set_obligation_if_changed_effect = { OBLIGATION_TYPE = tributary_state_special_contract }
				}
				if = {
					limit = {
						valid_bureacratic_vassal_governance_vassal_gov_trigger = yes
						scope:recipient = { valid_bureacratic_vassal_governance_liege_gov_trigger = yes }
					}
					set_obligation_if_changed_effect_bureaucratic_vassal_governance_effect = { OBLIGATION_TYPE = bureaucratic_vassal_governance }
				}
			}
		}
	}
	##### Changed from Vanilla ^^^^^
	
	send_option = {
		is_valid = {
			scope:recipient = {
				has_usable_hook = scope:actor
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:recipient = { has_usable_hook = scope:actor }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	send_options_exclusive = no
}
