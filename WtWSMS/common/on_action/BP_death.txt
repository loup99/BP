# character just about to die in root scope
# if a killer is know, it's set as scope:killer
#Triggered by code
on_death = {
	on_actions = {
		bp_shatter_tribal_peoples_without_leges_barbarorum
		bp_return_roman_dynastic_duchies_and_kingdoms_to_liege
		bp_destroy_specific_landless_titles
		bp_flag_roman_title_for_destruction
	}
}

bp_shatter_tribal_peoples_without_leges_barbarorum = {
	effect = {
		if = {
			limit = {
				has_game_rule = tribal_shatter_mechanic_enabled
				root = { government_has_flag = government_is_tribal }
				NOT = { root.culture = { has_innovation = innovation_social_stratification } }
				root.primary_title.tier >= tier_kingdom
			}
			every_held_title = {
				limit = { this.tier >= tier_kingdom }
				root = { destroy_title = prev }
			}
		}
	}
}

bp_return_roman_dynastic_duchies_and_kingdoms_to_liege = {
	effect = {
		if = {
			limit = {
				government_has_flag = titles_revert_to_top_liege_on_death
				is_independent_ruler = no
			}
			create_title_and_vassal_change = {
				type = revoked
				save_scope_as = change
				add_claim_on_loss = no
			}
			every_held_title = {
				limit = {
					#Titular Titles shouldn't be sent upwards
					trigger_if = {
						limit = { this = { is_titular = yes } }
						always = no
					}
					#Non-Titular Duchies/Kingdoms shouldn't be sent upwards if you properly control them
					trigger_else_if = {
						limit = { this.tier = tier_duchy }
						NOT = { this.duchy = root.capital_county.duchy }
					}
					trigger_else_if = {
						limit = { this.tier = tier_kingdom }
						always = yes
					}
					trigger_else_if = {
						limit = { this.tier = tier_county }
						NOT = { this.duchy = root.capital_county.duchy }
					}
					trigger_else = { always = no }
				}
				change_title_holder = {
					holder = root.top_liege
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
		}
	}
}

bp_destroy_specific_landless_titles = {
	trigger = {
		OR = {
			this.primary_title = title:d_laamp_severinus_of_noricum
			this.primary_title = title:d_laamp_ajax_of_suebia
		}
	}
	effect = {
		if = {
			limit = { this.primary_title = title:d_laamp_severinus_of_noricum }
			destroy_title = title:d_laamp_severinus_of_noricum
		}
		else_if = {
			limit = { this.primary_title = title:d_laamp_ajax_of_suebia }
			destroy_title = title:d_laamp_severinus_of_noricum
		}
	}
}

#We set a variable because then the title will be passed to a new char and we can check it then
#Otherwise, it would trigger directly when Nepos gets it, which would not be good.
bp_flag_roman_title_for_destruction = {
	trigger = {
		OR = {
			AND = {
				title:e_wre = { is_titular = yes }
				exists = title:e_wre.holder
			}
			AND = {
				title:e_byzantium = { is_titular = yes }
				exists = title:e_byzantium.holder
			}
			AND = {
				title:e_roman_empire = { is_titular = yes }
				exists = title:e_roman_empire.holder
			}
		}
	}
	effect = {
		if = {
			limit = {
				title:e_wre = { is_titular = yes }
				NOR = {
					any_realm_county = { this = title:c_roma }
					any_realm_county = { this = title:c_lombardia }
					any_realm_county = { this = title:c_ravenna }
					any_realm_county = { this = title:c_trier }
				}
			}
			title:e_wre = { set_variable = destroy_me }
		}
		else_if = {
			limit = {
				title:e_byzantium = { is_titular = yes }
				NOR = {
					any_realm_county = { this = title:c_byzantion }
					any_realm_county = { this = title:c_bithynia }
				}
			}
			title:e_byzantium = { set_variable = destroy_me }
		}
		else_if = {
			limit = {
				title:e_roman_empire = { is_titular = yes }
				NOR = {
					any_realm_county = { this = title:c_roma }
					any_realm_county = { this = title:c_lombardia }
					any_realm_county = { this = title:c_ravenna }
					any_realm_county = { this = title:c_trier }
					any_realm_county = { this = title:c_byzantion }
					any_realm_county = { this = title:c_bithynia }
				}
			}
			title:e_roman_empire = { set_variable = destroy_me }
		}
	}
}
