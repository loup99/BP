# All on-actions in this file provide scope:transfer_type unless otherwise noted
# scope:transfer_type has the following permutations:
# flag:conquest
# flag:conquest_holy_war
# flag:conquest_claim
# flag:conquest_populist
# flag:inheritance
# flag:abdication
# flag:destroyed
# flag:created
# flag:usurped
# flag:granted
# flag:revoked
# flag:election
# flag:independency
# flag:returned
# flag:leased_out
# flag:lease_revoked
# flag:faction_demand
# flag:swear_fealty

# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain = {
	events = {
		delay = { days = 1 }
		BP_roman_government_events.0001
	}
	on_actions = {
		#Government Handling stuff
		BP_set_government_id_effect_on_title_gain
		BP_handle_bureaucratic_succession
		BP_check_bureaucratic_state
		#Other stuff
		BP_prevent_title_grant_boostrapping
		BP_apply_title_laws
		BP_set_court_langauge
		#Other On Actions
		BP_fall_of_rome
		BP_remove_migration_modifiers
	}
}

BP_set_government_id_effect_on_title_gain = {
	effect = {
		set_government_id_effect = { THE_RULER = root }
	}
}

#Handle Bureaucratic succession for landed chars
BP_handle_bureaucratic_succession = {
	effect = {
		if = { #If the Empire is bureaucratic
			limit = { scope:title = { has_variable = bureaucratic_empire } }
			#If the holder has a valid precursor government, keep bureaucratic
			if = {
				limit = { valid_bureaucratic_election_precursor_governments_trigger = yes }
				convert_realm_to_bureaucratic_effect = yes
			}
			#Else, degrade government
			else = { degrade_roman_government_effect = yes }
		}
	}
}

#If we have some weird edge case, handle it
BP_check_bureaucratic_state = {
	effect = {
		#Only will fire if invalid state
		every_independent_ruler = { degrade_roman_government_effect = yes }
	}
}

#Give gubernatorial_government the correct title succession law
BP_apply_title_laws = {
	effect = {
		if = {
			limit = {
				scope:transfer_type = flag:granted
				root = { has_government = gubernatorial_government }
				scope:title.tier >= tier_duchy
			}
			scope:title = { remove_all_title_laws_effect = yes }
		}
		#Apply Title Specific Laws for specific governments
		if = {
			limit = { scope:title.tier = tier_empire }
			if = {
				limit = { has_government = bureaucratic_government }
				scope:title = { add_title_law = imperial_elective_succession_law }
			}
			else_if = {
				limit = { has_government = eranshar_government }
				scope:title = { add_title_law = mahestan_elective_succession_law }
			}
		}
	}
}

#Prevent government bootstrapping effect
BP_prevent_title_grant_boostrapping = {
	effect = {
		if = {
			limit = {
				OR = {
					scope:transfer_type = flag:granted
					scope:transfer_type = flag:usurpation
					scope:transfer_type = flag:abdication
					scope:transfer_type = flag:inheritance
					scope:transfer_type = flag:independency
				}
				#Only check if getting baronies/counties
				scope:title.tier <= tier_county
				#Only run this check the first time a char get a county or barony
				OR = {
					AND = {
						primary_title.tier = tier_county
						any_held_title = { count = 1 this.tier = tier_county }
					}
					AND = {
						primary_title.tier = tier_barony
						any_held_title = { count = 1 this.tier = tier_barony }
					}
				}
			}
			boostrap_prevention_effect = {
				THE_LANDED_TITLE = scope:title
				THE_PREVIOUS_HOLDER = scope:previous_holder
			}
		}
	}
}

#Keep Gupta and Bureaucratic Court Languages
BP_set_court_langauge = {
	effect = {
		if = { #General Wrapper
			limit = { scope:title = root.primary_title } #Fire only once per succession
			bp_specific_court_language_effect = { CHAR = root }
		}
	}
}

#Fires when Rome falls
BP_fall_of_rome = {
	effect = {
		if = {
			limit = {
				#Only shocking the first time...
				NOT = { has_global_variable = fall_of_rome }
				title:c_roma.holder = {
					OR = {
						fall_of_rome_trigger = yes
						any_liege_or_above = { fall_of_rome_trigger = yes }
					}
				}
			}
			#Prevent from firing twice
			set_global_variable = {
				name = fall_of_rome
				value = title:c_roma.holder
			}
			every_ruler = { #Inform all playable characters
				limit = { primary_title.tier >= tier_county }
				trigger_event = { id = bp_narrative_events.0001 }
			}
		}
	}
}

#Clean up migration modifiers on certain transfers
BP_remove_migration_modifiers = {
	effect = {
		if = {
			limit = {
				#Only cleanup for conquests
				OR = {
					scope:transfer_type = flag:conquest
					scope:transfer_type = flag:conquest_holy_war
					scope:transfer_type = flag:conquest_claim
					scope:transfer_type = flag:conquest_populist
				}
			}
			if = {
				limit = { scope:title.tier >= tier_county }
				every_county = {
					limit = { #Cleanup counties under the entire hierarchy
						OR = {
							this = scope:title
							this.duchy = scope:title
							this.kingdom = scope:title
							this.empire = scope:title
							holder = { target_is_liege_or_above = root } #Catch vassal
						}
					}
					#If counties under aristocracy/recent immigration modifiers are conquered by others,
					#remove the modifiers
					if = {
						limit = { this = { has_county_modifier = county_modifier_migration_recent_emigration } }
						this = { remove_county_modifier = county_modifier_migration_recent_emigration }
					}
					if = {
						limit = { this = { has_county_modifier = county_modifier_migration_recent_immigration } }
						this = { remove_county_modifier = county_modifier_migration_recent_immigration }
					}
					#Minor Aristocracy should be a little different
					if = {
						limit = {
							this = { has_county_modifier = county_modifier_minor_migration_minor_aristocracy }
							NOT = { this.holder.capital_county = { has_county_modifier = county_modifier_minor_migration_minor_aristocracy } }
							NOT = { this.holder.top_liege = this.previous_holder.top_liege }
						}
						this = { remove_county_modifier = county_modifier_minor_migration_minor_aristocracy }
					}
				}
			}
		}
	}
}

# A title is destroyed
# root = the holder before destruction
# scope:landed_title = the title that is being destroyed
# Does *not* provide scope:transfer_type
on_title_destroyed = {
	on_actions = {
		BP_swap_wre_for_italy
	}
}

#Change every e_wre kingdom to e_italy if WRE falls (i.e., has only 1 kingdom title)
BP_swap_wre_for_italy = {
	effect = {
		if = {
			limit = {
				NOT = { exists = title:e_wre.holder }
				any_kingdom = {
					count <= 1
					de_jure_liege = title:e_wre
				}
			}
			every_kingdom = {
				limit = { this.de_jure_liege = title:e_wre }
				set_de_jure_liege_title = title:e_italy
			}
		}
	}
}

# A title change makes the character rank down in the landed tiers (eg King -> Duke)
# root = character ranking down
# scope:title = old primary title
on_rank_down = {
	on_actions = {
		BP_bureaucratic_demotion
	}
}

BP_bureaucratic_demotion = {
	effect = {
		if = { #If we were demoted but not independent, just swap governments
			limit = {
				has_government = bureaucratic_government
				valid_bureaucratic_status_trigger = no
				valid_gubernatorial_status_trigger = yes
			}
			convert_realm_to_gubernatorial_effect = yes
		}
	}
}

# A title is lost by a character
# root = the old holder
# scope:title = the title that changes hands
# scope:new_holder = new holder.
on_title_lost = {
	on_actions = { BP_remove_title_related_character_modifiers }
}

#If you're no longer the head honcho, remove Senate approval
BP_remove_title_related_character_modifiers = {
	effect = {
		if = {
			limit = { NOT = { root = title:d_senate.holder.top_liege } }
			if = {
				limit = { has_character_modifier = approved_by_the_senate }
				remove_character_modifier = approved_by_the_senate
			}
			if = {
				limit = { has_character_modifier = rejected_by_the_senate }
				remove_character_modifier = rejected_by_the_senate
			}
			if = {
				limit = { has_character_modifier = ignored_the_senate }
				remove_character_modifier = ignored_the_senate
			}
		}
	}
}
