# All on-actions in this file provide scope:transfer_type unless otherwise noted
# scope:transfer_type has the following permutations:
# flag:conquest
# flag:conquest_holy_war
# flag:conquest_claim
# flag:conquest_populist
# flag:inheritance
# flag:abdication
# flag:destroyed
# flag:created
# flag:usurped
# flag:granted
# flag:revoked
# flag:election
# flag:independency
# flag:returned
# flag:leased_out
# flag:lease_revoked
# flag:faction_demand
# flag:swear_fealty

# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain = {
	events = {}
	on_actions = {
		#Government Handling stuff
		BP_degrade_roman_government
		#Other On Actions
		BP_fall_of_rome
	}
}

#If we have an invalid state for Roman governance, degrade it.
BP_degrade_roman_government = {
	effect = { degrade_roman_government_effect = yes }
}

#Fires when Rome falls
BP_fall_of_rome = {
	effect = {
		if = {
			limit = {
				#Only shocking the first time...
				NOT = { has_global_variable = fall_of_rome }
				#The top of Rome's hierarchy should be checked
				title:c_roma.holder.top_liege = { fall_of_rome_trigger = yes }
			}
			#Prevent from firing twice
			set_global_variable = {
				name = fall_of_rome
				value = title:c_roma.holder.top_liege
			}
			every_ruler = { #Inform all playable characters
				limit = { primary_title.tier >= tier_county }
				trigger_event = { id = bp_narrative_events.0001 }
			}
		}
	}
}

# A title is destroyed
# root = the holder before destruction
# scope:landed_title = the title that is being destroyed
# Does *not* provide scope:transfer_type
on_title_destroyed = {
	on_actions = {
		BP_degrade_roman_government
	}
}
