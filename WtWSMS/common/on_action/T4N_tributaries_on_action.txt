on_game_start_after_lobby= {
	on_actions = {
		delay = { months = 1 }
		T4N_on_monthly_tribute
	}
}

T4N_on_monthly_tribute = {
	effect = {
		every_suzerain = {
			# Determine if still a suzerain
			trigger_event = { id = tributaries.4 }
			# Income
			###trigger_event = { id = tributaries.5 }
		}
		trigger_event = {
			on_action = T4N_on_monthly_tribute
			months = 1
		}
	}
}


on_war_won_attacker = {
	# The war notifications are handled in `effect` instead of `events` due to order of operations.
	# `effect` fires on THIS tick, `events` fires on the NEXT tick, and the war gets destroyed between this tick and the next.
	on_actions = {
		T4N_tributaries_on_war_won_attacker
	}
}

T4N_tributaries_on_war_won_attacker = {
	effect = {
		if = {
			limit = {
				scope:defender = {
					OR = {
						is_tributary = yes
						is_suzerain = yes
					}
				}
			}
			scope:attacker = {
				save_scope_as = tributaries_slash_suzerain_war_winner
			}
			scope:defender = {
				save_scope_as = tributary_slash_suzerain_loser
			}
			scope:tributaries_slash_suzerain_war_winner = {
				trigger_event = { id = tributaries.3 days = 1 }
			}
		}
	} 
}


# A title is lost by a character
# root = the old holder
# scope:title = the title that changes hands
# scope:new_holder = new holder.
on_title_lost = {
	on_actions = {
		T4N_tributaries_on_title_lost
	}
}

T4N_tributaries_on_title_lost = {
	effect = {
		switch = {
			trigger = exists
			var:my_suzerain = { #TRIBUTARY case
				#Should only unset if not independent or unlanded
				if = { #Is now a vassal; simply unset tributary status
					limit = {
						is_landed = yes
						is_independent_ruler = no
					}
					unset_tributary_of_any_type = {
						SUZERAIN = root.var:my_suzerain
						TRIBUTARY = root
					}
				}
				else_if = { #Abdication; alive but no (functional) titles; pass to heir
					limit = { is_landed = no }
					this = { save_scope_as = the_old_tributary }
					pass_tributary_type_to_heir = {
						SCOPE = scope:the_old_tributary
						TYPE = scope:the_old_tributary.var:tributary_type
						NEW_TRIBUTARY = scope:new_holder #aka, guy who holds what was my last title
						NEW_SUZERAIN = scope:the_old_tributary.var:my_suzerain
					}
					unset_tributary_of_any_type = { #Remove the old coot as a tributary
						SUZERAIN = root.var:my_suzerain
						TRIBUTARY = root
					}
				}
				#Otherwise, we're still alive and independent and landed; do nothing
			}
			var:suzerain = { #SUZERAIN case
				if = {
					limit = {
						OR = {
							is_landed = no
							is_independent_ruler = no
							liege = scope:new_holder
						}
					}
					every_in_list = {
						variable = permanent_tributaries
						this = { save_temporary_scope_as = tributary_succ_var }
						pass_tributary_type_to_heir = {
							SCOPE = scope:tributary_succ_var
							TYPE = var:tributary_type
							TRIBUTARY = scope:tributary_succ_var
							NEW_RULER = scope:new_holder
						}
						remove_variable = tributary_succ_var
					}
					clear_variable_list = non_permanent_tributaries
				}
			}
		}
	}
}

# character just about to die in root scope
# if a killer is know, it's set as scope:killer
#Triggered by code
on_death = {
	on_actions = {
		T4N_tributaries_on_death
	}
}

T4N_tributaries_on_death = {
	effect = {
		if = {
			limit = { root = { exists = var:suzerain } }
			#Copy old Ruler tributaries list to his primary heir (on_death)
			#Root is old ruler
			every_in_list = {
				variable = permanent_tributaries
				this = { save_scope_as = tributary_succ_var }
				pass_tributary_type_to_heir = {
					SCOPE = scope:tributary_succ_var
					TYPE = var:tributary_type
					TRIBUTARY = prev
					NEW_RULER = root.primary_heir
				}
				remove_variable = tributary_succ_var
			}
			every_in_list = {
				variable = non_permanent_tributaries
				this = { save_scope_as = tributary_succ_var_np }
				unset_tributary = {
					TRIBUTARY = scope:tributary_succ_var_np
					TRIBUTARY_BASE_TYPE = flag:non_permanent
					PASSING_TO_HEIR = yes
				}
				remove_variable = tributary_succ_var_np
			}	
			remove_variable = suzerain
		}
		if = {
			limit = { root = { exists = var:my_suzerain } }
			debug_log = "I passed my_suzerain"
			#give the heir var:my_suzerain
			#Root is old tributary
			if = {
				limit = {
					is_permanent_tributary = {
						SUZERAIN = var:my_suzerain
						TRIBUTARY = root
					}
				}
				debug_log = "I passed trib type check"
				this = { save_scope_as = tributary_succ_var }
				pass_tributary_type_to_heir = {
					SCOPE = scope:tributary_succ_var
					TYPE = var:tributary_type
					TRIBUTARY = root.primary_heir
					NEW_RULER = root.var:my_suzerain
				}
				debug_log = "I Passed tributary pass effect"
				unset_tributary = {
					TRIBUTARY = root
					TRIBUTARY_BASE_TYPE = flag:permanent
					PASSING_TO_HEIR = yes
				}
				debug_log = "I passed unset"
				remove_variable = tributary_succ_var
			}
			else = {
				set_variable = { 
					name = tributary_succ_var_np
					value = this
				}
				unset_tributary = {
					TRIBUTARY = scope:tributary_succ_var_np
					TRIBUTARY_BASE_TYPE = flag:non_permanent
					PASSING_TO_HEIR = yes
				}
				remove_variable = tributary_succ_var_np
			}
		}
	}
}

on_game_start = {
	on_actions = {
		TTF_on_game_start
	}
}

TTF_on_game_start = {
	effect = {
		set_global_variable = {
			name = TTF_is_loaded
			value = yes
		}
	}
}