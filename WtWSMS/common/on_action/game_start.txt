# Empty scope
on_game_start = {
	events = {
		fp1_scandinavian_adventurers.0004	# FP1 - Organise Norse adventurers.
		fp1_scandinavian_adventurers.0011	# FP1 - Corral famous Norse adventurers that haven't done much yet.
		fp1_scandinavian_adventurers.0021	# FP1 - Mark game-start prioritised adventurers.
		#Guaranteed historical artifacts fixed spawning
		debug_portraits.1 					# Debug portraits for animation testing
		easteregg_event.0001				# Charna and Jakub duel.
	}

	effect = {
		#Epidemics 3 months grace
		set_global_variable = {
			name = start_epidemic_grace
			value = yes
			months = 3
		}

		### Every nomad and herder in the Steppe Region becomes tribal if DLC not enabled, pre-lobby history setup ###
		if = {
			limit = {
				has_mpo_dlc_trigger = no
			}
			# Change Nomad and Herder Holdings to Tribal Holdings for Tribals
			every_province = {
				limit = {
					OR = {
						has_holding_type = nomad_holding
						has_holding_type = herder_holding
					}
				}
				set_holding_type = tribal_holding
				county.holder ?= {
					if = {
						limit = {
							NOT = {
								has_government = tribal_government
							}
						}
						change_government = tribal_government
					}
				}
			}
		}
		
		#setup_tributaries_effect = yes # defined in 00_tributary_setup_effect.txt

		### RELIGIOUS THINGS ###
		# Set up Holy Site Buildings to be buildable in Holy Sites
		religion:islam_religion = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_mosque_01
					}
				}
			}
		}
		religion:christianity_religion = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_cathedral_01
					}
				}
			}
		}
		religion:zoroastrianism_religion = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_fire_temple_01
					}
				}
			}
		}
		every_religion_global = {
			limit = {
				OR = {
					this = religion:hinduism_religion
					this = religion:buddhism_religion
					this = religion:jainism_religion
					this = religion:tani_religion
					this = religion:bon_religion
				}
			}
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_indian_grand_temple_01
					}
				}
			}
		}
		every_religion_global = {
			limit = {
				is_in_family = rf_pagan
			}
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_pagan_grand_temple_01
					}
				}
			}
		}
		every_religion_global = {
			every_faith = {
				every_holy_site = {
					limit = {
						title_province = {
							has_special_building_slot = no
						}
					}
					title_province = {
						add_special_building_slot = holy_site_other_grand_temple_01
					}
				}
			}
		}

		# If your capital on game start is Mecca, you get the Hajjaj trait (since you can't Hajj to your capital)
		title:b_makka.county.holder = {
			if = {
				limit = {
					faith = { has_doctrine_parameter = mandatory_hajj }
					NOT = { has_trait = hajjaj }
				}
				# Have some Hajjaj
				add_trait = hajjaj
			}
		}

		### UNIVERSITIES ###
		title:b_fes.title_province = { add_special_building_slot = generic_university }
		title:b_bologna.title_province = { add_special_building_slot = generic_university }
		title:b_salamanca.title_province = { add_special_building_slot = generic_university }
		title:b_madrid.title_province = { add_special_building_slot = generic_university }
		title:b_oxford.title_province = { add_special_building_slot = generic_university }
		title:b_cambridge.title_province = { add_special_building_slot = generic_university }
		title:b_padua.title_province = { add_special_building_slot = generic_university }
		title:b_coimbra.title_province = { add_special_building_slot = generic_university }
		title:b_napoli.title_province = { add_special_building_slot = generic_university }
		title:b_milano.title_province = { add_special_building_slot = generic_university }
		title:b_praha.title_province = { add_special_building_slot = generic_university }
		title:b_perugia.title_province = { add_special_building_slot = generic_university }
		title:b_malappuram.title_province = { add_special_building_slot = generic_university }
		title:b_janakpur.title_province = { add_special_building_slot = generic_university }
		title:b_montlhery.title_province = { add_special_building_slot = generic_university } # Technically should be Paris, but that's occupied by Notre Dame
		title:b_qartajana.title_province = { add_special_building_slot = generic_university } # Technically should be Tunis, but that's occupied by a cathedral
		title:b_wazwan.title_province = { add_special_building_slot = generic_university } # Technically should be Isfahan, but that's occupied by the Friday Mosque
		title:b_sarsar.title_province = { add_special_building_slot = generic_university } # Technically should be Baghdad, but that's occupied by the House of Wisdom
		title:b_speyer.title_province = { add_special_building_slot = generic_university } # 1350ish, should be in Heidelberg but that's a church
		title:b_krakow.title_province = { add_special_building_slot = generic_university } # 1364
		title:b_pisa.title_province = { add_special_building_slot = generic_university } # 1350ish
		title:b_rostock.title_province = { add_special_building_slot = generic_university } # 1400ish
		title:b_turin.title_province = { add_special_building_slot = generic_university } # 1400ish
		title:b_ferrara.title_province = { add_special_building_slot = generic_university } # 1400ish
		title:b_leipzig.title_province = { add_special_building_slot = generic_university } # 1400ish, a city holding
		title:b_messina.title_province = { add_special_building_slot = generic_university }  # 1400ish, should be in Catania but that's a church
		if = {
			limit = {
				has_cp3_dlc_trigger = yes
			}
			title:b_sitges.title_province = { add_special_building_slot = generic_university } # Should be Barcelona but that location has another building now
		}
		else = {
			title:b_barcelona.title_province = { add_special_building_slot = generic_university } # 1450ish, but still fun to build
		}
		title:b_dumbarton.title_province = { add_special_building_slot = generic_university } # 1450ish, but still fun to build
		title:b_bidar.title_province = { add_special_building_slot = generic_university } # 1450ish, but still fun to build

		if = {
			limit = {
				has_cp3_dlc_trigger = yes
			}
			title:b_barcelona.title_province = { add_special_building_slot = drassanes_01 } #1892
			title:b_merv.title_province = { add_special_building = kyz_kala_01 } #4238
			if = { limit = { game_start_date >= 1178.10.1 } title:b_cluny.title_province = { add_special_building = cluny_abbey_02 } } #2304
			else_if = { limit = { game_start_date >= 1066.9.15 } title:b_cluny.title_province = { add_special_building = cluny_abbey_01 } }
			else = { title:b_cluny.title_province = { add_special_building_slot = cluny_abbey_01 } }
			title:b_york.title_province = { add_special_building = york_walls_01 } #1595
			title:b_damascus.title_province = { add_special_building = damascus_mosque_01 } #5924
			title:b_lhasa.title_province = { add_special_building = jokhang_01 } #9237
			if = { limit = { game_start_date >= 1178.10.1 } title:b_schmalkalden.title_province = { add_special_building = wartburg_01 } } #3010
			else = { title:b_schmalkalden.title_province = { add_special_building_slot = wartburg_01 } }
			title:b_lalibela.title_province = { add_special_building_slot = beta_giyorgis_01 } #8301
			if = { limit = { game_start_date >= 1066.9.15 } title:b_novgorod.title_province = { add_special_building = holy_wisdom_01 } } #5137
			else = { title:b_novgorod.title_province = { add_special_building_slot = holy_wisdom_01 } }
			title:b_kano.title_province = { add_special_building_slot = kano_walls_01 } #6519
			#NOTE: b_somapur already has a special building
			title:b_somapur.title_province = { remove_building = generic_university add_special_building = somapura_university_01 } #848
			if = { limit = { game_start_date >= 1178.10.1 } title:b_firenze.title_province = { add_special_building = duomo_florence_02 } } #2543
			else = { title:b_firenze.title_province = { add_special_building = duomo_florence_01 } }
			title:b_konarak.title_province = { add_special_building_slot = konark_temple_01 } #928
			title:b_fes.title_province = { add_special_building = al_qarawiyyin_university_01 } #4694
			title:b_kairouan.title_province = { add_special_building = kairouan_basins_01 } #4594
			title:b_al-ghaba.title_province = { add_special_building = ghana_palace_01 } #6628 #NOTE: likely existed since the 8th, but earliest (only) source on palace is from 1068
			title:b_visegrad_hun.title_province = { add_special_building_slot = visegrad_castle_01 } #3803
			if = { limit = { game_start_date >= 1161.9.15 } title:b_leczyca.title_province = { add_special_building = wawel_cathedral_01 } } #4924 #Date of consecreation of Archcollegiate Church of St. Mary and St. Alexius in Tum
			else = { title:b_leczyca.title_province = { add_special_building_slot = wawel_cathedral_01 } }
			title:b_vatapi.title_province = { add_special_building = vatapi_caves_01 } #1198
			if = { limit = { game_start_date >= 1178.10.1 } title:b_jaisalmer.title_province = { add_special_building = jaisalmer_fort_01 } } #3387
			else = { title:b_jaisalmer.title_province = { add_special_building_slot = jaisalmer_fort_01 } } #3387
		}

		### COA ###
		if = {
			limit = {
				game_start_date <= 1000.1.1
			}
			title:e_scandinavia = { set_coa = e_scandinavia_norse }
			title:k_sweden = { set_coa = k_sweden_norse }
			title:d_svealand = { set_coa = d_svealand_norse }
			title:c_upland = { set_coa = c_upland_norse }
			title:c_gastrikland = { set_coa = c_gastrikland_norse }
			title:c_sodermannaland = { set_coa = c_sodermannaland_norse }
			title:c_aland = { set_coa = c_aland_norse }
			title:d_bergslagen = { set_coa = d_bergslagen_norse }
			title:c_vastmanland = { set_coa = c_vastmanland_norse  }
			title:c_varmland = { set_coa = c_varmland_norse }
			title:c_dalarna = { set_coa = c_dalarna_norse }
			title:c_dalabergslagen = { set_coa = c_dalabergslagen_norse }
			title:d_vastergotland = { set_coa = d_vastergotland_norse }
			title:c_vastergotland = { set_coa = c_vastergotland_norse }
			title:c_skara = { set_coa = c_skara_norse }
			title:c_dal = { set_coa = c_dal_norse }
			title:c_nordmark = { set_coa = c_nordmark_norse }
			title:d_ostergotland = { set_coa = d_ostergotland_norse }
			title:c_ostergotland = { set_coa = c_ostergotland_norse }
			title:c_kinda = { set_coa = c_kinda_norse }
			title:c_narke = { set_coa = c_narke_norse }
			title:d_smaland = { set_coa = d_smaland_norse }
			title:c_more = { set_coa = c_more_norse }
			title:c_sevede = { set_coa = c_sevede_norse }
			title:c_varend = { set_coa = c_varend_norse }
			title:c_njudung = { set_coa = c_njudung_norse }
			title:c_finnveden = { set_coa = c_finnveden_norse }
			title:c_oland = { set_coa = c_oland_norse }
			title:d_norrland = { set_coa = d_norrland_norse }
			title:c_halsingland = { set_coa = c_halsingland_norse }
			title:c_medelpad = { set_coa = c_medelpad_norse }
			title:c_angermanland = { set_coa = c_angermanland_norse }
			title:d_gotland = { set_coa = d_gotland_norse }
			title:c_gutland = { set_coa = c_gutland_norse }
			title:k_norway = { set_coa = k_norway_norse }
			title:d_viken = { set_coa = d_viken_norse }
			title:c_vingulmork = { set_coa = c_vingulmork_norse }
			title:c_raniriki = { set_coa = c_raniriki_norse }
			title:c_vestfold = { set_coa = c_vestfold_norse }
			title:c_telemark = { set_coa = c_telemark_norse }
			title:d_agder = { set_coa = d_agder_norse }
			title:c_nedenes = { set_coa = c_nedenes_norse }
			title:c_agdeside = { set_coa = c_agdeside_norse }
			title:d_vestlandi = { set_coa = d_vestlandi_norse }
			title:c_rogalandi = { set_coa = c_rogalandi_norse }
			title:c_hordalandi = { set_coa = c_hordalandi_norse }
			title:c_sogn = { set_coa = c_sogn_norse }
			title:d_trandalog = { set_coa = d_trandalog_norse }
			title:c_trandheim = { set_coa = c_trandheim_norse }
			title:c_norwegian_more = { set_coa = c_norwegian_more_norse }
			title:c_firdafylki = { set_coa = c_firdafylki_norse }
			title:d_dalir = { set_coa = d_dalir_norse }
			title:c_hedmork = { set_coa = c_hedmork_norse }
			title:c_gudbrandsdalir = { set_coa = c_gudbrandsdalir_norse }
			title:c_eystridalir = { set_coa = c_eystridalir_norse }
			title:c_gauldala = { set_coa = c_gauldala_norse }
			title:d_halogaland = { set_coa = d_halogaland_norse }
			title:c_vastvag = { set_coa = c_vastvag_norse }
			title:c_bothin = { set_coa = c_bothin_norse }
			title:c_namdalfylki = { set_coa = c_namdalfylki_norse }
			title:d_iceland = { set_coa = d_iceland_norse }
			title:c_vestisland = { set_coa = c_vestisland_norse }
			title:c_nordrland = { set_coa = c_nordrland_norse }
			title:c_austisland = { set_coa = c_austisland_norse }
			title:c_sudurland = { set_coa = c_sudurland_norse }
			title:d_northern_isles = { set_coa = d_northern_isles_norse }
			title:c_orkney = { set_coa = c_orkney_norse }
			title:c_faereyar = { set_coa = c_faereyar_norse }
			title:c_shetland = { set_coa = c_shetland_norse }
			title:d_jamtland = { set_coa = d_jamtland_norse }
			title:c_jamtfir = { set_coa = c_jamtfir_norse }
			title:c_morarna = { set_coa = c_morarna_norse }
			title:c_helgum = { set_coa = c_helgum_norse }
			title:c_harjadalen = { set_coa = c_harjadalen_norse }
			title:k_denmark = { set_coa = k_denmark_norse }
			title:d_sjaelland = { set_coa = d_sjaelland_norse }
			title:c_sjaelland = { set_coa = c_sjaelland_norse }
			title:c_fyn = { set_coa = c_fyn_norse }
			title:c_lolland_falster = { set_coa = c_lolland_falster_norse }
			title:d_skane = { set_coa = d_skane_norse }
			title:c_skane = { set_coa = c_skane_norse }
			title:c_halland = { set_coa = c_halland_norse }
			title:c_bornholm = { set_coa = c_bornholm_norse }
			title:c_blekinge = { set_coa = c_blekinge_norse }
			title:d_jylland = { set_coa = d_jylland_norse }
			title:c_aarhus = { set_coa = c_aarhus_norse }
			title:c_viborg = { set_coa = c_viborg_norse }
			title:c_ringkobing = { set_coa = c_ringkobing_norse }
			title:c_aalborg = { set_coa = c_aalborg_norse }
			title:d_slesvig = { set_coa = d_slesvig_norse }
			title:c_slesvig = { set_coa = c_slesvig_norse }
			title:c_vorbasse = { set_coa = c_vorbasse_norse }
			title:c_ribe = { set_coa = c_ribe_norse }
			title:d_york = { set_coa = d_york_norse }
			title:c_east_riding = { set_coa = c_east_riding_norse }
			title:d_western_isles = { set_coa = d_western_isles_norse }
			title:c_inner_hebrides = { set_coa = c_inner_hebrides_norse  }
			title:c_dublin = { set_coa = c_dublin_norse }
			title:c_argyll = { set_coa = c_argyll_norse }
		}

		### GRANDEUR ###
		#Royal Court: Set starting Grandeur to be the same as Expected
		if = {
			limit = {
				has_dlc_feature = royal_court
			}
			every_character_with_royal_court = {
				set_current_court_grandeur = court_grandeur_minimum_expected
				apply_hold_court_grace_effect = yes
				# Stops Hold Court reminders at game start
				set_variable = {
					name = last_hold_court_date
					value = current_year
				}
			}
		}

		# Set up anyone who should be in a regency at start whether we have sources or not.
		## If you start as a child, incapable, or imprisoned, you get a regency.
		every_ruler = {
			if = {
				limit = {
					OR = {
						is_adult = no
						is_incapable = yes
						is_imprisoned = yes
					}
				}
				# We don't want to check over so many characters *twice*, so we check again inside the block to determine what type of regency to put 'em in.
				## Temporary Regencies.
				if = {
					limit = { is_imprisoned = yes }
					trigger_event = {
						id = diarchy.0001
						delayed = yes
					}
				}
				## Entrenched Regencies.
				else = {
					trigger_event = {
						id = diarchy.0011
						delayed = yes
					}
				}
			}
			if = {
				limit = {
					has_mpo_dlc_trigger = no
				}
				if = {
					limit = {
						has_government = nomad_government
					}
					change_government = tribal_government
				}
				else_if = {
					limit = {
						has_government = herder_government
					}
					change_government = tribal_government
				}
			}
		}

		### FERTILE LANDS ###
		# For deserts that are supposed to be very fertile
		title:c_taizz = { add_county_modifier = fertile_desert_mountains_modifier }
		title:c_mandab = { add_county_modifier = fertile_desert_mountains_modifier }
		title:c_zabid = { add_county_modifier = fertile_desert_mountains_modifier }
		title:c_sanaa = { add_county_modifier = fertile_desert_mountains_modifier }
		title:c_dathina = { add_county_modifier = fertile_desert_mountains_modifier }

		### HENDEKAPOLIS ###
		title:c_ionia = { add_county_modifier = dodekapolis_modifier }
		title:c_chios = { add_county_modifier = dodekapolis_modifier }
		title:c_aeolis = { add_county_modifier = dodekapolis_modifier }
		title:c_lesbos = { add_county_modifier = dodekapolis_modifier }

		### DEBUG GLOBAL VARIABLES ###
		# We set these here so that they present nicely and you can see when some variables register zero.

		# MPO Tribes of the North cultrad mechanic
		if = {
			limit = {
				has_dlc_feature = khans_of_the_steppe
			}
			every_county_in_region = {
				region = mpo_region_permafrost
				if = {
					limit = {
						holder.culture ?= culture
						culture = {
							has_cultural_parameter = permafrost_modifier_mechanic
						}
					}
					add_county_modifier = mpo_siberian_permafrost_modifier
				}
				else = {
					add_county_modifier = mpo_siberian_permafrost_modifier_bad
				}
				
			}
		}

		# Byzantine name game rule
		title:e_byzantium = {
			if = {
				limit = {
					has_game_rule = eastern_rome_name_of_byzantium
				}
				set_title_name = e_eastern_roman_empire
			}
			else_if = {
				limit = {
					has_game_rule = roman_empire_name_of_byzantium
				}
				set_title_name = e_roman_empire
			}
			else_if = {
				limit = {
					has_game_rule = romania_name_of_byzantium
				}
				set_title_name = e_romania_empire
			}
			else_if = {
				limit = {
					has_game_rule = empire_of_the_greeks_name_of_byzantium
				}
				set_title_name = e_empire_of_the_greeks
			}
			else_if = {
				limit = {
					has_game_rule = rhomaion_name_of_byzantium
				}
				set_title_name = e_rhomaion
			}
			else_if = {
				limit = {
					has_game_rule = unholy_roman_empire_name_of_byzantium
				}
				set_title_name = e_unholy_roman_empire
			}
		}
		
		# Admin - Let's give existing governors the Governor trait on game start
		every_independent_ruler = {
			limit = { government_allows = administrative }
			every_vassal = {
				limit = {
					is_governor = yes
					NOT = { has_trait = governor }
				}
				add_trait = governor
				add_trait_xp = {
					trait = governor
					value = {
						add = primary_title.title_held_years
						multiply = 2
					}
				}
			}
		}
	}
}

# Like on_game_start, except it is called once the host (or player, in single player) exits the lobby. Good for anything where you need to know who the players are, or what the game rules are
on_game_start_after_lobby = {
	effect = {
		# To prevent the Season Changes event from triggering on game start
		situation:the_great_steppe ?= {
			every_participant_group = {
				every_situation_group_participant = {
					set_variable = {
						name = steppe_game_start_var
						years = 1
					}
				}
			}
		}

		# Extra Nomad Regions
		#Sami
		if = {
		    limit = {
				has_mpo_dlc_trigger = yes
				has_game_rule = sami_nomad_region_on
			}
			start_situation = {
				type = game_rule_extra_nomads_sami
				start_phase = situation_steppe_abundant_grazing_season
				save_scope_as = my_situation
			}
			scope:my_situation = {
				every_situation_county = {
					limit = {
						holder = {
							OR = {
								culture = culture:sami
								culture = culture:karelian
								culture = culture:samoyed
							}
						}
					}
					holder = {
						set_variable = {
							name = steppe_game_start_var
							years = 1
						}
						every_held_title = {
							if = {
								limit = {
									title_province = {
										has_holding_type = tribal_holding
									}
								}
								title_province = {
									set_holding_type = nomad_holding
								}
							}
						}
						change_government = nomad_government
					}
				}
			}
		}
		#Arabia
		if = {
		    limit = {
				has_mpo_dlc_trigger = yes
				has_game_rule = arabia_nomad_region_on
			}
			start_situation = {
				type = game_rule_extra_nomads_arabs
				start_phase = situation_steppe_severe_drought_season
				save_scope_as = my_situation
				sub_region = {
					key = arabia_nomads
					start_phase = situation_steppe_severe_drought_season
					map_color = { 34 255 76 }
					geographical_regions = { arab_nomad_area }
				}
				sub_region = {
					key = egypt_nomads
					start_phase = situation_steppe_abundant_grazing_season
					map_color = { 24 155 76 }
					geographical_regions = { egypt_nomad_area }
				}
			}
			scope:my_situation = {
				every_situation_county = {
					limit = {
						holder = {
							government_has_flag = government_is_tribal
						}
					}
					holder = {
						set_variable = {
							name = steppe_game_start_var
							years = 1
						}
						every_held_title = {
							if = {
								limit = {
									title_province = {
										has_holding_type = tribal_holding
									}
								}
								title_province = {
									set_holding_type = nomad_holding
								}
							}
						}
						change_government = nomad_government
					}
				}
			}
		}
		#Sahel
		if = {
		    limit = {
				has_mpo_dlc_trigger = yes
				has_game_rule = sahel_nomad_region_on
			}
		    start_situation = { 
				type = game_rule_extra_nomads_sahel
				start_phase = situation_steppe_severe_drought_season
				save_scope_as = my_situation
				sub_region = {
					key = north_africa_nomads
					start_phase = situation_steppe_abundant_grazing_season
					map_color = { 155 62 0 }
					geographical_regions = { sahel_north_africa_nomad_area }
				}
				sub_region = {
					key = sahara_nomads
					start_phase = situation_steppe_severe_drought_season
					map_color = { 255 232 100 }
					geographical_regions = { sahel_desert_nomad_area }
				}
				sub_region = {
					key = sahel_nomads
					start_phase = situation_steppe_abundant_grazing_season
					map_color = { 100 46 92 }
					geographical_regions = { sahel_sub_saharan_africa_nomad_area }
				}
			}
			scope:my_situation = {
				every_situation_county = {
					limit = {
						holder = {
							government_has_flag = government_is_tribal
							OR = {
								culture = { has_cultural_pillar = heritage_berber }
								culture = culture:bedouin
							}
						}
					}
					holder = {
						set_variable = {
							name = steppe_game_start_var
							years = 1
						}
						every_held_title = {
							if = {
								limit = {
									title_province = {
										has_holding_type = tribal_holding
									}
								}
								title_province = {
									set_holding_type = nomad_holding
								}
							}
						}
						change_government = nomad_government
					}
				}
			}
		}	
		#Horn of Africa
		if = {
		    limit = {
				has_mpo_dlc_trigger = yes
				has_game_rule = horn_of_africa_nomad_region_on
			}
		    start_situation = { 
				type = game_rule_extra_nomads_horn
				start_phase = situation_steppe_severe_drought_season
				save_scope_as = my_situation
			}
			scope:my_situation = {
				every_situation_county = {
					limit = {
						holder = {
							government_has_flag = government_is_tribal
							OR = {
								culture = culture:somali
								culture = culture:beja
								culture = culture:afar
								culture = culture:bedouin
							}
						}
					}
					holder = {
						set_variable = {
							name = steppe_game_start_var
							years = 1
						}
						every_held_title = {
							if = {
								limit = {
									title_province = {
										has_holding_type = tribal_holding
									}
								}
								title_province = {
									set_holding_type = nomad_holding
								}
							}
						}
						change_government = nomad_government
					}
				}
			}
		}
		# Make sure that Realm Priests are landed theocrats where it makes sense
		every_ruler = {
			limit = {
				highest_held_title_tier >= tier_duchy
			}
			if = {
				limit = {
					exists = cp:councillor_court_chaplain
					cp:councillor_court_chaplain = {
						is_ruler = no
					}
					faith = { has_doctrine = doctrine_clerical_succession_spiritual_fixed_appointment }
					any_vassal = {
						is_physically_able_adult = yes
						is_councillor = no
						government_has_flag = government_is_theocracy
						can_be_court_chaplain_trigger = { COURT_OWNER = liege }
						faith = liege.faith
					}
				}
				random_vassal = {
					limit = {
						is_physically_able_adult = yes
						is_councillor = no
						government_has_flag = government_is_theocracy
						can_be_court_chaplain_trigger = { COURT_OWNER = liege }
						faith = liege.faith
					}
					weight = {
						base = 1
						modifier = {
							add = 1000
							faith.religious_head ?= this
						}
						modifier = {
							add = learning
						}
						modifier = {
							add = primary_title.tier
						}
					}
					liege = {
						assign_councillor_type = {
							type = councillor_court_chaplain
							remove_existing_councillor = yes
							target = prev
						}
					}
				}
			}
			if = {
				limit = {
					is_landless_adventurer = yes
				}
				if = { limit = { has_realm_law = crown_authority_0 } remove_realm_law = crown_authority_0 }
			}
		}

		### Every nomad in the Steppe Region gets their yurt domicile goodies ###
		if = {
			limit = {
				has_mpo_dlc_trigger = yes
			}
			every_ruler = {
				limit = {
					is_landed = yes
					government_has_flag = government_is_nomadic
				}
				save_scope_as = holder
				if = {
					limit = {
						NOT = {
							any_held_title = {
								is_nomad_title = yes
							}
						}
					}
					create_nomad_title = {
						name = nomad_title_name
						holder = scope:holder
						government = nomad_government
						save_scope_as = new_nomad_title
					}
				}
				if = {
					limit = {
						exists = situation:the_great_steppe
						any_character_situation = {
							this = situation:the_great_steppe
						}
					}
					add_trait = nomadic_philosophy
					dynasty ?= {
						every_dynasty_member = {
							limit = {
								top_liege ?= {
									government_has_flag = government_is_nomadic
								}
							}
							add_trait = nomadic_philosophy
						}
					}
				}
				every_pool_guest = {
					death = {
						death_reason = death_vanished
					}
				}
				save_scope_as = nickname_override
				switch = {
					trigger = primary_title.tier
					tier_county = {
						add_gold = {
							value = {
								value = 0
								add = { 25 40 }
								multiply = gold_value_scale_by_era
							}
						}
						random_list = {
							10 = {
								recruit_three_nomadic_capital_characters_effect = {
									NOMAD_TEMPLATE_CHARACTER = nomadic_hunter_template
								}
							}
							10 = {
								recruit_three_nomadic_capital_characters_effect = {
									NOMAD_TEMPLATE_CHARACTER = nomadic_knight_template
								}
							}
						}
					}
					tier_duchy = {
						add_gold = {
							value = {
								value = 0
								add = { 50 80 }
								multiply = gold_value_scale_by_era
							}
						}
						add_realm_law_skip_effects = nomadic_authority_2
						domicile ?= {
							add_domicile_building = yurt_main_02
							add_random_yurt_external_building_effect = yes
							add_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
						}
						recruit_three_nomadic_capital_characters_effect = {
							NOMAD_TEMPLATE_CHARACTER = nomadic_bride_template
						}
						random_list = {
							10 = {
								recruit_three_nomadic_capital_characters_effect = {
									NOMAD_TEMPLATE_CHARACTER = nomadic_hunter_template
								}
							}
							10 = {
								recruit_three_nomadic_capital_characters_effect = {
									NOMAD_TEMPLATE_CHARACTER = nomadic_knight_template
								}
							}
						}
					}
					tier_kingdom = {
						add_gold = {
							value = {
								value = 0
								add = { 100 125 }
								multiply = gold_value_scale_by_era
							}
						}
						add_realm_law_skip_effects = nomadic_authority_3
						domicile ?= {
							add_domicile_building = yurt_main_02
							add_domicile_building = yurt_main_03
							add_random_yurt_external_building_effect = yes
							add_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
						}
						recruit_three_nomadic_capital_characters_effect = {
							NOMAD_TEMPLATE_CHARACTER = nomadic_bride_template
						}
						recruit_three_nomadic_capital_characters_effect = {
							NOMAD_TEMPLATE_CHARACTER = nomadic_hunter_template
						}
						recruit_three_nomadic_capital_characters_effect = {
							NOMAD_TEMPLATE_CHARACTER = nomadic_knight_template
						}
					}
					tier_empire = {
						add_gold = {
							value = {
								value = 0
								add = { 150 200 }
								multiply = gold_value_scale_by_era
							}
						}
						add_realm_law_skip_effects = nomadic_authority_3
						domicile ?= {
							add_domicile_building = yurt_main_02
							add_domicile_building = yurt_main_03
							add_domicile_building = yurt_main_04
							add_random_yurt_external_building_effect = yes
							add_random_yurt_external_building_effect = yes
							add_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
							upgrade_random_yurt_external_building_effect = yes
						}
						recruit_three_nomadic_capital_characters_effect = {
							NOMAD_TEMPLATE_CHARACTER = nomadic_bride_template
						}
						recruit_three_nomadic_capital_characters_effect = {
							NOMAD_TEMPLATE_CHARACTER = nomadic_hunter_template
						}
						recruit_three_nomadic_capital_characters_effect = {
							NOMAD_TEMPLATE_CHARACTER = nomadic_knight_template
						}
					}
				}
				if = {
					limit = {
						has_royal_court = yes
						NOT = { has_court_type = court_nomadic }
					}
					set_court_type = court_nomadic
				}
			}
			every_ruler = {
				limit = {
					government_has_flag = government_is_herder
				}
				if = {
					limit = { gold >= 30 }
					remove_short_term_gold = 27
				}
				else_if = {
					limit = { gold >= 25 }
					remove_short_term_gold = 22
				}
				else_if = {
					limit = { gold >= 20 }
					remove_short_term_gold = 18
				}
				else_if = {
					limit = { gold >= 15 }
					remove_short_term_gold = 11
				}
				else_if = {
					limit = { gold >= 10 }
					remove_short_term_gold = 5
				}
				# We're fine with them having 10 gold max
				
				if = {
					limit = {
						is_ai = no
					}
					every_held_title = {
						limit = {
							tier = tier_county
							title_province = {
								has_holding_type = herder_holding
							}
						}
						title_province = {
							set_holding_type = nomad_holding
						}
					}
					change_government = nomad_government
				}
			}
			recalculate_cultural_heads_of_type = herd
		}

		### GAME RULE: VIEW ON SAME-SEX RELATIONS
		if = {
			limit = { has_game_rule = accepted_same_sex_relations }
			game_rule_accepted_same_sex_relations_effect = yes
		}

		### GAME RULE: RANDOM RULER PLACEMENT
		if = {
			limit = { NOT = { has_game_rule = random_ruler_placement_off } }
			game_rule_random_ruler_placement_effect = yes
		}

		### GAME RULE: RANDOMIZE FAITH
		if = {
			limit = { has_game_rule = randomized_faiths_on }
			game_rule_randomize_faith_effect = yes
		}

		### GAME RULE: FAITH ACCEPTANCE
		if = {
			limit = { has_game_rule = full_faith_acceptance }
			game_rule_faith_acceptance_effect = yes
		}

		### GAME RULE: GENDER EQUALITY ###
		if = {
			limit = { has_game_rule = full_gender_equality }
			game_rule_full_gender_equality_effect = yes
		}
		else_if = {
			limit = { has_game_rule = inversed_gender_equality }
			game_rule_inversed_gender_equality_effect = yes
		}

		### GAME RULE: SEXUALITY DISTRIBUTION ###
		if = {
			limit = { NOT = { has_game_rule = sexuality_distribution_default } }
			game_rule_sexuality_distribution_effect = yes
		}
		else = { # So that children 10+ starts with a sexuality
			child_sexuality_distribution_effect = yes
		}

		### GAME RULE: SITUATION TOGGLES
		struggle:iberian_struggle ?= {
			if = {
				limit = { has_game_rule = struggle_iberia_toggle_off }
				end_struggle = yes
			}
		}
		struggle:persian_struggle ?= {
			if = {
				limit = { has_game_rule = struggle_persia_toggle_off }
				end_struggle = yes
			}
		}
		situation:the_great_steppe ?= {
			if = {
				limit = { has_game_rule = situation_the_great_steppe_toggle_off }
				end_situation = yes
			}
		}

		### GAME RULE: EXTRA ADMINS
		## We'll be doing some excessive triggers below in a bid to lightly future-proof + error-spam mods less, don't worry about it.
		### We handle players after the lobby.
		# Historic chars.
		apply_historic_administrative_game_rule_effect = yes
		# Players.
		if = {
			limit = { has_dlc_feature = roads_to_power }
			if = {
				limit = {
					NOT = { has_game_rule = historicity_extra_admin_player_wherever_gameplay_not_administrative }
				}
				if = {
					limit = { has_game_rule = historicity_extra_admin_player_wherever_alt_historic_always }
					every_player = {
						limit = {
							highest_held_title_tier >= tier_kingdom
							NOR = {
								government_has_flag = government_is_administrative
								government_has_flag = government_is_landless_adventurer
							}
						}
						convert_to_administrative_from_feudalism_game_start_effect = yes
					}
				}
				else_if = {
					limit = { has_game_rule = historicity_extra_admin_player_wherever_alt_historic_with_august_trait }
					every_player = {
						limit = {
							highest_held_title_tier >= tier_kingdom
							NOR = {
								government_has_flag = government_is_administrative
								government_has_flag = government_is_landless_adventurer
							}
							has_trait = august
						}
						convert_to_administrative_from_feudalism_game_start_effect = yes
					}
				}
			}
		}

		# Give Ruler Designer characters regencies.
		every_in_global_list = {
			variable = rd_chars_needing_regencies
			trigger_event = diarchy.0011
			# Aaaand clean the list.
			save_temporary_scope_as = char_temp
			remove_list_global_variable = {
				name = rd_chars_needing_regencies
				target = scope:char_temp
			}
		}

##### Purge Achievements; sorry folks, but this is too much of a pain to maintain

		### CE1 LEGITIMACY SETUP ###
		every_ruler = {
			limit = {
				has_legitimacy = yes
			}
			add_legitimacy = base_legitimacy_value
		}

#### Basic adventurer stuff

		### EP3 SETUP ###
		if = {
			limit = { has_ep3_dlc_trigger = yes }
			### EP3 LAAMP SETUP ###
			# Resources.
			every_independent_ruler = {
				limit = {
					is_landless_adventurer = yes
					##### Changed from Vanilla vvvvv
					NOR = {
						this = character:55 #Odoacer
						this = character:70515 #Zeno
						this = title:d_laamp_odoacer_rugii.holder
						this = title:d_laamp_odoacer_heruli.holder
						this = title:d_laamp_odoacer_skirian.holder
					}
					##### Changed from Vanilla ^^^^^
				}
				# Cash.
				add_gold = {
					value = {
						value = 0
						add = prestige
						add = piety
						divide = 10
					}
				}
				save_temporary_scope_as = adventurer_scope
				# Set CoA
				primary_title = { set_coa = scope:adventurer_scope.house }
				# Cleanup characters
				every_councillor = {
					if = {
						limit = {
							NOR = {
								has_council_position = councillor_court_chaplain
								has_council_position = councillor_spouse
							}
						}
						scope:adventurer_scope = {
							fire_councillor = prev
						}
						remove_opinion = {
							modifier = fired_from_council_opinion
							target = scope:adventurer_scope
						}
					}
					else_if = {
						limit = {
							NOR = {
								is_close_or_extended_family_of = prev
								has_relation_lover = prev
								has_relation_friend = prev
								is_consort_of = prev
								has_council_position = councillor_spouse
							}
						}
						death = {
							death_reason = death_vanished
						}
					}
				}
				# Evict everyone who isn't your family from your camp.
				every_courtier = {
					limit = {
						prev = { save_temporary_scope_as = char_temp }
						NOR = {
							dynasty ?= scope:char_temp.dynasty
							is_imprisoned_by = scope:char_temp
							# Plus any relations, who are presumably meant to be here.
							has_important_relationship_with_character_trigger = { CHARACTER = scope:char_temp }
							# Catch bastards and such that may be left over.
							is_close_or_extended_family_of = scope:char_temp
						}
					}
					move_to_pool = yes
				}
				# Courtiers.
				trigger_event = ep3_laamps.1001
			}
			# Starting camp purposes.
			every_independent_ruler = {
				limit = {
					is_landless_adventurer = yes
					##### Changed from Vanilla vvvvv
					NOR = {
						this = character:55 #Odoacer
						this = character:70515 #Zeno
						this = title:d_laamp_odoacer_rugii.holder
						this = title:d_laamp_odoacer_heruli.holder
						this = title:d_laamp_odoacer_skirian.holder
					}
					##### Changed from Vanilla ^^^^^
				}
				# C... food.
				domicile = { change_provisions = starting_provisions_value }
				# Contracts
				if = {
					limit = { is_ai = no }
					# Set up additional firing contracts.
					player_adventurer_contract_generation_on_wait_in_place_effect = yes
					#generate contracts if you are far away from your previous location
					player_adventurer_contract_generation_on_domicile_moved_effect = yes
				}
				else = {
					create_story = { type = story_adventurer_ai }
					trigger_event = {
						on_action = on_adventurer_ai_new_employer_arrival
						days = { 10 30 }
					}
				}
				# Sort our starting flavourisation.
				if = {
					limit = { has_realm_law = camp_purpose_mercenaries }
					set_variable = flavourise_camp_purpose_mercenaries
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_wanderers }
					set_variable = flavourise_camp_purpose_wanderers
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_scholars }
					set_variable = flavourise_camp_purpose_scholars
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_explorers }
					set_variable = flavourise_camp_purpose_explorers
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_brigands }
					set_variable = flavourise_camp_purpose_brigands
				}
				else_if = {
					limit = { has_realm_law = camp_purpose_legitimists }
					set_variable = flavourise_camp_purpose_legitimists
				}
				# And tally our numbers for performance purposes.
				add_to_global_variable_list = {
					name = laamps_tally
					target = this.primary_title
				}
			}
			
			### EP3 ADMIN SETUP ###
			every_independent_ruler = {
				limit = { government_allows = administrative }
				save_scope_as = top_liege
				### EP3 NOBLE FAMILIES & DOMICILE SETUP ###
				random_held_title = { # May be removed once every_noble_family includes liege (TIT-51212)
					limit = { is_noble_family_title = yes }
					set_coa = scope:top_liege.house
				}
				every_noble_family = {
					# Ensure Noble Family CoA match House
					set_coa = holder.house
					# Ensure holders of historical noble family titles are the default house heads
					holder ?= {
						save_scope_as = nf_holder
						if = {
							limit = { is_landed = yes }
							capital_province = { save_scope_as = domicile_location }
						}
						house ?= {
							if = {
								limit = { house_head != scope:nf_holder }
								set_house_head = scope:nf_holder
							}
						}
					}
					set_color_from_title = scope:nf_holder.capital_county
				}
			}
		}
		# Byzantium naming
		title:e_byzantium = {
			if = {
				limit = {
					has_game_rule = eastern_rome_name_of_byzantium
				}
				set_title_name = e_eastern_roman_empire
			}
			else_if = {
				limit = {
					has_game_rule = roman_empire_name_of_byzantium
				}
				set_title_name = e_roman_empire
			}
			else_if = {
				limit = {
					has_game_rule = romania_name_of_byzantium
				}
				set_title_name = e_romania_empire
			}
			else_if = {
				limit = {
					has_game_rule = empire_of_the_greeks_name_of_byzantium
				}
				set_title_name = e_empire_of_the_greeks
			}
			else_if = {
				limit = {
					has_game_rule = rhomaion_name_of_byzantium
				}
				set_title_name = e_rhomaion
			}
			else_if = {
				limit = {
					has_game_rule = unholy_roman_empire_name_of_byzantium
				}
				set_title_name = e_unholy_roman_empire
			}
		}
		# Saharan stuff.
		every_county_in_region = {
			region = custom_sahara_proper
			# Every county is in the region, not every province of every county, so we go to county to avoid iterating over every world province _then_ check which ones are in the region.
			every_county_province = { apply_saharan_provisions_debuff_effect = yes }
		}
		# Purge family titles if Admin isn't enabled
		if = {
			limit = {
				NOT = { has_dlc_feature = roads_to_power }
			}
			every_ruler = {
				save_temporary_scope_as = this_ruler
				every_held_title = {
					limit = {
						has_title_law = noble_family_succession_law
					}
					scope:this_ruler = {
						destroy_title = prev
					}
				}
			}
		}
		#Fully Landlocked Nomad Cultures Setup
		if = {
			limit = {
				has_mpo_dlc_trigger = yes
			}
			every_culture_global = {
				limit = {
					OR = {
						has_cultural_pillar = heritage_mongolic
						has_cultural_pillar = heritage_ugro_permian
					}
				}
				add_to_global_variable_list = {
					name = fully_landlocked_nomad_cultures
					target = this
				}
			}
			add_to_global_variable_list = {
				name = fully_landlocked_nomad_cultures
				target = culture:kipchak
			}
			add_to_global_variable_list = {
				name = fully_landlocked_nomad_cultures
				target = culture:uyghur
			}
			add_to_global_variable_list = {
				name = fully_landlocked_nomad_cultures
				target = culture:kirghiz
			}
			add_to_global_variable_list = {
				name = fully_landlocked_nomad_cultures
				target = culture:tangut
			}
			add_to_global_variable_list = {
				name = fully_landlocked_nomad_cultures
				target = culture:bashkir
			}
			add_to_global_variable_list = {
				name = fully_landlocked_nomad_cultures
				target = culture:laktan
			}
		}

		# Nomad setup
		every_ruler = {
			limit = {
				government_has_flag = government_is_nomadic
			}
			every_councillor = {
				limit = {
					NOR = {
						has_council_position = councillor_spymaster
						has_council_position = councillor_court_chaplain
						has_council_position = councillor_spouse
					}
				}
				prev = { fire_councillor_skip_effects = prev }
				remove_opinion = {
					modifier = fired_from_council_opinion
					target = prev
				}
			}
			create_character = {
				employer = this
				random_traits = no
				culture = this.culture
				faith = this.faith
				gender_female_chance = 50

				random_traits_list = {
					count = 3
					# Personality traits
					lustful = {}
					deceitful = {}
					brave = {}
					gregarious = {}
					ambitious = {}
					vengeful = {}
					gluttonous = {}
					temperate  = {}
					greedy = {}
					generous = {}
					lazy = {}
					diligent = {}
					wrathful = {}
					calm = {}
					patient = {}
					impatient = {}
					arrogant = {}
					honest = {}
					arbitrary = {}
					just = {}
					paranoid = {}
					trusting = {}
					compassionate = {}
					callous = {}
					sadistic = {}
					stubborn = {}
					fickle = {}
					forgiving = {}
					shy = {}
				}
				random_traits_list = {
					count = 1
					education_learning_3 = {}
					education_learning_4 = {}
				}
				random_traits_list = {
					count = { 0 1 }
					# Lifestyle traits
					lifestyle_herbalist = {}
					lifestyle_mystic = {}
				}
				martial = {
					min_template_low_skill
					max_template_average_skill
				}
				stewardship = {
					min_template_low_skill
					max_template_average_skill
				}
				diplomacy = {
					min_template_low_skill
					max_template_average_skill
				}
				intrigue = {
					min_template_low_skill
					max_template_medium_skill
				}
				learning = {
					min_template_high_skill
					max_template_high_skill
				}

				after_creation = {
					save_scope_as = astrologer_character
					prev = {
						appoint_court_position = {
							recipient = scope:astrologer_character
							court_position = court_astrologer_court_position
						}
					}
				}
			}
			if = {
				limit = {
					OR = {
						NOT = { exists = cp:councillor_kurultai_1 }
						NOT = { exists = cp:councillor_kurultai_2 }
						NOT = { exists = cp:councillor_kurultai_3 }
						NOT = { exists = cp:councillor_kurultai_4 }
					}
				}
				ordered_vassal = {
					order_by = current_military_strength
					limit = {
						is_councillor = no
					}
					make_councillor_start_up_effect = yes
				}
			}
			if = {
				limit = {
					OR = {
						NOT = { exists = cp:councillor_kurultai_1 }
						NOT = { exists = cp:councillor_kurultai_2 }
						NOT = { exists = cp:councillor_kurultai_3 }
						NOT = { exists = cp:councillor_kurultai_4 }
					}
				}
				every_knight = {
					limit = {
						is_councillor = no
					}
					make_councillor_start_up_effect = yes
				}
			}
			ordered_councillor = {
				order_by = stewardship
				position = 0
				limit = {
					NOR = {
						has_council_position = councillor_spymaster
						has_council_position = councillor_court_chaplain
						has_council_position = councillor_spouse
					}
				}
				switch = {
					trigger = this
					liege_or_court_owner.cp:councillor_kurultai_1 = {
						set_council_task = {
							task_type = task_kurultai_fertility_1
							target = liege_or_court_owner.capital_province
						}
					}
					liege_or_court_owner.cp:councillor_kurultai_2 = {
						set_council_task = {
							task_type = task_kurultai_fertility_2
							target = liege_or_court_owner.capital_province
						}
					}
					liege_or_court_owner.cp:councillor_kurultai_3 = {
						set_council_task = {
							task_type = task_kurultai_fertility_3
							target = liege_or_court_owner.capital_province
						}
					}
					liege_or_court_owner.cp:councillor_kurultai_4 = {
						set_council_task = {
							task_type = task_kurultai_fertility_4
							target = liege_or_court_owner.capital_province
						}
					}
				}
			}
			ordered_councillor = {
				order_by = learning
				position = 0
				limit = {
					NOR = {
						has_council_position = councillor_spymaster
						has_council_position = councillor_court_chaplain
						has_council_position = councillor_spouse
						is_performing_council_task = task_kurultai_fertility_1
						is_performing_council_task = task_kurultai_fertility_2
						is_performing_council_task = task_kurultai_fertility_3
						is_performing_council_task = task_kurultai_fertility_4
					}
				}
				switch = {
					trigger = this
					liege_or_court_owner.cp:councillor_kurultai_1 = {
						set_council_task = {
							task_type = task_kurultai_court_astrologer_1
							target = liege_or_court_owner.capital_province
						}
					}
					liege_or_court_owner.cp:councillor_kurultai_2 = {
						set_council_task = {
							task_type = task_kurultai_court_astrologer_2
							target = liege_or_court_owner.capital_province
						}
					}
					liege_or_court_owner.cp:councillor_kurultai_3 = {
						set_council_task = {
							task_type = task_kurultai_court_astrologer_3
							target = liege_or_court_owner.capital_province
						}
					}
					liege_or_court_owner.cp:councillor_kurultai_4 = {
						set_council_task = {
							task_type = task_kurultai_court_astrologer_4
							target = liege_or_court_owner.capital_province
						}
					}
				}
			}
		}

		every_county_in_region = {
			region = world_steppe
			limit = {
				uses_county_fertility = yes
			}

			if = {
				limit = {
					holder = {
						government_has_flag = government_is_nomadic
					}
					county_fertility > 20
					county_fertility <= 90
				}
				switch = {
					trigger = holder.primary_title.tier
					tier_empire = {
						change_county_fertility = { 16 32 }
					}
					tier_kingdom = {
						change_county_fertility = { 12 16 }
					}
					tier_duchy = {
						change_county_fertility = { 8 12 }
					}
					tier_county = {
						change_county_fertility = { 2 8 }
					}
				}
			}
			else_if = {
				limit = {
					holder = {
						government_has_flag = government_is_herder
					}
				}
				change_county_fertility = { 44 64 }
 			}
		}

		#Nomadic Philosophy lobby added realms
		every_ruler = {
			limit = {
				government_has_flag = government_is_nomadic
				exists = situation:the_great_steppe
				any_character_situation = {
					this = situation:the_great_steppe
				}
				NOT = {
					has_trait = nomadic_philosophy
				}
			}
			add_trait = nomadic_philosophy
			dynasty ?= {
				every_dynasty_member = {
					limit = {
						top_liege ?= {
							government_has_flag = government_is_nomadic
						}
					}
					add_trait = nomadic_philosophy
				}
			}
		}

		# Sanity check the setup if in debug mode
		if = {
			limit = {
				debug_only = yes
			}
			run_setup_tests_effect = yes
		}
		set_global_variable = game_has_started
	}
	events = {
		game_rule.1000	#Autopopulate families.
		####game_rule.1011	#Hungarian Migration management.
		####historical_artifacts.0023			# Historical Artifacts Generator
		mpo_misc.0002 # Have the AI release herders if over domain limit
	}
}

#$CHARACTER$.house = {
#			save_scope_as = character_house
#
#			add_unity_value = {
#				value = {
#					value = $VALUE$
#					if = { # House heads have a larger impact on unity
#						limit = { house_head = $CHARACTER$ }
#						multiply = unity_house_head_multiplier_value
#					}
#				}
#				character = $CHARACTER$
#				desc = $DESC$
#			}
#		}

##### Removed a number of inapplicable events and such