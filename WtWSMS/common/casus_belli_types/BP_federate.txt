federate_independence_war = {
	icon = independence_faction_war
	group = independence

	allow_hostages = no
	allowed_for_character = {
		scope:attacker = {
			this != suzerain # has a suzerain
			NOT = { obedience_target ?= suzerain } # if the attacker is subject to Obedience and their target is their suzerain, they cannot fight for their freedom
		}
		##### Changed from Vanilla vvvvv
		scope:attacker = { has_subject_contract_group = BP_federate_tributary }
		##### Changed from Vanilla ^^^^^
	}
	allowed_against_character = {
		scope:attacker = {
			suzerain = scope:defender
		}
	}

	cost = {
		prestige = {
			value = 0
			add = {
				value = 100
				desc = CB_BASE_COST
			}
			multiply = common_cb_prestige_cost_multiplier
		}
	}

	on_declaration = {
		on_declared_war = yes # this will also break the tributary agreement immediately
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = federate_independence_war_victory_desc_attacker
			}
			triggered_desc = {
				trigger = {
					scope:defender = {
						is_local_player = yes
					}
				}
				desc = federate_independence_war_victory_desc_defender
			}
			desc = federate_independence_war_victory_desc
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 Accolade glory gain from winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		scope:attacker = { 
			add_truce_both_ways = {
				character = scope:defender
				days = 1825
				war = root.war
				result = victory
			}
		}

		scope:defender = {
			# Struggle Catalyst
			hidden_effect = {
				if = {
					limit = {
						catalyst_gave_independence_to_powerful_diff_faith_culture_vassal_preliminary_trigger = {
							CHAR1 = scope:defender
							CHAR2 = scope:attacker
						}
						any_character_struggle = {
							involvement = involved
							activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
								CATALYST = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
								CHAR = scope:attacker
							}
						}
					}
					every_character_struggle = {
						involvement = involved
						limit = {
							activate_struggle_catalyst_secondary_character_involvement_either_trigger = {
								CATALYST = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
								CHAR = scope:attacker
							}
						}
						activate_struggle_catalyst = {
							catalyst = catalyst_gave_independence_to_powerful_diff_faith_culture_vassal
							character = scope:defender
						}
					}
				}
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = federate_independence_war_white_peace_defender_desc
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = federate_independence_war_white_peace_attacker_desc
			}
			desc = federate_independence_war_white_peace_desc
		}
	}

	on_white_peace = {
		set_default_federate_effect = { SUZERAIN = scope:defender }
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}
		hidden_effect = {
			scope:attacker = {
				add_truce_one_way = {
				 	character = scope:defender
					war = root.war
					result = white_peace
				}
			}
		}

		scope:defender = {
			add_prestige = minor_prestige_value
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = federate_independence_war_defeat_defender_desc
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
					}
				}
				desc = federate_independence_war_defeat_attacker_desc
			}
			desc = federate_independence_war_defeat_desc
		}
	}

	on_defeat = {
		start_tributary_from_war_effect = {
			TRIBUTARY = scope:attacker
			SUZERAIN = scope:defender
			WAR = root.war
		}

		scope:attacker = { show_pow_release_message_effect = yes }
		scope:defender = {
			add_dread = medium_dread_gain
			# Prestige for Defender
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = medium_prestige_value
			}
		}

		scope:attacker = {
			hard_imprison_character_effect = {
				TARGET = this
				IMPRISONER = scope:defender
			}
			scope:defender = {
				add_opinion = {
					target = prev
					modifier = vassal_lost_faction_revolt_war
				}
			}
		}
	}

	should_invalidate = {
		scope:attacker.overlord = scope:defender
		scope:defender.overlord = scope:attacker
	}

	on_invalidated_desc = msg_invalidate_war_title

	check_defender_inheritance_validity = no

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	transfer_behavior = transfer

	war_name = "INDEPENDENCE_WAR_NAME"

	interface_priority = 120

	attacker_wargoal_percentage = 0.8

	max_attacker_score_from_battles = 100
	max_defender_score_from_battles = 50
	
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150

	max_ai_diplo_distance_to_title = 500
}

federate_raid_war = {
	group = independence #Really just to mute can do features
	icon = struggle

	combine_into_one = yes
	should_show_war_goal_subview = yes
	allow_hostages = no
	mutually_exclusive_titles = { always = yes }
	interface_priority = 110
	
	attacker_score_from_occupation_scale = 150
	attacker_score_from_battles_scale = 150
	defender_score_from_battles_scale = 150

	allowed_for_character = {
		#Requires an appropriate DLC
		OR = {
			has_dlc_feature = the_fate_of_iberia
			has_dlc_feature = khans_of_the_steppe
			has_dlc_feature = roads_to_power
			has_dlc_feature = legacy_of_persia
		}
		NOT = { government_has_flag = government_is_landless_adventurer }
		has_subject_contract_group = BP_federate_tributary
	}

	allowed_against_character = {
		scope:attacker = {
			suzerain = scope:defender
		}
		# Defender must be bordering your realm.
		OR = {
			character_is_land_realm_neighbor = scope:attacker
			AND = {
				exists = scope:attacker.liege
				character_is_land_realm_neighbor = scope:attacker.liege
			}
		}
	}

	target_titles = neighbor_land # border
	target_title_tier = county # county
	target_de_jure_regions_above = no
	ignore_effect = change_title_holder

	ai_score_mult = {
		value = fp2_border_raid_ai_targeting_value
		#Declaring war on the frankokratia leader can really ruin the whole thing
		if = {
			limit = {
				scope:defender = {
					any_owned_story = {
						story_type = frankokratia_story
						NOT = { has_variable = franko_war_complete }
					}
				}
			}
			multiply = 0
		}
	}

	valid_to_start = {
		exists = scope:target
		NOT = {
			scope:target.title_province = { has_province_modifier = recently_looted_modifier }
		}
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				holder = { target_is_same_character_or_above = scope:defender }
			}
		}
	}

	on_invalidated_desc = msg_county_conquest_war_invalidated_message
	
	on_invalidated = {
		#Cleanup modifiers if needed
		scope:attacker ?= { update_federate_modifiers_single_effect = yes }
		scope:defender ?= { update_federate_modifiers_single_effect = yes }
	}

	cost = {
		piety = {
			value = 0
			if = {
				limit = {
					scope:defender.faith = scope:attacker.faith
				}
				add = {
					value = minor_piety_value
					desc = CB_SAME_FAITH_COST
				}
			}

			multiply = common_cb_piety_cost_multiplier
		}
		prestige = {
			value = minor_prestige_value
			if = {
				limit = {
					NOT = { scope:defender.faith = scope:attacker.faith }
				}
				add = {
					value = minor_prestige_value
					desc = CB_COST_DIFFERENT_FAITH
				}
			}
			multiply = common_cb_prestige_cost_multiplier
		}
	}

	on_declaration = {
		#Save current subsidy level
		scope:attacker = { save_current_subsidy_level_effect = yes }
		on_declared_war = yes
		if = {
			limit = { scope:attacker = { is_tributary = yes } }
			scope:attacker = { tributary_contract_set_obligation_level = { type = tributary_war_participation_obligation level = 0 } }
			scope:attacker = { tributary_contract_set_obligation_level = { type = suzerain_war_participation_guarantee level = 0 } }
		}
		#Remove ceased tribute and declared war opinions, replace with raiding me opinion
		scope:defender = {
			remove_opinion = {
				target = scope:attacker
				modifier = declared_war
			}
			remove_opinion = {
				modifier = tributary_ceased_payments_opinion
				target = scope:attacker
			}
			add_opinion = {
				modifier = raided_me_opinion
				target = scope:attacker
			}
		}
	}

	on_victory_desc = {
		triggered_desc = {
			trigger = {
				scope:attacker = { is_local_player = yes }
			}
			desc = border_raid_cb_desc_victory_attacker
		}
		triggered_desc = {
			trigger = {
				scope:defender = { is_local_player = yes }
			}
			desc = border_raid_cb_desc_victory_defender
		}
	}

	on_victory = {
		# Legitimacy
		add_legitimacy_attacker_victory_effect = yes
		
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		
		every_in_list = {
			list = target_titles
			save_scope_as = raid_county
			# Set raided province modifier
			title_province = {
				add_province_modifier = {
					modifier = recently_looted_modifier
					years = 5
				}
			}
			show_as_tooltip = {
				every_in_list = {
					list = target_titles
					fp2_border_raid_damage_effect = yes
				}
			}
			# Find province for building destruction
			ordered_county_province = {
				order_by = num_buildings
				random = {
					chance = 25
					modifier = { factor = destroy_building_soldier_multiplier_value } # chance increases with more soldiers
					modifier = { add = destroy_building_development_multiplier_value } # chance increases with development
					custom_tooltip = destroy_random_building_tt
					destroy_random_building_variable_effect = yes
				}
			}
		}

		hidden_effect = {
			scope:attacker = {
				send_interface_message = {
					type = event_raid_good
					title = border_raid_message_title
					show_as_tooltip = {
						every_in_list = {
							list = target_titles
							fp2_border_raid_damage_effect = yes
						}
					}
				}
			}
			scope:defender = {
				send_interface_message = {
					type = event_raid_bad
					title = border_raid_message_title
					every_in_list = {
						list = target_titles
						fp2_border_raid_damage_effect = yes
					}
				}
			}
		}

		show_as_tooltip = { #NB: this provides the CB highlighting
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			every_in_list = {
				list = target_titles
				change_title_holder = {
					holder = scope:attacker
					change = scope:change
				}
			}
			resolve_title_and_vassal_change = scope:change
		}

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = miniscule_prestige_value
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Break alliances now out of diplo range
		if = {
			limit = {
				scope:attacker = {
					any_ally = {
						NOT = { in_diplomatic_range = scope:attacker }
					}
				}
			}
			scope:attacker = {
				every_ally = {
					limit = {
						NOT = { in_diplomatic_range = scope:attacker }
					}
					break_alliance = scope:attacker
				}
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		#Improve Tributary subsidies, if possible
		custom_description = {
			text = improve_old_subsidies
			scope:attacker = {
				if = { limit = { has_variable = subsidy_level } change_variable = { name = subsidy_level subtract = 1 } }
				reestablish_federate_and_set_federate_subsidies_effect = { SUZERAIN = scope:defender }
			}
		}

		# EP3: note gold gained from military assistance/join war contracts and their war contribution threshold
		laamp_as_mercenary_payout_tooltip_effect = yes
	}

	on_white_peace_desc = {
		triggered_desc = {
			trigger = {
				scope:attacker = { is_local_player = yes }
			}
			desc = border_raid_cb_desc_white_peace_attacker
		}
		triggered_desc = {
			trigger = {
				scope:defender = { is_local_player = yes }
			}
			desc = border_raid_cb_desc_white_peace_defender
		}
	}

	on_white_peace = {
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = miniscule_prestige_value
				multiply = -1.0
			}
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		add_truce_white_peace_effect = yes

		#Improve Tributary subsidies, if possible
		custom_description = {
			text = keep_old_subsidies
			scope:attacker = {
				reestablish_federate_and_set_federate_subsidies_effect = { SUZERAIN = scope:defender }
			}
		}

		# EP3: note gold gained from military assistance/join war contracts and their war contribution threshold
		laamp_as_mercenary_payout_tooltip_effect = yes
	}

	on_defeat_desc = {
		triggered_desc = {
			trigger = {
				scope:attacker = { is_local_player = yes }
			}
			desc = border_raid_cb_desc_defeat_attacker
		}
		triggered_desc = {
			trigger = {
				scope:defender = { is_local_player = yes }
			}
			desc = border_raid_cb_desc_defeat_defender
		}
	}

	on_defeat = {
		# Legitimacy
		add_legitimacy_attacker_defeat_effect = yes
		
		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_low_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 1
			}
			add_prestige = {
				value = medium_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = medium_prestige_value
			}
		}

		# Prestige for the attacker's war allies
		add_from_contribution_attackers = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		# Prestige for the defender's war allies
		add_from_contribution_defenders = {
			prestige = minor_prestige_value
			opinion = {
				modifier = contributed_in_war
			}
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}

		on_lost_aggression_war_discontent_loss = yes

		#Reduce subsidies, if possible
		custom_description = {
			text = reduce_old_subsidies
			scope:attacker = {
				if = { limit = { has_variable = subsidy_level } change_variable = { name = subsidy_level add = 1 } }
				reestablish_federate_and_set_federate_subsidies_effect = { SUZERAIN = scope:defender }
			}
		}

		# EP3: note gold gained from military assistance/join war contracts and their war contribution threshold
		laamp_as_mercenary_payout_tooltip_effect = yes
	}

	transfer_behavior = invalidate

	on_primary_attacker_death = invalidate
	on_primary_defender_death = invalidate

	attacker_allies_inherit = no
	defender_allies_inherit = no

	war_name = "FEDERATE_RAID_WAR_NAME"
	war_name_base = "FEDERATE_RAID_WAR_NAME_BASE"
	cb_name = "FEDERATE_RAID_WAR_CB_NAME"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	# The war will last 2 years at most
	defender_ticking_warscore_delay = { months = 3 }
	defender_ticking_warscore = 0.15

	attacker_wargoal_percentage = 1
	attacker_ticking_warscore = 1

	max_defender_score_from_occupation = 100
	max_attacker_score_from_occupation = 1

	ticking_war_score_targets_entire_realm = no
}
