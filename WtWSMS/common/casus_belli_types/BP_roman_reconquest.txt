#Cribbed from Vanilla CK3 Imperial Reconquest
the_roman_empires_imperial_reconquest_cb = {
	group = de_jure
	icon = roman_wars
	
	allow_hostages = no

	#you should at least have to siege down something, and the wars should have the potential to be longer and costlier
	max_attacker_score_from_battles = 75

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		scope:attacker = {
			is_independent_ruler = yes
			#Title ownership restrictions
			OR = {
				roman_reconquest_title_ownership_restrictions_trigger = { #WRE case
					VALID = title:e_wre
					INVALID = title:e_byzantium
				}
				roman_reconquest_title_ownership_restrictions_trigger = { #ERE case
					VALID = title:e_byzantium
					INVALID = title:e_wre
				}
				OR = {
					has_title = title:e_roman_empire
					has_claim_on = title:e_roman_empire
				}
			}
			valid_reconquest_culture_trigger = { CULTURE = scope:attacker.culture }
		}
	}
	
	allowed_against_character = {
		scope:defender = {
			is_independent_ruler = yes
			NOT = { faith.religion = religion:islam_religion }
			NOR = {
				has_title = title:e_wre
				has_title = title:e_byzantium
				has_title = title:e_roman_empire
			}
			NOR = {
				scope:defender = { target_is_liege_or_above = scope:attacker }
				scope:attacker = { target_is_liege_or_above = scope:defender }
			}
		}
	}

	target_titles = all
	target_title_tier = tier_kingdom
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	ai_only_against_neighbors = yes
	
	cost = {
		gold = {
			value = scope:attacker.yearly_character_income
			multiply = 0.5
			min = imperial_reconquest_war_gold_cost
		}
		prestige = imperial_reconquest_war_fame_cost
	}
	
	valid_to_start = {
		OR = {
			roman_reconquest_valid_target_region_trigger = { #WRE Case
				ATTACKER_TITLE = title:e_wre
				ATTACKER_REGION = world_roman_empire_west
			}
			roman_reconquest_valid_target_region_trigger = { #ERE Case
				ATTACKER_TITLE = title:e_byzantium
				ATTACKER_REGION = world_roman_empire_east
			}
			roman_reconquest_valid_with_claim_target_region_trigger = { #Roman Case
				ATTACKER_TITLE = title:e_roman_empire
				ATTACKER_REGION = world_roman_empire
			}
		}
	}
	
	on_declaration = {
		on_declared_war = yes
	}
	
	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = de_jure_cb_victory_desc_attacker
			}
			desc = de_jure_cb_victory_desc
		}
		
	}
	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		#Go through all the titles and mark them for handling
		every_in_list = {
			list = target_titles
			
			#Go over extant duchies to find vassals to transfer
			every_in_de_jure_hierarchy = {
				limit = {
					tier >= tier_county
					exists = holder
					holder = {
						OR = {
							target_is_liege_or_above = scope:defender
							this = scope:defender
						}
					}
				}
				
				if = {
					limit = {
						exists = holder
						NOT = { holder = scope:defender }
						this = { is_de_jure_liege_or_above_target = holder.capital_province.barony } #barony ensures counties and up
					}
					holder = { add_to_temporary_list = vassals_taken }
				}
			}
			#Go over counties to seize
			every_in_de_jure_hierarchy = {
				limit = {
					tier >= tier_county
					exists = holder
					holder = {
						OR = {
							target_is_liege_or_above = scope:defender
							this = scope:defender
						}
					}
				}
				
				#If owned by the defender or not owned by a new vassal, seize it
				if = {
					limit = {
						exists = holder
						OR = {
							holder = scope:defender
							NOT = { holder = { is_in_list = vassals_taken } }
						}
					}
					add_to_temporary_list = titles_taken
				}
			}
		}
		#Transfer Counties
		every_in_list = {
			list = titles_taken
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = no
			}
		}
		#Transfer vassals
		every_in_list = {
			list = vassals_taken
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change
		
		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = de_jure_cb_white_peace_desc_defender
			}
			desc = de_jure_cb_white_peace_desc
		}
		
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = target
		}
		
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			victory = no
			title = scope:target
		}
		
		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = de_jure_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = de_jure_cb_defeat_desc_attacker
			}
			desc = de_jure_cb_defeat_desc
		}
		
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
	
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
		}
		
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = target
		}
		
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			victory = no
			title = scope:target
		}
	
		# Truce
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "IMPERIAL_RECONQUEST_WAR_SPECIFIC_NAME"
	war_name_base = "IMPERIAL_RECONQUEST_WAR_SPECIFIC_NAME_BASE"
	cb_name = IMPERIAL_RECONQUEST_SPECIFIC_NAME
	interface_priority = 98 #Below take all and regular dejure.

	attacker_wargoal_percentage = 0.8
	
	max_ai_diplo_distance_to_title = 500
	
	on_invalidated_desc = msg_invalidate_war_title
}

#Cribbed from Vanilla CK3 Imperial Reconquest
successor_imperial_reconquest_cb = {
	group = de_jure
	icon = roman_wars
	
	allow_hostages = no

	#you should at least have to siege down something, and the wars should have the potential to be longer and costlier
	max_attacker_score_from_battles = 75

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		scope:attacker = { is_independent_ruler = yes }
		OR = {
			scope:attacker = {
				NOR = {
					has_title = title:e_roman_empire
					has_title = title:e_wre
					has_title = title:e_byzantium
				}
				valid_reconquest_culture_trigger = { CULTURE = scope:attacker.culture }
			}
			scope:attacker = { has_character_modifier = foederatus_right_to_rule }
		}
	}
	
	allowed_against_character = {
		scope:defender = {
			is_independent_ruler = yes
			NOT = { faith.religion = religion:islam_religion }
			NOR = {
				has_title = title:e_wre
				has_title = title:e_byzantium
				has_title = title:e_roman_empire
			}
			NOR = {
				scope:defender = { target_is_liege_or_above = scope:attacker }
				scope:attacker = { target_is_liege_or_above = scope:defender }
			}
		}
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
			}
		}
	}

	target_titles = neighbor_land_or_water
	target_title_tier = tier_kingdom
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder
	ai_only_against_neighbors = yes
	cost = {
		gold = {
			value = scope:attacker.yearly_character_income
			multiply = 0.5
			min = successor_reconquest_war_gold_cost
			if = { #Because tribals won't have much money
				limit = { scope:attacker = { has_character_modifier = foederatus_right_to_rule } }
				multiply = 0
			}
		}
		prestige = successor_reconquest_war_fame_cost
	}
	
	valid_to_start = {
		roman_reconquest_valid_region_trigger = { TARGET_REGION = world_roman_empire }
	}
	
	on_declaration = {
		on_declared_war = yes
	}
	
	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
			}
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = de_jure_cb_victory_desc_attacker
			}
			desc = de_jure_cb_victory_desc
		}
		
	}
	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		#Go through all the titles and mark them for handling
		every_in_list = {
			list = target_titles
			
			#Go over extant duchies to find vassals to transfer
			every_in_de_jure_hierarchy = {
				limit = {
					tier >= tier_county
					exists = holder
					holder = {
						OR = {
							target_is_liege_or_above = scope:defender
							this = scope:defender
						}
					}
				}
				
				if = {
					limit = {
						exists = holder
						NOT = { holder = scope:defender }
						this = { is_de_jure_liege_or_above_target = holder.capital_province.barony } #barony ensures counties and up
					}
					holder = { add_to_temporary_list = vassals_taken }
				}
			}
			#Go over counties to seize
			every_in_de_jure_hierarchy = {
				limit = {
					tier >= tier_county
					exists = holder
					holder = {
						OR = {
							target_is_liege_or_above = scope:defender
							this = scope:defender
						}
					}
				}
				
				#If owned by the defender or not owned by a new vassal, seize it
				if = {
					limit = {
						exists = holder
						OR = {
							holder = scope:defender
							NOT = { holder = { is_in_list = vassals_taken } }
						}
					}
					add_to_temporary_list = titles_taken
				}
			}
		}
		#Transfer Counties
		every_in_list = {
			list = titles_taken
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = no
			}
		}
		#Transfer vassals
		every_in_list = {
			list = vassals_taken
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change
		
		#If a Foederatus does this sort of conquest, let them upgrade their government if possible
		if = {
			limit = { scope:attacker = { has_character_modifier = foederatus_right_to_rule } }
			scope:attacker = {
				scope:defender = { save_scope_as = the_old_ruler }
				trigger_event = { id = migration_war.0100 days = {2 7} }
			}
		}
		
		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = de_jure_cb_white_peace_desc_defender
			}
			desc = de_jure_cb_white_peace_desc
		}
		
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = target
		}
		
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			victory = no
			title = scope:target
		}
		
		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = de_jure_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = de_jure_cb_defeat_desc_attacker
			}
			desc = de_jure_cb_defeat_desc
		}
		
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
	
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
		}
		
		every_in_list = {
			list = target_titles
			save_temporary_scope_as = target
		}
		
		setup_de_jure_cb = {
			attacker = scope:attacker
			defender = scope:defender
			victory = no
			title = scope:target
		}
	
		# Truce
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "SUCCESSOR_IMPERIAL_RECONQUEST_WAR_SPECIFIC_NAME"
	war_name_base = "SUCCESSOR_IMPERIAL_RECONQUEST_WAR_SPECIFIC_NAME_BASE"
	cb_name = SUCCESSOR_IMPERIAL_RECONQUEST_SPECIFIC_NAME
	interface_priority = 98 #Below take all and regular dejure.

	attacker_wargoal_percentage = 0.8
	
	max_ai_diplo_distance_to_title = 500
	
	on_invalidated_desc = msg_invalidate_war_title

}
