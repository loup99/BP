##### Changed from Vanilla: Blocked prior to early_medieval era
create_holy_order_decision = {
	picture = "gfx/interface/illustrations/decisions/decision_major_religion.dds"
	major = yes

	ai_goal = yes

	##### Changed from Vanilla vvvvv
	is_shown = {
		is_landed = yes
		NOT = {
			faith = {
				any_faith_holy_order = {
					holy_order_patron = root
					save_temporary_scope_as = order
				}
			}
		}
		# Jomsvikings should use their special decision if appropriate.
		trigger_if = {
			limit = { has_fp1_dlc_trigger = yes }
			faith = {
				NOT = { fp1_valid_norse_faith_for_jomsvikings_trigger = yes }
			}
		}
		trigger_if = {
			limit = {
				any_character_struggle = {
					involvement = involved
					has_struggle_phase_parameter = holy_order_can_be_created_by_dukes
				}
				highest_held_title_tier >= tier_duchy
			}
			NOT = {
				any_sub_realm_barony = {
					is_under_holy_order_lease = yes
				}
			}
		}
		##### Changed from Vanilla vvvvv
		culture = { has_innovation = innovation_scriptural_cannon }
		##### Changed from Vanilla ^^^^^
	}
	##### Changed from Vanilla ^^^^^

	widget = {
		controller = create_holy_order
		barony_valid = {
			trigger_if = {
				limit = { exists = this }
				barony_is_valid_for_holy_order_lease_trigger = { CHARACTER = scope:ruler }
			}
			trigger_else = {
				custom_description = {
					text = "has_holy_order_barony_selected"
					always = no
				}
			}
		}
	}

	is_valid_showing_failures_only = {
		is_available_adult = yes
		is_at_war = no
	}

	is_valid = {
		trigger_if = {
			limit = {
				any_character_struggle = {
					involvement = involved
					has_struggle_phase_parameter = holy_order_can_be_created_by_dukes
				}
			}
			highest_held_title_tier >= tier_duchy
		}
		trigger_else = {
			custom_description = {
				text = "is_king_or_emperor"
				highest_held_title_tier >= tier_kingdom
			}
		}

		custom_description = {
			text = "has_two_castle_county"
			any_held_county = {
				any_in_de_jure_hierarchy = {
					barony_is_valid_for_holy_order_lease_trigger = { CHARACTER = scope:ruler }
				}
			}
		}
		trigger_if = {
			limit = {
				exists = faith.religious_head
				NOT = { root = root.faith.religious_head }
			}
			faith.religious_head = {
				opinion = {
					target = root
					value >= {
						value = 0
						if = {
							limit = { is_ai = no }
					 		add = high_positive_opinion
						}
					}
				}
			}
		}
		
		trigger_if = {
			limit = {
				is_ai = yes
			}
			piety_level >= 1
		}
		trigger_else = {
			piety_level >= 3
		}
	}
	cost = {
		gold = {
			value = holy_order_gold_cost
		}
		piety = {
			value = holy_order_piety_cost
		}
	}

	effect = {
		custom_tooltip = create_holy_order_decision_effect_message

		if = { # If you have no valid barony this will throw errors when you open the decision - we add this check to avoid that 
			limit = {
				exists = scope:barony
			}
			hidden_effect = {
				if = {
					limit = { NOT = { scope:barony.holder = root } }
					create_title_and_vassal_change = {
						type = leased_out
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:barony = {
						change_title_holder_include_vassals = {
							holder = root
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}

			create_character = {
				template = holy_order_leader_character
				location = scope:barony.title_province
				save_scope_as = leader
			}

			create_holy_order_neutral_effect = {
				LEADER = scope:leader
				CAPITAL = scope:barony
				NEW_HO_SCOPE = new_holy_order
				FOUNDER = root
			}
		}

		hidden_effect = {
			if = { # If you have no valid barony this will throw errors when you open the decision since the leader won't be saved - we add this check to avoid that 
				limit = {
					exists = scope:leader
				}
				scope:leader = {
					add_gold = 100 #So that they have some money to lend out
					add_piety_level = 2
					add_gold = holy_order_starting_gold
					every_courtier = {
						add_trait = order_member
					}
				}
				
				# Messages
				send_interface_toast = {
					type = holy_order_founded_message
					desc = i_created_holy_order_message
					left_icon = scope:leader
					right_icon = scope:new_holy_order.title
				}
			}
			save_scope_as = holy_order_creator
			every_ruler = {
				limit = {
					faith = scope:holy_order_creator.faith
					NOT = { this = scope:holy_order_creator }
				}
				send_interface_message = {
					type = holy_order_founded_message
					desc = someone_created_holy_order_message
					left_icon = scope:holy_order_creator
					right_icon = scope:new_holy_order.title
				}
			}
			every_neighboring_top_liege_realm_owner = {
				limit = {
					NOT = { faith = scope:holy_order_creator.faith }
				}
				send_interface_message = {
					type = enemy_holy_order_founded_message
					desc = other_faith_neighbor_created_holy_order_message
					left_icon = scope:holy_order_creator
					right_icon = scope:new_holy_order.title
				}
			}

			add_achievement_flag_effect = { FLAG = achievement_non_nobis_domine_flag }

			hidden_effect = {
				if = {
					limit = { exists = global_var:started_give_a_dog_a_bone_achievement }
					add_achievement_global_variable_effect = {
						VARIABLE = holy_order_give_a_dog_a_bone_achievement
						VALUE = yes
					}
				}
			}
		}
		create_holy_order_effect = yes
	}
	
	ai_potential = {
		highest_held_title_tier >= tier_kingdom
		is_landed = yes
		OR = {
			any_held_title = {
				tier = tier_barony
				barony_is_valid_for_holy_order_lease_trigger = { CHARACTER = root }
			}
			any_vassal = {
				primary_title.tier = tier_barony
				any_held_title = {
					barony_is_valid_for_holy_order_lease_trigger = { CHARACTER = root }
				}
			}
		}
	}

	ai_will_do = {
		base = 200
		modifier = {
			add = {
				faith = {
					# Don't create more than 5 holy orders for a faith
					every_faith_holy_order = {
						subtract = 40
					}
				}
			}
		}

	}
}
