types Breakdowns
{
	## List of values tooltip
	type widget_value_breakdown_tooltip = widget {
		name = "values_grid"
		size = { 50 50 }
		alwaystransparent = no

		background = {
			using = Background_Area_Border_Solid
		}

		vbox = {
			datamodel = "[ValueBreakdown.GetSubValues]"
			alwaystransparent = no
			set_parent_size_to_minimum = yes
			margin = { 17 10 }
			spacing = 3

			block "header" {}

			item = {
				hbox = {
					name = "value_breakdown"
					layoutpolicy_horizontal = expanding

					text_single = {
						name = "name"
						layoutpolicy_horizontal = expanding
						text = "[ValueBreakdown.GetName]"
						min_width = 180
						max_width = 250
						fonttintcolor = "[TooltipInfo.GetTintColor]"
						margin_right = 10
					}

					text_single= {
						visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
						name = "value_with_tooltip"
						text = "[ValueBreakdown.GetValue|L]"
						align = right
						fonttintcolor = "[TooltipInfo.GetTintColor]"

						using = tooltip_below

						tooltipwidget = {
							recursive = yes

							widget_value_breakdown_tooltip = {}
						}
					}

					text_single = {
						visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
						name = "value_with_no_tooltip"
						text = "[ValueBreakdown.GetValue]"
						align = right
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}
				}
			}
		}
	}

	## Gold Breakdown Tooltip
	type widget_gold_breakdown_tooltip = widget {
		alwaystransparent = no

		block "background" { #### needed to solve the hack for tooltip in Realm View
			using = DefaultTooltipBackground
		}

		vbox = {
			layoutpolicy_horizontal = expanding

			set_parent_size_to_minimum = yes
			margin = { 14 8 }
			margin_bottom = 18
			spacing = 14

			block "my_gold" {}

			vbox_gold_breakdown = {
				name = "income"
				layoutpolicy_horizontal = expanding
				block "income" {}
				block "jankcome_gold" {}
			}


			vbox_gold_breakdown = {
				name = "expenses"
				layoutpolicy_horizontal = expanding
				block "expenses" {}
			}

			block "gold_income" {}
		}
	}

	type vbox_gold_breakdown = vbox {
		spacing = 6
		alwaystransparent = no

		vbox = {
			layoutpolicy_horizontal = expanding

			text_single = {
				layoutpolicy_horizontal = expanding
				text = "[ValueBreakdown.GetName]"
				default_format = "#T"

				background = {
					using = Background_Area
					margin = { 10 0 }
					margin_bottom = 8
				}
			}

			vbox = {
				name = "values_grid"
				datamodel = "[ValueBreakdown.GetSubValues]"
				layoutpolicy_horizontal = expanding
				margin_top = 2

				item = {
					hbox = {
						name = "value_breakdown"
						layoutpolicy_horizontal = expanding
						spacing = 10

						text_single = {
							name = "name"
							layoutpolicy_horizontal = expanding
							text = "[ValueBreakdown.GetName]"
						}

						text_single = {
							name = "value_with_tooltip"
							visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
							text = "[ValueBreakdown.GetValue|L]"
							align = right
							default_format = "#high"

							using = tooltip_se

							tooltipwidget = {
								widget_value_breakdown_tooltip = {}
							}
						}

						text_single = {
							name = "value_with_no_tooltip"
							visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
							text = "[ValueBreakdown.GetValue]"
							align = right
						}
					}
				}
			}

			text_single = {
				visible = "[Not(DataModelHasItems( ValueBreakdown.GetSubValues ))]"
				layoutpolicy_horizontal = expanding
				block "no_values" {
					text = "VALUE_BREAKDOWN_NO_VALUES"
				}
				default_format = "#weak"
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				margin_top = 10

				divider_light = {
					layoutpolicy_horizontal = expanding
				}


				hbox = {
					visible = "[DataModelHasItems( ValueBreakdown.GetSubValues )]"
					layoutpolicy_horizontal = expanding

					text_single = {
						visible = "[ValueBreakdown.ShouldShowValue]"
						layoutpolicy_horizontal = expanding

						text = "VALUE_BREAKDOWN_TOTAL"
					}

					text_single = {
						text = "[ValueBreakdown.GetValue|+]"
						default_format = "#high"
					}
				}
			}
		}
	}

	## Resource Breakdown Tooltip
	type widget_resource_value_tooltip = widget {
		alwaystransparent = no

		using = DefaultTooltipBackground

		vbox = {
			name = "tooltip_container"
			set_parent_size_to_minimum = yes
			filter_mouse = all
			margin = { 14 8 }
			margin_bottom = 12

			vbox = {
				layoutpolicy_horizontal = expanding
				margin_bottom = 14
				spacing = 5

				block "header" {}

				text_single = {
					layoutpolicy_horizontal = expanding
					text = "MY_VALUE_LABEL"
					default_format = "#high;bold"
					using = Font_Size_Medium
					fonttintcolor = "[TooltipInfo.GetTintColor]"

					background = {
						using = Background_Area
						margin = { 10 0 }
						margin_bottom = 5
					}
				}


				text_single = {
					name = "total_label_no_tooltip"
					layoutpolicy_horizontal = expanding
					text = "TOTAL_BREAKDOWN_LABEL"
					visible = "[EqualTo_CFixedPoint(PlayerValueItem.GetBalance, '(CFixedPoint)0')]"
				}

				text_single = {
					name = "total_label"
					layoutpolicy_horizontal = expanding
					text = "TOTAL_BREAKDOWN_LABEL"
					visible = "[NotEqualTo_CFixedPoint(PlayerValueItem.GetBalance, '(CFixedPoint)0')]"
					using = tooltip_ws

					tooltipwidget = {
						widget = {
							size = { 50 50 }
							alwaystransparent = no

							widget = {
								name = "background"
								using = DefaultTooltipBackground
								size = { 100% 100% }
								alwaystransparent = yes

								blockoverride "frame_color" {
									tintcolor = { 0.7 0.7 0.7 1}
								}
							}

							vbox = {
								set_parent_size_to_minimum = yes
								margin = { 5 5 }
								vbox = {
									datacontext = "[PlayerValueItem.GetBalanceGained]"
									visible = "[ValueBreakdown.HasTooltip]"
									layoutpolicy_horizontal = expanding

									background = {
										using = Background_Area_Border_Solid
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										margin = { 15 0 }
										margin_bottom = 5

										text_single = {
											name = "gained_label"
											layoutpolicy_horizontal = expanding
											text = "GAINED_BREAKDOWN_LABEL_LINK"
											fonttintcolor = "[TooltipInfo.GetTintColor]"
										}

										text_single = {
											name = "gained_value"
											visible = "[ValueBreakdown.ShouldShowValue]"
											text = "[ValueBreakdown.GetValue]"
											fonttintcolor = "[TooltipInfo.GetTintColor]"
										}
									}

									widget_value_breakdown_tooltip = {
										layoutpolicy_horizontal = expanding
									}
								}
							}
						}
					}
				}

				#i hate pdx i hate pdx i hate pdx
				block "resurces_meme" {
				}				
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				spacing = 15

				hbox = {
					spacing = 5
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area
						margin = { 10 0 }
						margin_bottom = 5
					}

					text_single = {
						text = "PLAYER_VALUE_LEVEL_LABEL"
						layoutpolicy_horizontal = expanding

						default_format = "#T"
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					text_single = {
						name = "current_level"
						layoutpolicy_horizontal = expanding

						text = "[PlayerValueItem.GetCurrentLevelName]"
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					expand = {}
				}

				vbox = {
					visible = "[PlayerValueItem.HasNextLevel]"
					layoutpolicy_horizontal = expanding
					spacing = 5

					text_single = {
						name = "progress_label"
						layoutpolicy_horizontal = expanding

						text = "[PlayerValueItem.GetProgressTowardNextLevelLabel]"
						fonttintcolor = "[TooltipInfo.GetTintColor]"
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						margin_left = -3

						progressbar_standard = {
							layoutpolicy_horizontal = expanding
							size = { -1 15 }
							tintcolor = "[TooltipInfo.GetTintColor]"
							value = "[PlayerValueItem.GetProgressTowardNextLevel]"
							tooltip = "[PlayerValueItem.GetProgressTooltip]"
						}

						expand = {}
					}
				}
			}
		}
	}

	# Requires a ActiveCouncilTask datacontext
	type council_task_progress_breakdown_widget = widget
	{
		size = { 50 50 }
		alwaystransparent = no
		datacontext = "[ActiveCouncilTask.GetProgressBreakdown]"

		using = DefaultTooltipBackground

		vbox = {
			set_parent_size_to_minimum = yes
			minimumsize = { 280 0 }

			margin = { 10 10 }

			layoutpolicy_horizontal = expanding

			text_single = {
				name = "header"
				text = COUNCIL_TASK_PROGRESSBAR_TOOLTIP_HEADER
			}

			text_single = {
				name = "frozen"
				text = COUNCIL_TASK_PROGRESSBAR_FROZEN
				visible = "[ActiveCouncilTask.IsFrozen]"
			}

			vbox = {
				name = "progress_breakdown"
				layoutpolicy_horizontal = expanding
				visible = "[And( ActiveCouncilTask.GetTaskType.IsProgressDefined, Not( ActiveCouncilTask.IsFrozen ) )]"

				margin = { 0 5 }

				text_single = {
					name = "progress_rate_header"
					visible = "[ActiveCouncilTask.GetTaskType.IsPercentageTask]"
					text = COUNCIL_TASK_PROGRESS_RATE
				}
				text_single = {
					name = "progress_rate_header_value"
					visible = "[Not( ActiveCouncilTask.GetTaskType.IsPercentageTask )]"
					text = COUNCIL_TASK_PROGRESS_RATE_VALUE
				}

				widget_value_breakdown_tooltip = {
					layoutpolicy_horizontal = expanding
				}

				text_single = {
					name = "task_eta"
					text = "[ActiveCouncilTask.GetETA]"
				}
			}
		}
	}

	type court_position_aptitude_breakdown_tooltip = widget {
		name = "AptitudeBreakdownTooltip"
		using = GeneralTooltipSetup
		alwaystransparent = no

		using = DefaultTooltipBackground
		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 16 8 }
			minimumsize = { 300 80 }

			# Header
			hbox = {
				layoutpolicy_horizontal = expanding
				minimumsize = { 100% 50 }

				background = {
					name = "header"
					texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
					spriteType = Corneredstretched
					margin = { 15 0 }
					texture_density = 2

					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 160 0 }
						blend_mode = alphamultiply
						alpha = 0.5
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					block "header_additions" {}

					vbox = {
						name = "FancyHeader"
						layoutpolicy_horizontal = expanding
						alwaystransparent = no

						text_single = {
							layoutpolicy_horizontal = expanding
							autoresize = yes
							name = "title"

							fontsize_min = 14
							using = Font_Size_Medium
							fonttintcolor = "[TooltipInfo.GetTintColor]"

							block "header_text" {

							}
						}
					}
				}

				expand = {}
			}

			# Modifiers
			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				text_single = {
					layoutpolicy_horizontal = expanding
					default_format = "#S"
					text = COURT_POSITION_TOOLTIP_EFFECT_ON_LIEGE
				}

				vbox = {
					margin = { 16 4 }
					textbox = {
					name = "modifiers"
					using = DefaultTooltipText
					layoutpolicy_horizontal = expanding
					multiline = yes
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					alwaystransparent = no

					block "modifier_list" { }
				}
			}

			# Breakdown
			vbox = {
				name = "aptitude_breakdown"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 0 8 }


				# Header
				hbox = {
					layoutpolicy_horizontal = expanding
					text_single = {
						layoutpolicy_horizontal = expanding
						default_format = "#S"
						text = COURT_POSITION_aptitude_character_possessive
					}
					expand = {}
				}
				
				# The Breakdown
				vbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datamodel = "[ValueBreakdown.GetSubValues]"
					alwaystransparent = no
					margin = { 16 4 }

					item = {
						hbox = {
							name = "value_breakdown"
							spacing = 5

							layoutpolicy_horizontal = expanding

							text_single = {
								name = "name"
								layoutpolicy_horizontal = expanding
								text = "[ValueBreakdown.GetName]"
								fonttintcolor = "[TooltipInfo.GetTintColor]"
								margin_right = 10
							}

							text_single = {
								visible = "[And(ValueBreakdown.HasTooltip, ValueBreakdown.ShouldShowValue)]"
								name = "value_with_tooltip"
								text = "[ValueBreakdown.GetValue|L]"
								align = right
								fonttintcolor = "[TooltipInfo.GetTintColor]"

								using = tooltip_below

								tooltipwidget = {
									recursive = yes

									widget_value_breakdown_tooltip = {}
								}
							}

							text_single = {
								visible = "[And( Not(ValueBreakdown.HasTooltip), ValueBreakdown.ShouldShowValue )]"
								name = "value_with_no_tooltip"
								text = "[ValueBreakdown.GetValue]"
								align = right
								fonttintcolor = "[TooltipInfo.GetTintColor]"
							}
						}
					}
				}
			}
		}

	}
}
