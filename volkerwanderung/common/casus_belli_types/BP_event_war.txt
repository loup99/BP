#Odacer's conquest of WRE
odoacer_takeover_war = { #Cribbed from invasion wars
	group = event
	
	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }
	
	allowed_for_character = {}
	allowed_for_character_display_regardless = {}
	
	allowed_against_character = {}
	target_titles = none
	target_title_tier = none
	target_de_jure_regions_above = no
	ignore_effect = change_title_holder
	
	#One of the two must loose
	white_peace_possible = no
	
	ai_can_target_all_titles = {}
	ai_score_mult = {}

	valid_to_start = { always = yes }

	should_invalidate = { NOT = { exists = title:e_wre } }

	on_invalidated_desc = msg_invasion_war_invalidated_message
	
	#If invalidated, destroy the Kingdom of Italy but don't imprison Odacer
	on_invalidated = { scope:attacker = { destroy_title = title:k_italy } }

	#No cost, event driven
	cost = {}
	
	on_declaration = {
		on_declared_war = yes
		scope:attacker = { #Needs a fat stack of troops
			create_odoacer_army_effect = { KEEP_AFTER_VICTORY = yes }
			create_odoacer_army_effect = { KEEP_AFTER_VICTORY = yes }
			create_odoacer_army_effect = { KEEP_AFTER_VICTORY = yes }
			create_odoacer_army_effect = { KEEP_AFTER_VICTORY = no }
			create_odoacer_army_effect = { KEEP_AFTER_VICTORY = no }
			create_odoacer_army_effect = { KEEP_AFTER_VICTORY = no }
		}
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = invasion_war_victory_desc_attacker
			}
			desc = invasion_war_victory_desc
		}
		triggered_desc = {
			trigger = { scope:attacker = { is_local_player = yes } }
			desc = invasion_war_warning_desc
		}
	}
	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		scope:defender = {
			#Parse out what to do with Romulus' titles
			every_held_title = {
				if = {
					limit = { this.tier > tier_county }
					this = { add_to_temporary_list = titles_destroyed }
				}
				else_if = {
					limit = { this.tier = tier_county }
					this = { add_to_temporary_list = titles_taken }
				}
			}
			every_vassal = {
				limit = { this.primary_title.tier >= tier_county }
				this = { add_to_temporary_list = vassals_taken }
			}
		}
		
		#Destroy invalid titles
		every_in_list = {
			list = titles_destroyed
			scope:defender = { destroy_title = prev }
		}
		#Transfer Counties
		every_in_list = {
			list = titles_taken
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = no
			}
		}
		#Transfer vassals
		every_in_list = {
			list = vassals_taken
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change
		
		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = 1000
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 1
			LOSER_FAME_SCALE = -1
			WINNER_ALLY_FAME_SCALE = 0.5
			LOSER_ALLY_FAME_SCALE = 0.5
		}
		
		# Truce
		add_truce_attacker_victory_effect = yes
		
		scope:attacker.culture = {
			change_cultural_acceptance = {
				target = culture:roman
				desc = odoacer_takeover_war_acceptance_effect
				value = 20
			}
		}
		scope:attacker = { set_realm_capital = title:c_ravenna }
	}

#Included only for error suppression
	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = ""
			}
			desc = ""
		}
		
	}

	#No white peace possible

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker and imprionment
		scope:attacker = {
			add_prestige = {
				value = massive_prestige_value
				multiply = -1.0
			}
			#Imprison Odacer
			hard_imprison_character_effect = {
				TARGET = this
				IMPRISONER = scope:defender
			}
			scope:defender = {
				add_opinion = {
					target = prev
					modifier = vassal_lost_faction_revolt_war
				}
			}
		}
		
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		scope:attacker = {
			#Parse out what to do with Odoacer's titles
			every_held_title = {
				if = {
					limit = { this.tier > tier_county }
					this = { add_to_temporary_list = titles_destroyed }
				}
				else_if = {
					limit = { this.tier = tier_county }
					this = { add_to_temporary_list = titles_taken }
				}
			}
		}
		
		#Destroy invalid titles
		every_in_list = {
			list = titles_destroyed
			scope:attacker = { destroy_title = prev }
		}
		#Transfer Counties
		every_in_list = {
			list = titles_taken
			change_title_holder = {
				holder = scope:defender
				change = scope:change
				take_baronies = yes
			}
		}
		resolve_title_and_vassal_change = scope:change

		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = 1000
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 1
			LOSER_FAME_SCALE = -1
			WINNER_ALLY_FAME_SCALE = 0.5
			LOSER_ALLY_FAME_SCALE = 0.5
		}
	
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = { save_temporary_scope_as = loser }
		on_lost_aggression_war_discontent_loss = yes
	}
	
	transfer_behavior = transfer
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "INVASION_WAR_NAME"
	war_name_base = "INVASION_WAR_NAME_BASE"
	cb_name = "INVASION_CB_NAME"
	
	interface_priority = 100
	
	use_de_jure_wargoal_only = yes
	
	attacker_wargoal_percentage = 0.0
	max_attacker_score_from_battles = 100
	defender_score_from_occupation_scale = 0 #Occupation doesn't help the defender, only battles
	max_defender_score_from_occupation = 0
	full_occupation_by_defender_gives_victory = no
}
#Zeno's war for the empire
zenos_claim_cb = { #Like a claim_cb, but has war-scoped special troops
	group = claim

	# Root is the title
	# scope:claimant is the claimant
	# scope:attacker is the attacker
	# scope:defender is the defender
	is_allowed_claim_title = {
		custom_description = {
			text = "claimant_titles_held_by_you_or_vassal"
			NOR = {
				holder = scope:attacker
				holder = { target_is_liege_or_above = scope:attacker }
			}
		}
		scope:claimant = {
			NOT = { has_trait = incapable }
			trigger_if = {
				limit = { NOT = { scope:claimant = scope:attacker } } # You can always press your own claims
				is_imprisoned = no
			}
			#religion = scope:attacker.religion
			# claimant must not be at war against defender for this claim already
			custom_description = {
				text = "claimant_already_pressing_their_claim"
				object = root
				NAND = {
					liege = scope:attacker
					any_character_war = { casus_belli = { any_target_title = { this = root } } }
				}
			}
		}
		scope:attacker = {
			#Cannot press claims against your own vassals, as these must be revoked.
			custom_description = {
				text = "claimant_titles_held_by_attacker_vassals"
				NOT = { any_vassal_or_below = { has_title = root } }
			}
		}
		trigger_if = {
			limit = { NOT = { scope:claimant = scope:attacker } }# You can always press your own claims (though the prestige cost might be high)
			trigger_if = {
				limit = { is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = scope:claimant } }
				trigger_if = {
					limit = { scope:claimant = { is_adult = yes } }
					save_temporary_scope_as = treat_claim_as_weak
				}
				trigger_else = { always = no }
			}
			trigger_else_if = {
				limit = { scope:claimant = { is_adult = no } }
				save_temporary_scope_as = treat_claim_as_weak
			}
			# making the default behavior explicit if no other trigger_(else_)ifs are valid
			trigger_else = { always = yes }
		}
		trigger_if = {
			limit = { exists = scope:treat_claim_as_weak }
			holder = {
				custom_description = {
					text = "claim_target_position_is_weak"
					object = scope:attacker
					OR = {
						has_trait = incapable
						is_adult = no
						is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = root.holder }
					}
				}
			}
		}
		#The Byzantine Emperor must be unblemished
		trigger_if = {
			limit = {
				OR = {
					root = title:e_byzantium
					root = title:e_roman_empire
				}
				scope:defender.culture = { has_cultural_pillar = heritage_byzantine }
			}
			scope:claimant = {
				custom_description = {
					text = "byzantine_claimant_is_disfigured"
					object = scope:claimant
					NOR = {
						has_trait = incapable
						has_trait = blind
						has_trait = disfigured
						has_trait = eunuch
						has_trait = maimed
						has_trait = one_eyed
						has_trait = one_legged
						has_trait = clubfooted
						has_trait = hunchbacked
						has_trait = dwarf
					}
				}
			}
		}
		#Under Byzantine law, a ruler must be able to produce children.
		trigger_if = {
			limit = { scope:defender.culture = { has_cultural_pillar = heritage_byzantine } }
			scope:claimant = {
				custom_description = {
					text = "byzantine_claimant_is_celibate"
					object = scope:claimant
					NOR = {
						has_trait = eunuch
						has_trait = devoted
						has_trait = celibate
					}
				}
			}
		}
	}

	allowed_for_character = { root = character:70515 } #Only for Zeno

	cost = {}

	target_titles = claim

	on_declaration = {
		on_declared_war = yes
		scope:attacker = {
			create_zeno_army_effect = { LOCATION = 759 } #c_lycanonia
			create_zeno_army_effect = { LOCATION = 759 } #c_lycanonia
			create_zeno_army_effect = { LOCATION = 5672 } #c_isauria
			create_zeno_army_effect = { LOCATION = 5672 } #c_isauria
			create_zeno_army_effect = { LOCATION = 758 } #c_seleucia
			create_zeno_army_effect = { LOCATION = 758 } #c_seleucia
			create_zeno_army_effect = { LOCATION = 5637 } #c_pamphylia
			create_zeno_army_effect = { LOCATION = 5637 } #c_pamphylia
		}
	}

	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier >= tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			AND = { 
				NOT = { scope:claimant = scope:attacker } 
				scope:claimant = {
					OR = {
						is_alive = no 
						NOR = { 
							is_vassal_or_below_of = scope:attacker 
							is_courtier_of = scope:attacker 
						}
					}
				}
			} 
		}
	}

	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = { scope:claimant = scope:attacker } 
					scope:claimant = { is_alive = no }
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_dead_message
			}
			triggered_desc = {
				trigger = {
					scope:claimant = {
						NOR = { 
							this = scope:attacker 
							NOR = { 
								is_vassal_or_below_of = scope:attacker 
								is_courtier_of = scope:attacker 
							}
						}
					}
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_not_vassal_message
			}
			desc = msg_claim_war_invalidated_message
		}
	}
	
	on_invalidated = {}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}

	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}
		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant.primary_title.tier < scope:attacker.primary_title.tier
				trigger_if = {
					limit = { exists = scope:claimant.liege }
					NOT = { scope:claimant.liege = scope:attacker }
				}
				trigger_else = { always = yes }
			}

			create_title_and_vassal_change = {
				type = conquest_claim
				save_scope_as = change_two
				add_claim_on_loss = yes
			}
			scope:claimant = {
				change_liege = {
					liege = scope:attacker
					change = scope:change_two
				}
			}
			resolve_title_and_vassal_change = scope:change_two
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}
		
	}

	on_white_peace = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:claimant = { has_weak_claim_on = prev } }
				scope:claimant = {
					make_claim_strong = prev
				}
			}
		}

		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5.0
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}
		
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:defender = {
			imprison = {
				target = scope:attacker
				type = dungeon
			}
		}

		# lose claims
		every_in_list = {
			list = target_titles
			scope:claimant = { remove_claim = prev }
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
						type = favor_hook
						target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold = {
				gold = 3
				target = scope:defender
				yearly_income = yes
			}
		}
		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.0
	max_attacker_score_from_battles = 100
	full_occupation_by_defender_gives_victory = no
	defender_score_from_occupation_scale = 0 #Occupation doesn't help the defender, only battles
	max_defender_score_from_occupation = 0 #Occupation doesn't help the defender, only battles

	max_ai_diplo_distance_to_title = 1000
}
